initSidebarItems({"constant":[["GIBIBYTES_TO_BYTES","Multiply by this to turn GiB into bytes"],["KIBIBYTES_TO_BYTES","Multiply by this to turn KiB into bytes"],["MEBIBYTES_TO_BYTES","Multiply by this to turn MiB into bytes"]],"enum":[["Size1GiB",""],["Size2MiB",""],["Size4KiB",""]],"struct":[["Frame",""],["Page",""],["PhysicalAddress","Represents a physical address. If the target architecture has any requirements for valid physical addresses, they must always be observed by values of this type."],["VirtualAddress","Represents a virtual address. On architectures that have extra requirements for canonical virtual addresses (e.g. x86_64 requiring correct sign-extension in high bits), these requirements are always enforced."]],"trait":[["FrameAllocator","`FrameAllocator` is used to interact with a physical memory manager in a platform-independent way. Methods on `FrameAllocator` take `&self` and so are expected to use interior-mutability through a type such as `Mutex` to ensure safe access. This allows structures to store a reference to the allocator, and deallocate memory when they're dropped."],["FrameSize","This trait is implemented by a number of marker types, one for each size of frame and page. Different size types are defined depending on the target architecture."]]});