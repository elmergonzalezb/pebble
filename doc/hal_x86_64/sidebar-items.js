initSidebarItems({"macro":[["getter",""],["read_control_reg","Read a control register. The name of the control register should be passed as any of: `CR0`, `CR1`, `CR2`, `CR3`, `CR4`, `CR8`."],["restore_regs","Restore the saved scratch registers."],["save_regs","Macro to save the scratch registers. In System-V, `rbx`, `rbp`, `r12`, `r13`, `r14`, and `r15` must be restored by the callee, so Rust automatically generates code to restore them, but for the rest we have to manually preserve them. Use `restore_regs` to restore the scratch registers before returning from the handler."],["set_handler",""],["set_handler_with_error_code",""],["wrap_handler",""],["wrap_handler_with_error_code",""],["write_control_reg","Write to a control register. Calls to this macro will need to be inside an unsafe block, which is intended because writing to control registers can be kinda dangerous. The name of the control register should be passed as any of: `CR0`, `CR1`, `CR2`, `CR3`, `CR4`, `CR8`."]],"mod":[["hw",""],["kernel_map","This module contains constants that define how the kernel address space is laid out on x86_64. The 511th P4 entry (virtual addresses `0xffff_ff80_0000_0000` through `0xffff_ffff_ffff_ffff`) is always mapped to the kernel P3. The rest of the virtual address space (virtual addresses `0x0000_0000_0000_0000` through `0xffff_ff7f_ffff_ffff` are free for userspace to use)."],["logger",""],["paging",""],["task",""]],"struct":[["HalImpl",""]]});