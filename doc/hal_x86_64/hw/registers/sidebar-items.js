initSidebarItems({"constant":[["CR4_ENABLE_GLOBAL_PAGES",""],["CR4_ENABLE_PAE",""],["CR4_RESTRICT_RDTSC","If this is set, `rdtsc` can only be used in Ring 0."],["CR4_XSAVE_ENABLE_BIT",""],["EFER",""],["EFER_ENABLE_LONG_MODE",""],["EFER_ENABLE_NX_BIT",""],["EFER_ENABLE_SYSCALL",""],["IA32_FMASK","Upon `syscall`, the value of this MSR is used to mask `RFLAGS`. Specifically, if a bit is set in this MSR, that bit in RFLAGS is zerod."],["IA32_GS_BASE","A virtual address can be stored in this MSR, and acts as the base of the GS segment."],["IA32_LSTAR","Contains the virtual address of the handler to call upon `syscall`."],["IA32_STAR","Contains the Ring 0 and Ring 3 code-segment selectors loaded by `syscall` and `sysret`, respectively: * `syscall` loads bits 32-47 into CS (so this should be the Ring 0 code-segment) * `sysret` loads bits 48-63 into CS (so this should be the Ring 3 code-segment)"]],"fn":[["read_msr","Read from a model-specific register."],["write_msr","Write to a model-specific register. This is unsafe, because writing to certain MSRs can compromise memory safety."]],"struct":[["CpuFlags","A wrapper for the `RFLAGS` register, providing a nice `Debug` implementation that details which flags are set and unset."]]});