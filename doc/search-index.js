var searchIndex={};
searchIndex["acpi"] = {"doc":"A library for parsing ACPI tables. This crate can be used…","i":[[3,"HpetInfo","acpi","Information about the High Precision Event Timer",null,null],[12,"event_timer_block_id","","",0,null],[12,"base_address","","",0,null],[12,"hpet_number","","",0,null],[12,"clock_tick_unit","","The minimum number of clock ticks that can be set without…",0,null],[12,"page_protection","","",0,null],[3,"PciConfigRegions","","Describes a set of regions of physical memory used to…",null,null],[3,"Processor","","",null,null],[12,"processor_uid","","",1,null],[12,"local_apic_id","","",1,null],[12,"state","","The state of this processor. Always check that the…",1,null],[12,"is_ap","","Whether this processor is the Bootstrap Processor (BSP),…",1,null],[3,"AmlTable","","",null,null],[12,"address","","Physical address of the start of the AML stream (excluding…",2,null],[12,"length","","Length (in bytes) of the AML stream.",2,null],[3,"Acpi","","",null,null],[12,"acpi_revision","","",3,null],[12,"boot_processor","","The boot processor. Until you bring up any APs, this is…",3,null],[12,"application_processors","","Application processes. These are not brought up until you…",3,null],[12,"interrupt_model","","ACPI theoretically allows for more than one interrupt…",3,null],[12,"hpet","","",3,null],[12,"dsdt","","Info about the DSDT, if we find it.",3,null],[12,"ssdts","","Info about any SSDTs, if there are any.",3,null],[12,"pci_config_regions","","Info about the PCI-E configuration memory regions,…",3,null],[4,"MadtError","","",null,null],[13,"UnexpectedEntry","","",4,null],[13,"InterruptOverrideEntryHasInvalidBus","","",4,null],[13,"InvalidLocalNmiLine","","",4,null],[13,"NoLocalNmiLineSpecified","","",4,null],[13,"MpsIntiInvalidPolarity","","",4,null],[13,"MpsIntiInvalidTriggerMode","","",4,null],[4,"AcpiError","","",null,null],[13,"RsdpIncorrectSignature","","",5,null],[13,"RsdpInvalidOemId","","",5,null],[13,"RsdpInvalidChecksum","","",5,null],[13,"NoValidRsdp","","",5,null],[13,"SdtInvalidSignature","","",5,null],[13,"SdtInvalidOemId","","",5,null],[13,"SdtInvalidTableId","","",5,null],[13,"SdtInvalidChecksum","","",5,null],[13,"InvalidMadt","","",5,null],[4,"ProcessorState","","",null,null],[13,"Disabled","","A processor in this state is unusable, and you must not…",6,null],[13,"WaitingForSipi","","A processor waiting for a SIPI (Startup Inter-processor…",6,null],[13,"Running","","A Running processor is currently brought up and running…",6,null],[5,"search_for_rsdp_bios","","This is the entry point of `acpi` if you have no…",null,[[],[["result",4],["acpierror",4],["acpi",3]]]],[5,"parse_rsdp","","This is the entry point of `acpi` if you have the physical…",null,[[],[["result",4],["acpierror",4],["acpi",3]]]],[5,"parse_rsdt","","This is the entry point of `acpi` if you already have the…",null,[[],[["result",4],["acpierror",4],["acpi",3]]]],[0,"handler","","",null,null],[3,"PhysicalMapping","acpi::handler","Describes a physical mapping created by…",null,null],[12,"physical_start","","",7,null],[12,"virtual_start","","",7,null],[12,"region_length","","",7,null],[12,"mapped_length","","",7,null],[8,"AcpiHandler","","An implementation of this trait must be provided to allow…",null,null],[10,"map_physical_region","","Given a starting physical address and a size, map a region…",8,[[],["physicalmapping",3]]],[10,"unmap_physical_region","","Unmap the given physical mapping. Safe because we consume…",8,[[["physicalmapping",3]]]],[0,"interrupt","acpi","",null,null],[3,"IoApic","acpi::interrupt","",null,null],[12,"id","","",9,null],[12,"address","","",9,null],[12,"global_system_interrupt_base","","",9,null],[3,"InterruptSourceOverride","","Describes a difference in the mapping of an ISA interrupt…",null,null],[12,"isa_source","","",10,null],[12,"global_system_interrupt","","",10,null],[12,"polarity","","",10,null],[12,"trigger_mode","","",10,null],[3,"NmiSource","","Describes a Global System Interrupt that should be enabled…",null,null],[12,"global_system_interrupt","","",11,null],[12,"polarity","","",11,null],[12,"trigger_mode","","",11,null],[3,"Apic","","",null,null],[12,"local_apic_address","","",12,null],[12,"io_apics","","",12,null],[12,"local_apic_nmi_line","","",12,null],[12,"interrupt_source_overrides","","",12,null],[12,"nmi_sources","","",12,null],[12,"also_has_legacy_pics","","If this field is set, you must remap and mask all the…",12,null],[4,"LocalInterruptLine","","",null,null],[13,"Lint0","","",13,null],[13,"Lint1","","",13,null],[4,"Polarity","","",null,null],[13,"SameAsBus","","",14,null],[13,"ActiveHigh","","",14,null],[13,"ActiveLow","","",14,null],[4,"TriggerMode","","",null,null],[13,"SameAsBus","","",15,null],[13,"Edge","","",15,null],[13,"Level","","",15,null],[4,"InterruptModel","","",null,null],[13,"Pic","","This model is only chosen when a newer one can not be…",16,null],[13,"Apic","","Describes an interrupt controller based around the…",16,null],[11,"physical_address","acpi","Get the physical address of the start of the configuration…",17,[[],["option",4]]],[11,"from","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"into","","",17,[[]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"from","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"from","acpi::handler","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","acpi::interrupt","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"into","","",11,[[]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"into","","",12,[[]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"into","","",13,[[]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"into","","",14,[[]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"into","","",15,[[]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"into","","",16,[[]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"deref","acpi::handler","",7,[[]]],[11,"fmt","acpi","",0,[[["formatter",3]],["result",6]]],[11,"fmt","acpi::interrupt","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","acpi","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"eq","","",6,[[["processorstate",4]]]],[11,"eq","","",1,[[["processor",3]]]],[11,"ne","","",1,[[["processor",3]]]],[11,"clone","","",6,[[],["processorstate",4]]],[11,"clone","","",1,[[],["processor",3]]]],"p":[[3,"HpetInfo"],[3,"Processor"],[3,"AmlTable"],[3,"Acpi"],[4,"MadtError"],[4,"AcpiError"],[4,"ProcessorState"],[3,"PhysicalMapping"],[8,"AcpiHandler"],[3,"IoApic"],[3,"InterruptSourceOverride"],[3,"NmiSource"],[3,"Apic"],[4,"LocalInterruptLine"],[4,"Polarity"],[4,"TriggerMode"],[4,"InterruptModel"],[3,"PciConfigRegions"]]};
searchIndex["aml"] = {"doc":"`aml` is a pure-Rust AML (ACPI Machine Language) parser,…","i":[[3,"AmlHandle","aml","A handle is used to refer to an AML value without actually…",null,null],[3,"AmlName","","",null,null],[3,"Namespace","","",null,null],[3,"AmlContext","","",null,null],[12,"namespace","","",0,null],[4,"AmlError","","",null,null],[13,"UnexpectedEndOfStream","","",1,null],[13,"UnexpectedByte","","",1,null],[13,"InvalidNameSeg","","",1,null],[13,"InvalidFieldFlags","","",1,null],[13,"IncompatibleValueConversion","","",1,null],[13,"UnterminatedStringConstant","","",1,null],[13,"InvalidStringConstant","","",1,null],[13,"InvalidRegionSpace","","",1,null],[13,"WrongParser","","Emitted by a parser when it's clear that the stream…",1,null],[13,"EmptyNamesAreInvalid","","",1,null],[13,"InvalidNormalizedName","","Produced when trying to normalize a path that does not…",1,null],[13,"RootHasNoParent","","",1,null],[13,"ObjectDoesNotExist","","Produced when a path is given that does not point to an…",1,null],[13,"HandleDoesNotExist","","",1,null],[13,"NameCollision","","Produced when two values with the same name are added to…",1,null],[13,"InvalidArgumentAccess","","Produced when a method accesses an argument it does not…",1,null],[13,"InvalidLocalAccess","","",1,null],[13,"Return","","This is not a real error, but is used to propagate return…",1,null],[13,"PrtInvalidAddress","","",1,null],[13,"PrtInvalidPin","","",1,null],[13,"PrtInvalidSource","","",1,null],[13,"PrtInvalidGsi","","",1,null],[13,"PrtNoEntry","","Produced when the PRT doesn't contain an entry for the…",1,null],[13,"ReservedResourceType","","",1,null],[13,"ResourceDescriptorTooShort","","",1,null],[11,"new","","",2,[[],["namespace",3]]],[11,"add","","Add a value to the namespace at the given path, which must…",2,[[["amlname",3],["amlvalue",4]],[["amlhandle",3],["result",4],["amlerror",4]]]],[11,"add_at_resolved_path","","Helper method for adding a value to the namespace at a…",2,[[["amlname",3],["amlname",3],["amlvalue",4]],[["amlhandle",3],["result",4],["amlerror",4]]]],[11,"get","","",2,[[["amlhandle",3]],[["result",4],["amlerror",4],["amlvalue",4]]]],[11,"get_by_path","","",2,[[["amlname",3]],[["result",4],["amlerror",4],["amlvalue",4]]]],[11,"get_mut","","",2,[[["amlhandle",3]],[["result",4],["amlvalue",4],["amlerror",4]]]],[11,"get_by_path_mut","","",2,[[["amlname",3]],[["result",4],["amlvalue",4],["amlerror",4]]]],[11,"search","","Search for an object at the given path of the namespace,…",2,[[["amlname",3]],[["result",4],["amlerror",4]]]],[11,"root","","",3,[[],["amlname",3]]],[11,"from_name_seg","","",3,[[["nameseg",3]],["amlname",3]]],[11,"from_str","","Convert a string representation of an AML name into an…",3,[[],[["result",4],["amlname",3],["amlerror",4]]]],[11,"as_string","","",3,[[],["string",3]]],[11,"is_normal","","An AML path is normal if it does not contain any prefix…",3,[[]]],[11,"is_absolute","","",3,[[]]],[11,"search_rules_apply","","Special rules apply when searching for certain paths…",3,[[]]],[11,"normalize","","Normalize an AML path, resolving prefix chars. Returns…",3,[[],[["result",4],["amlname",3],["amlerror",4]]]],[11,"parent","","Get the parent of this `AmlName`. For example, the parent…",3,[[],[["result",4],["amlname",3],["amlerror",4]]]],[11,"resolve","","Resolve this path against a given scope, making it…",3,[[["amlname",3]],[["result",4],["amlname",3],["amlerror",4]]]],[0,"pci_routing","","",null,null],[3,"PciRoute","aml::pci_routing","",null,null],[3,"PciRoutingTable","","A `PciRoutingTable` is used to interpret the data in a…",null,null],[4,"Pin","","",null,null],[13,"IntA","","",4,null],[13,"IntB","","",4,null],[13,"IntC","","",4,null],[13,"IntD","","",4,null],[4,"PciRouteType","","",null,null],[13,"Gsi","","The interrupt is hard-coded to a specific GSI",5,null],[13,"LinkObject","","The interrupt is linked to a link object. This object will…",5,null],[11,"from_prt_path","","Construct a `PciRoutingTable` from a path to a `_PRT`…",6,[[["amlname",3],["amlcontext",3]],[["result",4],["pciroutingtable",3],["amlerror",4]]]],[11,"route","","Get the interrupt input that a given PCI interrupt pin is…",6,[[["pin",4],["amlcontext",3]],[["result",4],["irqdescriptor",3],["amlerror",4]]]],[0,"resource","aml","",null,null],[3,"IrqDescriptor","aml::resource","",null,null],[12,"is_consumer","","",7,null],[12,"trigger","","",7,null],[12,"polarity","","",7,null],[12,"is_shared","","",7,null],[12,"is_wake_capable","","",7,null],[12,"irq","","",7,null],[4,"Resource","","",null,null],[13,"Irq","","",8,null],[4,"InterruptTrigger","","",null,null],[13,"Edge","","",9,null],[13,"Level","","",9,null],[4,"InterruptPolarity","","",null,null],[13,"ActiveHigh","","",10,null],[13,"ActiveLow","","",10,null],[0,"value","aml","",null,null],[3,"FieldFlags","aml::value","",null,null],[3,"MethodFlags","","",null,null],[3,"Args","","A control method can take up to 7 arguments, each of which…",null,null],[12,"arg_0","","",11,null],[12,"arg_1","","",11,null],[12,"arg_2","","",11,null],[12,"arg_3","","",11,null],[12,"arg_4","","",11,null],[12,"arg_5","","",11,null],[12,"arg_6","","",11,null],[4,"RegionSpace","","",null,null],[13,"SystemMemory","","",12,null],[13,"SystemIo","","",12,null],[13,"PciConfig","","",12,null],[13,"EmbeddedControl","","",12,null],[13,"SMBus","","",12,null],[13,"SystemCmos","","",12,null],[13,"PciBarTarget","","",12,null],[13,"IPMI","","",12,null],[13,"GeneralPurposeIo","","",12,null],[13,"GenericSerialBus","","",12,null],[13,"OemDefined","","",12,null],[4,"FieldAccessType","","",null,null],[13,"Any","","",13,null],[13,"Byte","","",13,null],[13,"Word","","",13,null],[13,"DWord","","",13,null],[13,"QWord","","",13,null],[13,"Buffer","","",13,null],[13,"Reserved","","",13,null],[4,"FieldUpdateRule","","",null,null],[13,"Preserve","","",14,null],[13,"WriteAsOnes","","",14,null],[13,"WriteAsZeros","","",14,null],[4,"AmlType","","",null,null],[13,"Uninitialized","","",15,null],[13,"Buffer","","",15,null],[13,"BufferField","","",15,null],[13,"DdbHandle","","Handle to a definition block handle. Returned by the…",15,null],[13,"DebugObject","","",15,null],[13,"Device","","",15,null],[13,"Event","","",15,null],[13,"FieldUnit","","",15,null],[13,"Integer","","",15,null],[13,"Method","","",15,null],[13,"Mutex","","",15,null],[13,"ObjReference","","",15,null],[13,"OpRegion","","",15,null],[13,"Package","","",15,null],[13,"PowerResource","","",15,null],[13,"Processor","","",15,null],[13,"RawDataBuffer","","",15,null],[13,"String","","",15,null],[13,"ThermalZone","","",15,null],[4,"AmlValue","","",null,null],[13,"Boolean","","",16,null],[13,"Integer","","",16,null],[13,"String","","",16,null],[13,"Name","","",16,null],[13,"OpRegion","","",16,null],[12,"region","aml::value::AmlValue","",17,null],[12,"offset","","",17,null],[12,"length","","",17,null],[13,"Field","aml::value","",16,null],[12,"region","aml::value::AmlValue","",18,null],[12,"flags","","",18,null],[12,"offset","","",18,null],[12,"length","","",18,null],[13,"Device","aml::value","",16,null],[13,"Method","","",16,null],[12,"flags","aml::value::AmlValue","",19,null],[12,"code","","",19,null],[13,"Buffer","aml::value","",16,null],[12,"bytes","aml::value::AmlValue","",20,null],[12,"size","","",20,null],[13,"Processor","aml::value","",16,null],[12,"id","aml::value::AmlValue","",21,null],[12,"pblk_address","","",21,null],[12,"pblk_len","","",21,null],[13,"Mutex","aml::value","",16,null],[12,"sync_level","aml::value::AmlValue","",22,null],[13,"Package","aml::value","",16,null],[11,"new","","",23,[[],["fieldflags",3]]],[11,"access_type","","",23,[[],[["result",4],["fieldaccesstype",4],["amlerror",4]]]],[11,"lock_rule","","",23,[[]]],[11,"field_update_rule","","",23,[[],[["fieldupdaterule",4],["result",4],["amlerror",4]]]],[11,"new","","",24,[[],["methodflags",3]]],[11,"arg_count","","",24,[[]]],[11,"serialize","","",24,[[]]],[11,"sync_level","","",24,[[]]],[11,"type_of","","Returns the AML type of this value. For `Name`, this…",16,[[],["amltype",4]]],[11,"as_bool","","",16,[[],[["result",4],["amlerror",4]]]],[11,"as_integer","","",16,[[],[["result",4],["amlerror",4]]]],[11,"as_type","","Convert this value to a value of the same data, but with…",16,[[["amltype",4]],[["amlvalue",4],["amlerror",4],["result",4]]]],[11,"arg","","Get an argument by its `ArgNum`.",11,[[],[["result",4],["amlerror",4],["amlvalue",4]]]],[17,"AML_INTERPRETER_REVISION","aml","AML has a `RevisionOp` operator that returns the \"AML…",null,null],[11,"new","","",0,[[],["amlcontext",3]]],[11,"parse_table","","",0,[[],[["result",4],["amlerror",4]]]],[11,"invoke_method","","Invoke a method referred to by its path in the namespace,…",0,[[["amlname",3],["args",3]],[["amlvalue",4],["amlerror",4],["result",4]]]],[14,"choice","","Takes a number of parsers, and tries to apply each one to…",null,null],[14,"make_parser_concrete","","This encapsulates an unfortunate hack we sometimes need to…",null,null],[14,"try_with_context","","Helper macro for use within `map_with_context` as an…",null,null],[11,"from","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"into","","",25,[[]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"from","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"from","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"from","aml::pci_routing","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"into","","",26,[[]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"from","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","aml::resource","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","aml::value","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"into","","",23,[[]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"from","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"into","","",24,[[]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"from","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"into","","",11,[[]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"from","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"into","","",12,[[]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"from","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"into","","",13,[[]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"from","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"into","","",14,[[]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"from","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"into","","",15,[[]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"from","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"into","","",16,[[]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"fmt","aml","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","aml::pci_routing","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","aml::resource","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","aml::value","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","aml","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"eq","","",25,[[["amlhandle",3]]]],[11,"ne","","",25,[[["amlhandle",3]]]],[11,"eq","","",3,[[["amlname",3]]]],[11,"ne","","",3,[[["amlname",3]]]],[11,"eq","aml::pci_routing","",4,[[["pin",4]]]],[11,"eq","aml::value","",12,[[["regionspace",4]]]],[11,"ne","","",12,[[["regionspace",4]]]],[11,"eq","","",13,[[["fieldaccesstype",4]]]],[11,"eq","","",14,[[["fieldupdaterule",4]]]],[11,"eq","","",23,[[["fieldflags",3]]]],[11,"ne","","",23,[[["fieldflags",3]]]],[11,"eq","","",24,[[["methodflags",3]]]],[11,"ne","","",24,[[["methodflags",3]]]],[11,"eq","","",15,[[["amltype",4]]]],[11,"eq","","",16,[[["amlvalue",4]]]],[11,"ne","","",16,[[["amlvalue",4]]]],[11,"eq","aml","",1,[[["amlerror",4]]]],[11,"ne","","",1,[[["amlerror",4]]]],[11,"cmp","","",25,[[["amlhandle",3]],["ordering",4]]],[11,"cmp","","",3,[[["amlname",3]],["ordering",4]]],[11,"partial_cmp","","",25,[[["amlhandle",3]],[["ordering",4],["option",4]]]],[11,"lt","","",25,[[["amlhandle",3]]]],[11,"le","","",25,[[["amlhandle",3]]]],[11,"gt","","",25,[[["amlhandle",3]]]],[11,"ge","","",25,[[["amlhandle",3]]]],[11,"partial_cmp","","",3,[[["amlname",3]],[["ordering",4],["option",4]]]],[11,"lt","","",3,[[["amlname",3]]]],[11,"le","","",3,[[["amlname",3]]]],[11,"gt","","",3,[[["amlname",3]]]],[11,"ge","","",3,[[["amlname",3]]]],[11,"clone","","",25,[[],["amlhandle",3]]],[11,"clone","","",3,[[],["amlname",3]]],[11,"clone","aml::pci_routing","",4,[[],["pin",4]]],[11,"clone","aml::value","",12,[[],["regionspace",4]]],[11,"clone","","",13,[[],["fieldaccesstype",4]]],[11,"clone","","",14,[[],["fieldupdaterule",4]]],[11,"clone","","",23,[[],["fieldflags",3]]],[11,"clone","","",24,[[],["methodflags",3]]],[11,"clone","","",15,[[],["amltype",4]]],[11,"clone","","",16,[[],["amlvalue",4]]],[11,"clone","","",11,[[],["args",3]]],[11,"clone","aml","",1,[[],["amlerror",4]]],[11,"default","aml::value","",11,[[],["args",3]]]],"p":[[3,"AmlContext"],[4,"AmlError"],[3,"Namespace"],[3,"AmlName"],[4,"Pin"],[4,"PciRouteType"],[3,"PciRoutingTable"],[3,"IrqDescriptor"],[4,"Resource"],[4,"InterruptTrigger"],[4,"InterruptPolarity"],[3,"Args"],[4,"RegionSpace"],[4,"FieldAccessType"],[4,"FieldUpdateRule"],[4,"AmlType"],[4,"AmlValue"],[13,"OpRegion"],[13,"Field"],[13,"Method"],[13,"Buffer"],[13,"Processor"],[13,"Mutex"],[3,"FieldFlags"],[3,"MethodFlags"],[3,"AmlHandle"],[3,"PciRoute"]]};
searchIndex["bit_field"] = {"doc":"Provides the abstraction of a bit field, which allows for…","i":[[8,"BitField","bit_field","A generic trait which provides methods for extracting and…",null,null],[10,"bit_length","","Returns the length, eg number of bits, in this bit field.",0,[[]]],[10,"get_bit","","Obtains the bit at the index `bit`; note that index 0 is…",0,[[]]],[10,"get_bits","","Obtains the range of bits specified by `range`; note that…",0,[[["range",3]]]],[10,"set_bit","","Sets the bit at the index `bit` to the value `value`…",0,[[]]],[10,"set_bits","","Sets the range of bits defined by the range `range` to the…",0,[[["range",3]]]],[8,"BitArray","","",null,null],[10,"bit_length","","Returns the length, eg number of bits, in this bit array.",1,[[]]],[10,"get_bit","","Obtains the bit at the index `bit`; note that index 0 is…",1,[[]]],[10,"get_bits","","Obtains the range of bits specified by `range`; note that…",1,[[["range",3]]]],[10,"set_bit","","Sets the bit at the index `bit` to the value `value`…",1,[[]]],[10,"set_bits","","Sets the range of bits defined by the range `range` to the…",1,[[["range",3]]]]],"p":[[8,"BitField"],[8,"BitArray"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator useful for sets of…","i":[[14,"bitflags","bitflags","The macro used to generate the flag structure.",null,null]],"p":[]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and…","i":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"BE","","A type alias for [`BigEndian`].",null,null],[6,"LE","","A type alias for [`LittleEndian`].",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ByteOrder","","`ByteOrder` describes types that can serialize integers as…",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",0,[[]]],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",0,[[]]],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",0,[[]]],[11,"read_u48","","Reads an unsigned 48 bit integer from `buf`, stored in u64.",0,[[]]],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",0,[[]]],[10,"read_u128","","Reads an unsigned 128 bit integer from `buf`.",0,[[]]],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",0,[[]]],[10,"read_uint128","","Reads an unsigned n-bytes integer from `buf`.",0,[[]]],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",0,[[]]],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in…",0,[[]]],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",0,[[]]],[11,"write_u48","","Writes an unsigned 48 bit integer `n` to `buf`, stored in…",0,[[]]],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",0,[[]]],[10,"write_u128","","Writes an unsigned 128 bit integer `n` to `buf`.",0,[[]]],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",0,[[]]],[10,"write_uint128","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",0,[[]]],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",0,[[]]],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",0,[[]]],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",0,[[]]],[11,"read_i48","","Reads a signed 48 bit integer from `buf`, stored in i64.",0,[[]]],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",0,[[]]],[11,"read_i128","","Reads a signed 128 bit integer from `buf`.",0,[[]]],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",0,[[]]],[11,"read_int128","","Reads a signed n-bytes integer from `buf`.",0,[[]]],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point…",0,[[]]],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point…",0,[[]]],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",0,[[]]],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",0,[[]]],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",0,[[]]],[11,"write_i48","","Writes a signed 48 bit integer `n` to `buf`, stored in i64.",0,[[]]],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",0,[[]]],[11,"write_i128","","Writes a signed 128 bit integer `n` to `buf`.",0,[[]]],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",0,[[]]],[11,"write_int128","","Writes a signed integer `n` to `buf` using only `nbytes`.",0,[[]]],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point…",0,[[]]],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point…",0,[[]]],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",0,[[]]],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",0,[[]]],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",0,[[]]],[10,"read_u128_into","","Reads unsigned 128 bit integers from `src` into `dst`.",0,[[]]],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",0,[[]]],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",0,[[]]],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",0,[[]]],[11,"read_i128_into","","Reads signed 128 bit integers from `src` into `dst`.",0,[[]]],[11,"read_f32_into","","Reads IEEE754 single-precision (4 bytes) floating point…",0,[[]]],[11,"read_f32_into_unchecked","","DEPRECATED.",0,[[]]],[11,"read_f64_into","","Reads IEEE754 single-precision (4 bytes) floating point…",0,[[]]],[11,"read_f64_into_unchecked","","DEPRECATED.",0,[[]]],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",0,[[]]],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",0,[[]]],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",0,[[]]],[10,"write_u128_into","","Writes unsigned 128 bit integers from `src` into `dst`.",0,[[]]],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",0,[[]]],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",0,[[]]],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",0,[[]]],[11,"write_i128_into","","Writes signed 128 bit integers from `src` into `dst`.",0,[[]]],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point…",0,[[]]],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point…",0,[[]]],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a…",0,[[]]],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a…",0,[[]]],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a…",0,[[]]],[10,"from_slice_u128","","Converts the given slice of unsigned 128 bit integers to a…",0,[[]]],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a…",0,[[]]],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a…",0,[[]]],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a…",0,[[]]],[11,"from_slice_i128","","Converts the given slice of signed 128 bit integers to a…",0,[[]]],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4…",0,[[]]],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8…",0,[[]]],[11,"from","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"read_u16","","",1,[[]]],[11,"read_u32","","",1,[[]]],[11,"read_u64","","",1,[[]]],[11,"read_u128","","",1,[[]]],[11,"read_uint","","",1,[[]]],[11,"read_uint128","","",1,[[]]],[11,"write_u16","","",1,[[]]],[11,"write_u32","","",1,[[]]],[11,"write_u64","","",1,[[]]],[11,"write_u128","","",1,[[]]],[11,"write_uint","","",1,[[]]],[11,"write_uint128","","",1,[[]]],[11,"read_u16_into","","",1,[[]]],[11,"read_u32_into","","",1,[[]]],[11,"read_u64_into","","",1,[[]]],[11,"read_u128_into","","",1,[[]]],[11,"write_u16_into","","",1,[[]]],[11,"write_u32_into","","",1,[[]]],[11,"write_u64_into","","",1,[[]]],[11,"write_u128_into","","",1,[[]]],[11,"from_slice_u16","","",1,[[]]],[11,"from_slice_u32","","",1,[[]]],[11,"from_slice_u64","","",1,[[]]],[11,"from_slice_u128","","",1,[[]]],[11,"from_slice_f32","","",1,[[]]],[11,"from_slice_f64","","",1,[[]]],[11,"read_u16","","",2,[[]]],[11,"read_u32","","",2,[[]]],[11,"read_u64","","",2,[[]]],[11,"read_u128","","",2,[[]]],[11,"read_uint","","",2,[[]]],[11,"read_uint128","","",2,[[]]],[11,"write_u16","","",2,[[]]],[11,"write_u32","","",2,[[]]],[11,"write_u64","","",2,[[]]],[11,"write_u128","","",2,[[]]],[11,"write_uint","","",2,[[]]],[11,"write_uint128","","",2,[[]]],[11,"read_u16_into","","",2,[[]]],[11,"read_u32_into","","",2,[[]]],[11,"read_u64_into","","",2,[[]]],[11,"read_u128_into","","",2,[[]]],[11,"write_u16_into","","",2,[[]]],[11,"write_u32_into","","",2,[[]]],[11,"write_u64_into","","",2,[[]]],[11,"write_u128_into","","",2,[[]]],[11,"from_slice_u16","","",2,[[]]],[11,"from_slice_u32","","",2,[[]]],[11,"from_slice_u64","","",2,[[]]],[11,"from_slice_u128","","",2,[[]]],[11,"from_slice_f32","","",2,[[]]],[11,"from_slice_f64","","",2,[[]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"eq","","",1,[[["bigendian",4]]]],[11,"eq","","",2,[[["littleendian",4]]]],[11,"cmp","","",1,[[["bigendian",4]],["ordering",4]]],[11,"cmp","","",2,[[["littleendian",4]],["ordering",4]]],[11,"partial_cmp","","",1,[[["bigendian",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",2,[[["littleendian",4]],[["ordering",4],["option",4]]]],[11,"hash","","",1,[[]]],[11,"hash","","",2,[[]]],[11,"clone","","",1,[[],["bigendian",4]]],[11,"clone","","",2,[[],["littleendian",4]]],[11,"default","","",1,[[],["bigendian",4]]],[11,"default","","",2,[[],["littleendian",4]]]],"p":[[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["cfg_if"] = {"doc":"A macro for defining `#[cfg]` if-else statements.","i":[[14,"cfg_if","cfg_if","",null,null]],"p":[]};
searchIndex["hal"] = {"doc":"","i":[[0,"boot_info","hal","",null,null],[3,"BootInfo","hal::boot_info","",null,null],[12,"magic","","",0,null],[12,"memory_map","","Map of available memory that the kernel. This only…",0,null],[12,"loaded_images","","",0,null],[12,"video_mode","","",0,null],[12,"heap_address","","",0,null],[12,"heap_size","","",0,null],[12,"rsdp_address","","The physical address of the RSDP, the first ACPI table.",0,null],[3,"MemoryMap","","",null,null],[12,"num_entries","","",1,null],[12,"entries","","",1,null],[3,"MemoryMapEntry","","",null,null],[12,"start","","",2,null],[12,"size","","",2,null],[12,"memory_type","","",2,null],[3,"LoadedImages","","",null,null],[12,"num_images","","",3,null],[12,"images","","",3,null],[3,"LoadedImage","","Describes an image loaded from the filesystem by the…",null,null],[12,"name_length","","",4,null],[12,"name","","The bytes of the image's name, encoded as UTF-8. Not…",4,null],[12,"num_segments","","",4,null],[12,"segments","","",4,null],[12,"entry_point","","The virtual address at which to start executing the image.",4,null],[12,"capability_stream","","",4,null],[3,"Segment","","",null,null],[12,"physical_address","","",5,null],[12,"virtual_address","","",5,null],[12,"size","","In bytes.",5,null],[12,"flags","","",5,null],[3,"VideoModeInfo","","",null,null],[12,"framebuffer_address","","",6,null],[12,"pixel_format","","",6,null],[12,"width","","",6,null],[12,"height","","",6,null],[12,"stride","","The number of pixels in each scan-line. May be greater…",6,null],[4,"MemoryType","","",null,null],[13,"Conventional","","Memory that can be used freely by the OS.",7,null],[13,"AcpiReclaimable","","Memory that contains ACPI tables. After the OS has…",7,null],[13,"LoadedImage","","Memory occupied by images that the loader has been asked…",7,null],[13,"KernelPageTables","","Memory that is occupied by page tables created by the…",7,null],[13,"KernelHeap","","Memory that has been mapped for the kernel heap.",7,null],[13,"BootInfo","","Memory that is occupied by the boot info constructed by…",7,null],[4,"PixelFormat","","",null,null],[13,"RGB32","","Each pixel is represented by 4 bytes, with the layout:…",8,null],[13,"BGR32","","Each pixel is represented by 4 bytes, with the layout:…",8,null],[17,"BOOT_INFO_MAGIC","","",null,null],[17,"MAX_MEMORY_MAP_ENTRIES","","",null,null],[17,"MAX_LOADED_IMAGES","","",null,null],[17,"MAX_IMAGE_NAME_LENGTH","","This is one less than a power-of-two, because then it's…",null,null],[17,"MAX_IMAGE_LOADED_SEGMENTS","","",null,null],[17,"MAX_CAPABILITY_STREAM_LENGTH","","",null,null],[11,"add_entry","","",1,[[["memorymapentry",3]],["result",4]]],[11,"entries","","",1,[[]]],[11,"address_range","","",2,[[],[["range",3],["physicaladdress",3]]]],[11,"frame_range","","",2,[[],[["frame",3],["range",3]]]],[11,"images","","",3,[[]]],[11,"add_image","","",3,[[["loadedimage",3]],["result",4]]],[11,"add_segment","","",4,[[["segment",3]],["result",4]]],[11,"name","","",4,[[]]],[11,"segments","","",4,[[]]],[0,"memory","hal","The HAL memory API tries to model an abstract version of a…",null,null],[3,"Frame","hal::memory","",null,null],[12,"start","","",9,null],[3,"Page","","",null,null],[12,"start","","",10,null],[3,"Flags","","",null,null],[12,"writable","","",11,null],[12,"executable","","",11,null],[12,"user_accessible","","",11,null],[12,"cached","","",11,null],[3,"PhysicalAddress","","Represents a physical address. If the target architecture…",null,null],[3,"VirtualAddress","","Represents a virtual address. On architectures that have…",null,null],[4,"MapperError","","",null,null],[13,"AlreadyMapped","","The virtual memory that is being mapped is already mapped…",12,null],[4,"Size4KiB","","",null,null],[4,"Size2MiB","","",null,null],[4,"Size1GiB","","",null,null],[11,"starts_with","","",9,[[["physicaladdress",3]],["frame",3]]],[11,"contains","","",9,[[["physicaladdress",3]],["frame",3]]],[11,"starts_with","","",10,[[["virtualaddress",3]],["page",3]]],[11,"contains","","",10,[[["virtualaddress",3]],["page",3]]],[11,"new","","On x86_64, physical addresses must be less than 2^52.",13,[[],[["option",4],["physicaladdress",3]]]],[11,"align_down","","Align this address to the given alignment, moving…",13,[[],["physicaladdress",3]]],[11,"align_up","","",13,[[],["physicaladdress",3]]],[11,"is_aligned","","",13,[[]]],[11,"new","","Construct a new `VirtualAddress`. This will canonicalise…",14,[[],["virtualaddress",3]]],[11,"ptr","","",14,[[]]],[11,"mut_ptr","","",14,[[]]],[11,"canonicalise","","Canonicalise this virtual address. On x86_64, that…",14,[[],["virtualaddress",3]]],[11,"align_down","","Align this address to the given alignment, moving…",14,[[],["virtualaddress",3]]],[11,"align_up","","Align this address to the given alignment, moving upwards…",14,[[],["virtualaddress",3]]],[11,"is_aligned","","",14,[[]]],[17,"KIBIBYTES_TO_BYTES","","Multiply by this to turn KiB into bytes",null,null],[17,"MEBIBYTES_TO_BYTES","","Multiply by this to turn MiB into bytes",null,null],[17,"GIBIBYTES_TO_BYTES","","Multiply by this to turn GiB into bytes",null,null],[8,"Mapper","","A `Mapper` allows the manipulation of a set of page-tables.",null,null],[10,"translate","","Get the physical address that a given virtual address is…",15,[[["virtualaddress",3]],[["option",4],["physicaladdress",3]]]],[10,"map","","Map a `Page` to a `Frame` with the given flags.",15,[[["flags",3],["page",3],["frame",3]],[["result",4],["mappererror",4]]]],[11,"map_range","","Map each `Page` in a range to a corresponding `Frame` with…",15,[[["range",3],["frame",3],["flags",3],["range",3],["page",3]],[["result",4],["mappererror",4]]]],[10,"map_area","","Map an area of `size` bytes starting at the given address…",15,[[["virtualaddress",3],["physicaladdress",3],["flags",3]],[["result",4],["mappererror",4]]]],[10,"unmap","","",15,[[["page",3]],[["option",4],["frame",3]]]],[8,"FrameSize","","This trait is implemented by a number of marker types, one…",null,null],[18,"SIZE","","Frame size in bytes",16,null],[11,"frames_needed","","",16,[[]]],[8,"FrameAllocator","","`FrameAllocator` is used to interact with a physical…",null,null],[11,"allocate","","Allocate a `Frame`.",17,[[],["frame",3]]],[10,"allocate_n","","Allocate `n` contiguous `Frame`s.",17,[[],[["range",3],["frame",3]]]],[10,"free_n","","Free `n` frames that were previously allocated by this…",17,[[["frame",3]]]],[14,"frame_size","hal","",null,null],[11,"from","hal::boot_info","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","hal::memory","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"into","","",11,[[]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"into","","",13,[[]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"into","","",14,[[]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"into","","",12,[[]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"into","","",18,[[]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"into","","",19,[[]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"into","","",20,[[]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",14,[[],["virtualaddress",3]]],[11,"from","","",14,[[],["virtualaddress",3]]],[11,"fmt","hal::boot_info","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","hal::memory","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"sub","","",13,[[]]],[11,"sub","","",14,[[]]],[11,"eq","hal::boot_info","",7,[[["memorytype",4]]]],[11,"eq","hal::memory","",9,[[["frame",3]]]],[11,"ne","","",9,[[["frame",3]]]],[11,"eq","","",10,[[["page",3]]]],[11,"ne","","",10,[[["page",3]]]],[11,"eq","","",11,[[["flags",3]]]],[11,"ne","","",11,[[["flags",3]]]],[11,"eq","","",13,[[["physicaladdress",3]]]],[11,"ne","","",13,[[["physicaladdress",3]]]],[11,"eq","","",14,[[["virtualaddress",3]]]],[11,"ne","","",14,[[["virtualaddress",3]]]],[11,"eq","","",18,[[["size4kib",4]]]],[11,"eq","","",19,[[["size2mib",4]]]],[11,"eq","","",20,[[["size1gib",4]]]],[11,"cmp","","",9,[[["frame",3]],["ordering",4]]],[11,"cmp","","",10,[[["page",3]],["ordering",4]]],[11,"cmp","","",13,[[["physicaladdress",3]],["ordering",4]]],[11,"cmp","","",14,[[["virtualaddress",3]],["ordering",4]]],[11,"cmp","","",18,[[["size4kib",4]],["ordering",4]]],[11,"cmp","","",19,[[["size2mib",4]],["ordering",4]]],[11,"cmp","","",20,[[["size1gib",4]],["ordering",4]]],[11,"partial_cmp","","",9,[[["frame",3]],[["ordering",4],["option",4]]]],[11,"lt","","",9,[[["frame",3]]]],[11,"le","","",9,[[["frame",3]]]],[11,"gt","","",9,[[["frame",3]]]],[11,"ge","","",9,[[["frame",3]]]],[11,"partial_cmp","","",10,[[["page",3]],[["ordering",4],["option",4]]]],[11,"lt","","",10,[[["page",3]]]],[11,"le","","",10,[[["page",3]]]],[11,"gt","","",10,[[["page",3]]]],[11,"ge","","",10,[[["page",3]]]],[11,"partial_cmp","","",13,[[["physicaladdress",3]],[["ordering",4],["option",4]]]],[11,"lt","","",13,[[["physicaladdress",3]]]],[11,"le","","",13,[[["physicaladdress",3]]]],[11,"gt","","",13,[[["physicaladdress",3]]]],[11,"ge","","",13,[[["physicaladdress",3]]]],[11,"partial_cmp","","",14,[[["virtualaddress",3]],[["ordering",4],["option",4]]]],[11,"lt","","",14,[[["virtualaddress",3]]]],[11,"le","","",14,[[["virtualaddress",3]]]],[11,"gt","","",14,[[["virtualaddress",3]]]],[11,"ge","","",14,[[["virtualaddress",3]]]],[11,"partial_cmp","","",18,[[["size4kib",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",19,[[["size2mib",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",20,[[["size1gib",4]],[["ordering",4],["option",4]]]],[11,"add","","",9,[[]]],[11,"add","","",10,[[]]],[11,"add","","",13,[[]]],[11,"add","","",14,[[]]],[11,"add_assign","","",9,[[]]],[11,"add_assign","","",10,[[]]],[11,"add_assign","","",13,[[]]],[11,"add_assign","","",14,[[]]],[11,"sub_assign","","",13,[[]]],[11,"sub_assign","","",14,[[]]],[11,"steps_between","","",9,[[],["option",4]]],[11,"replace_one","","",9,[[]]],[11,"replace_zero","","",9,[[]]],[11,"add_one","","",9,[[]]],[11,"sub_one","","",9,[[]]],[11,"add_usize","","",9,[[],["option",4]]],[11,"steps_between","","",10,[[],["option",4]]],[11,"replace_one","","",10,[[]]],[11,"replace_zero","","",10,[[]]],[11,"add_one","","",10,[[]]],[11,"sub_one","","",10,[[]]],[11,"add_usize","","",10,[[],["option",4]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"clone","hal::boot_info","",1,[[],["memorymap",3]]],[11,"clone","","",7,[[],["memorytype",4]]],[11,"clone","","",2,[[],["memorymapentry",3]]],[11,"clone","","",4,[[],["loadedimage",3]]],[11,"clone","","",5,[[],["segment",3]]],[11,"clone","","",6,[[],["videomodeinfo",3]]],[11,"clone","","",8,[[],["pixelformat",4]]],[11,"clone","hal::memory","",9,[[],["frame",3]]],[11,"clone","","",10,[[],["page",3]]],[11,"clone","","",11,[[],["flags",3]]],[11,"clone","","",13,[[],["physicaladdress",3]]],[11,"clone","","",14,[[],["virtualaddress",3]]],[11,"clone","","",18,[[],["size4kib",4]]],[11,"clone","","",19,[[],["size2mib",4]]],[11,"clone","","",20,[[],["size1gib",4]]],[11,"default","hal::boot_info","",0,[[],["bootinfo",3]]],[11,"default","","",1,[[]]],[11,"default","","",2,[[]]],[11,"default","","",3,[[]]],[11,"default","","",4,[[],["loadedimage",3]]],[11,"default","","",5,[[],["segment",3]]],[11,"default","hal::memory","",11,[[]]],[11,"default","","",13,[[],["physicaladdress",3]]],[11,"default","","",14,[[],["virtualaddress",3]]],[11,"map_range","","Map each `Page` in a range to a corresponding `Frame` with…",15,[[["range",3],["frame",3],["flags",3],["range",3],["page",3]],[["result",4],["mappererror",4]]]]],"p":[[3,"BootInfo"],[3,"MemoryMap"],[3,"MemoryMapEntry"],[3,"LoadedImages"],[3,"LoadedImage"],[3,"Segment"],[3,"VideoModeInfo"],[4,"MemoryType"],[4,"PixelFormat"],[3,"Frame"],[3,"Page"],[3,"Flags"],[4,"MapperError"],[3,"PhysicalAddress"],[3,"VirtualAddress"],[8,"Mapper"],[8,"FrameSize"],[8,"FrameAllocator"],[4,"Size4KiB"],[4,"Size2MiB"],[4,"Size1GiB"]]};
searchIndex["hal_x86_64"] = {"doc":"","i":[[0,"hw","hal_x86_64","",null,null],[3,"DescriptorTablePointer","hal_x86_64::hw","",null,null],[12,"limit","","`base + limit` is the last addressable byte of the…",0,null],[12,"base","","Virtual address of the start of the descriptor table.",0,null],[0,"cpu","","",null,null],[3,"SupportedFeatures","hal_x86_64::hw::cpu","",null,null],[12,"xsave","","",1,null],[3,"CpuInfo","","Describes information we know about the system we're…",null,null],[12,"max_supported_standard_level","","",2,null],[12,"vendor","","",2,null],[12,"model_info","","",2,null],[12,"supported_features","","",2,null],[12,"hypervisor_info","","Information about the hypervisor we're running under, if…",2,null],[3,"ModelInfo","","",null,null],[12,"family","","",3,null],[12,"model","","",3,null],[12,"stepping","","",3,null],[12,"extended_family","","",3,null],[12,"extended_model","","",3,null],[3,"HypervisorInfo","","",null,null],[12,"vendor","","",4,null],[12,"max_leaf","","",4,null],[12,"apic_frequency","","",4,null],[4,"Vendor","","",null,null],[13,"Unknown","","",5,null],[13,"Intel","","",5,null],[13,"Amd","","",5,null],[4,"Microarch","","Intel and AMD microarchitectures we can expect processors…",null,null],[13,"Nehalem","","",6,null],[13,"Westmere","","",6,null],[13,"SandyBridge","","",6,null],[13,"IvyBridge","","",6,null],[13,"Haswell","","",6,null],[13,"Broadwell","","",6,null],[13,"Skylake","","",6,null],[13,"KabyLake","","",6,null],[13,"CoffeeLake","","",6,null],[13,"CannonLake","","",6,null],[13,"WhiskeyLake","","",6,null],[13,"AmberLake","","",6,null],[13,"Bulldozer","","",6,null],[13,"Jaguar","","",6,null],[13,"Zen","","",6,null],[4,"HypervisorVendor","","",null,null],[13,"Unknown","","",7,null],[13,"Kvm","","",7,null],[11,"new","","",2,[[],["cpuinfo",3]]],[11,"microarch","","",2,[[],[["option",4],["microarch",4]]]],[11,"apic_frequency","","Get the frequency the APIC runs at (in Hz), if we can…",2,[[],["option",4]]],[0,"gdt","hal_x86_64::hw","",null,null],[3,"SegmentSelector","hal_x86_64::hw::gdt","An index into the GDT, specifying a particular segment.…",null,null],[12,"0","","",8,null],[3,"CodeSegment","","",null,null],[3,"DataSegment","","",null,null],[3,"TssSegment","","",null,null],[3,"Gdt","","A GDT suitable for the kernel to use. The order of the…",null,null],[4,"PrivilegeLevel","","",null,null],[13,"Ring0","","",9,null],[13,"Ring1","","",9,null],[13,"Ring2","","",9,null],[13,"Ring3","","",9,null],[17,"KERNEL_CODE_SELECTOR","","",null,null],[17,"KERNEL_DATA_SELECTOR","","",null,null],[17,"USER_COMPAT_CODE_SELECTOR","","",null,null],[17,"USER_DATA_SELECTOR","","",null,null],[17,"USER_CODE64_SELECTOR","","",null,null],[17,"NUM_STATIC_ENTRIES","","",null,null],[17,"OFFSET_TO_FIRST_TSS","","",null,null],[17,"MAX_CPUS","","",null,null],[11,"new","","",8,[[["privilegelevel",4]],["segmentselector",3]]],[11,"table_offset","","",8,[[]]],[11,"new","","",10,[[["privilegelevel",4]],["codesegment",3]]],[11,"new","","",11,[[["privilegelevel",4]],["datasegment",3]]],[11,"empty","","",12,[[],["tsssegment",3]]],[11,"new","","",12,[[["pin",3],["tss",3]],["tsssegment",3]]],[11,"new","","Create a `Gdt` with pre-populated code and data segments,…",13,[[],["gdt",3]]],[11,"add_tss","","Add a new TSS, if there's space for it. The first TSS…",13,[[["tsssegment",3]],["segmentselector",3]]],[11,"load","","Load the new GDT, switch to the new `kernel_code` code…",13,[[["segmentselector",3]]]],[0,"i8259_pic","hal_x86_64::hw","",null,null],[3,"Pic","hal_x86_64::hw::i8259_pic","",null,null],[11,"new","","",14,[[],["pic",3]]],[11,"remap_and_disable","","Remap and disable the PIC. It is necessary to remap the…",14,[[]]],[0,"idt","hal_x86_64::hw","",null,null],[3,"IdtEntry","hal_x86_64::hw::idt","",null,null],[3,"Idt","","",null,null],[3,"InterruptStackFrame","","",null,null],[12,"instruction_pointer","","",15,null],[12,"code_segment","","",15,null],[12,"cpu_flags","","",15,null],[12,"stack_pointer","","",15,null],[12,"stack_segment","","",15,null],[6,"HandlerFunc","","The type of a function that can be used as an interrupt…",null,null],[11,"missing","","",16,[[],["idtentry",3]]],[11,"set_handler","","",16,[[["handlerfunc",6],["segmentselector",3]]]],[11,"set_ist_handler","","",16,[[]]],[11,"set_privilege_level","","",16,[[["privilegelevel",4]]]],[11,"empty","","",17,[[],["idt",3]]],[11,"divide_error","","",17,[[],["idtentry",3]]],[11,"debug_exception","","",17,[[],["idtentry",3]]],[11,"nmi","","",17,[[],["idtentry",3]]],[11,"breakpoint","","",17,[[],["idtentry",3]]],[11,"overflow","","",17,[[],["idtentry",3]]],[11,"bound_range_exceeded","","",17,[[],["idtentry",3]]],[11,"invalid_opcode","","",17,[[],["idtentry",3]]],[11,"device_not_available","","",17,[[],["idtentry",3]]],[11,"double_fault","","",17,[[],["idtentry",3]]],[11,"invalid_tss","","",17,[[],["idtentry",3]]],[11,"segment_not_present","","",17,[[],["idtentry",3]]],[11,"stack_segment_fault","","",17,[[],["idtentry",3]]],[11,"general_protection_fault","","",17,[[],["idtentry",3]]],[11,"page_fault","","",17,[[],["idtentry",3]]],[11,"x87_fault","","",17,[[],["idtentry",3]]],[11,"alignment_check","","",17,[[],["idtentry",3]]],[11,"machine_check","","",17,[[],["idtentry",3]]],[11,"simd_exception","","",17,[[],["idtentry",3]]],[11,"virtualization_exception","","",17,[[],["idtentry",3]]],[11,"load","","",17,[[]]],[0,"io_apic","hal_x86_64::hw","",null,null],[3,"IoApic","hal_x86_64::hw::io_apic","",null,null],[12,"config_area_base","","",18,null],[12,"global_interrupt_base","","",18,null],[4,"DeliveryMode","","",null,null],[13,"Fixed","","",19,null],[13,"LowestPriority","","",19,null],[13,"SMI","","",19,null],[13,"NMI","","",19,null],[13,"INIT","","",19,null],[13,"ExtINT","","",19,null],[4,"PinPolarity","","",null,null],[13,"Low","","",20,null],[13,"High","","",20,null],[4,"TriggerMode","","",null,null],[13,"Edge","","",21,null],[13,"Level","","",21,null],[11,"new","","Create a new `IoApic` with the specified GSI (global…",18,[[["virtualaddress",3]],["ioapic",3]]],[11,"set_irq_mask","","",18,[[]]],[11,"write_entry","","Write an IRQs entry using a more convenient interface than…",18,[[["deliverymode",4],["triggermode",4],["pinpolarity",4]]]],[11,"num_redirection_entries","","",18,[[]]],[0,"local_apic","hal_x86_64::hw","",null,null],[3,"LocalApicRegister","hal_x86_64::hw::local_apic","Represents a register in the local APIC's configuration…",null,null],[3,"LocalApic","","Methods on this type operate on the local APIC of the…",null,null],[11,"read","","Read from this register. Unsafe because not all registers…",22,[[]]],[11,"write","","Write to this register. Unsafe because not all registers…",22,[[]]],[11,"new","","",23,[[["virtualaddress",3]],["localapic",3]]],[11,"enable","","",23,[[]]],[11,"enable_timer","","Set the local APIC timer to interrupt every `duration` ms,…",23,[[]]],[11,"register","","",23,[[],["localapicregister",3]]],[11,"send_eoi","","Send an End Of Interrupt to the local APIC. This should be…",23,[[]]],[0,"port","hal_x86_64::hw","",null,null],[3,"Port","hal_x86_64::hw::port","Represents an IO port that can be read and written to…",null,null],[8,"PortSize","","Implemented by the types used to represent 8-bit, 16-bit,…",null,null],[10,"port_read","","",24,[[]]],[10,"port_write","","",24,[[]]],[11,"new","","Create a new `Port` at the specified I/O address. Unsafe…",25,[[],["port",3]]],[11,"read","","",25,[[]]],[11,"write","","",25,[[]]],[0,"registers","hal_x86_64::hw","",null,null],[3,"CpuFlags","hal_x86_64::hw::registers","A wrapper for the `RFLAGS` register, providing a nice…",null,null],[12,"0","","",26,null],[5,"read_msr","","Read from a model-specific register.",null,[[]]],[5,"write_msr","","Write to a model-specific register. This is unsafe,…",null,[[]]],[17,"CR4_RESTRICT_RDTSC","","If this is set, `rdtsc` can only be used in Ring 0.",null,null],[17,"CR4_ENABLE_PAE","","",null,null],[17,"CR4_ENABLE_GLOBAL_PAGES","","",null,null],[17,"CR4_XSAVE_ENABLE_BIT","","",null,null],[17,"EFER","","",null,null],[17,"EFER_ENABLE_SYSCALL","","",null,null],[17,"EFER_ENABLE_LONG_MODE","","",null,null],[17,"EFER_ENABLE_NX_BIT","","",null,null],[17,"IA32_STAR","","Contains the Ring 0 and Ring 3 code-segment selectors…",null,null],[17,"IA32_LSTAR","","Contains the virtual address of the handler to call upon…",null,null],[17,"IA32_FMASK","","Upon `syscall`, the value of this MSR is used to mask…",null,null],[17,"IA32_GS_BASE","","A virtual address can be stored in this MSR, and acts as…",null,null],[11,"read","","Read the contents of `RFLAGS`, creating a `CpuFlags`.",26,[[],["cpuflags",3]]],[11,"interrupts_enabled","","",26,[[]]],[0,"serial","hal_x86_64::hw","",null,null],[3,"SerialPort","hal_x86_64::hw::serial","",null,null],[17,"COM1","","",null,null],[11,"new","","",27,[[],["serialport",3]]],[11,"initialise","","",27,[[]]],[11,"read","","",27,[[]]],[11,"write","","",27,[[]]],[0,"tlb","hal_x86_64::hw","",null,null],[5,"invalidate_page","hal_x86_64::hw::tlb","",null,[[["virtualaddress",3]]]],[5,"flush","","",null,[[]]],[0,"tss","hal_x86_64::hw","",null,null],[3,"Tss","hal_x86_64::hw::tss","Hardware task switching isn't supported on x86_64, so the…",null,null],[12,"privilege_stack_table","","",28,null],[12,"interrupt_stack_table","","",28,null],[12,"iomap_base","","",28,null],[11,"new","","",28,[[],["tss",3]]],[11,"set_kernel_stack","","",28,[[["virtualaddress",3]]]],[0,"kernel_map","hal_x86_64","This module contains constants that define how the kernel…",null,null],[5,"physical_to_virtual","hal_x86_64::kernel_map","Access a given physical address through the physical…",null,[[["physicaladdress",3]],["virtualaddress",3]]],[17,"KERNEL_P4_ENTRY","","",null,null],[17,"KERNEL_ADDRESS_SPACE_START","","",null,null],[17,"PHYSICAL_MAPPING_BASE","","",null,null],[17,"KERNEL_STACKS_BASE","","",null,null],[17,"STACK_SLOT_SIZE","","",null,null],[17,"MAX_TASKS","","",null,null],[17,"KERNEL_BASE","","The kernel starts at -2GiB. The kernel image is loaded…",null,null],[0,"paging","hal_x86_64","",null,null],[3,"EntryFlags","hal_x86_64::paging","",null,null],[3,"Entry","","",null,null],[3,"Table","","",null,null],[3,"PageTable","","",null,null],[3,"MapperImpl","","",null,null],[12,"p4","","",29,null],[4,"Level4","","",null,null],[4,"Level3","","",null,null],[4,"Level2","","",null,null],[4,"Level1","","",null,null],[8,"TableLevel","","",null,null],[8,"HierarchicalLevel","","Tables of levels that implement `HierarchicalLevel` are…",null,null],[16,"NextLevel","","",30,null],[18,"PRESENT","","",31,null],[18,"WRITABLE","","",31,null],[18,"USER_ACCESSIBLE","","",31,null],[18,"WRITE_THROUGH","","",31,null],[18,"NO_CACHE","","",31,null],[18,"ACCESSED","","",31,null],[18,"DIRTY","","",31,null],[18,"HUGE_PAGE","","",31,null],[18,"GLOBAL","","",31,null],[18,"NO_EXECUTE","","",31,null],[11,"empty","","Returns an empty set of flags",31,[[],["entryflags",3]]],[11,"all","","Returns the set containing all flags.",31,[[],["entryflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",31,[[]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",31,[[],[["entryflags",3],["option",4]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",31,[[],["entryflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",31,[[],["entryflags",3]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",31,[[]]],[11,"is_all","","Returns `true` if all flags are currently set.",31,[[]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",31,[[["entryflags",3]]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",31,[[["entryflags",3]]]],[11,"insert","","Inserts the specified flags in-place.",31,[[["entryflags",3]]]],[11,"remove","","Removes the specified flags in-place.",31,[[["entryflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",31,[[["entryflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the…",31,[[["entryflags",3]]]],[11,"unused","","",32,[[],["entry",3]]],[11,"is_unused","","",32,[[]]],[11,"flags","","",32,[[],["entryflags",3]]],[11,"address","","",32,[[],[["physicaladdress",3],["option",4]]]],[11,"set_unused","","",32,[[]]],[11,"set","","Set an entry to a given address and set of flags. Cannot…",32,[[["physicaladdress",3],["entryflags",3]]]],[11,"new","","",33,[[],["table",3]]],[11,"zero","","",33,[[]]],[11,"next_table","","Get a reference to the table at the given `index`,…",33,[[["virtualaddress",3]],[["option",4],["table",3]]]],[11,"next_table_mut","","Get a mutable reference to the table at the given `index`,…",33,[[["virtualaddress",3]],[["table",3],["option",4]]]],[11,"next_table_create","","",33,[[["virtualaddress",3]],[["table",3],["mappererror",4],["result",4]]]],[11,"new","","",34,[[["frame",3],["virtualaddress",3]],["pagetable",3]]],[11,"from_frame","","Create a `PageTable` from a `Frame` that already contains…",34,[[["frame",3],["virtualaddress",3]],["pagetable",3]]],[11,"mapper","","",34,[[],["mapperimpl",3]]],[11,"switch_to","","",34,[[]]],[8,"VirtualAddressEx","hal_x86_64","",null,null],[10,"p4_index","","",35,[[]]],[10,"p3_index","","",35,[[]]],[10,"p2_index","","",35,[[]]],[10,"p1_index","","",35,[[]]],[14,"getter","","",null,null],[14,"read_control_reg","","Read a control register. The name of the control register…",null,null],[14,"write_control_reg","","Write to a control register. Calls to this macro will need…",null,null],[11,"from","hal_x86_64::hw","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","hal_x86_64::hw::cpu","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","hal_x86_64::hw::gdt","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"into","","",11,[[]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"into","","",12,[[]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"into","","",13,[[]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","hal_x86_64::hw::i8259_pic","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"into","","",14,[[]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","hal_x86_64::hw::idt","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"into","","",16,[[]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"into","","",17,[[]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"into","","",15,[[]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","hal_x86_64::hw::io_apic","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"into","","",18,[[]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"into","","",19,[[]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"into","","",20,[[]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"into","","",21,[[]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","hal_x86_64::hw::local_apic","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"into","","",22,[[]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"into","","",23,[[]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","hal_x86_64::hw::port","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"into","","",25,[[]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","hal_x86_64::hw::registers","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"into","","",26,[[]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","hal_x86_64::hw::serial","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"into","","",27,[[]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","hal_x86_64::hw::tss","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"into","","",28,[[]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","hal_x86_64::paging","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"into","","",31,[[]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"from","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"into","","",32,[[]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"into","","",33,[[]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"into","","",34,[[]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"into","","",29,[[]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"into","","",36,[[]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"into","","",37,[[]]],[11,"try_into","","",37,[[],["result",4]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"into","","",38,[[]]],[11,"try_into","","",38,[[],["result",4]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"from","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"into","","",39,[[]]],[11,"try_into","","",39,[[],["result",4]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","","",31,[[["flags",3]]]],[11,"fmt","hal_x86_64::hw::cpu","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","hal_x86_64::hw::gdt","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","hal_x86_64::hw::idt","",15,[[["formatter",3]],["result",6]]],[11,"fmt","hal_x86_64::hw::io_apic","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","hal_x86_64::hw::registers","",26,[[["formatter",3]],["result",6]]],[11,"fmt","hal_x86_64::hw::tss","",28,[[["formatter",3]],["result",6]]],[11,"fmt","hal_x86_64::paging","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"sub","","Returns the set difference of the two sets of flags.",31,[[["entryflags",3]],["entryflags",3]]],[11,"eq","hal_x86_64::hw::cpu","",5,[[["vendor",4]]]],[11,"eq","","",7,[[["hypervisorvendor",4]]]],[11,"eq","hal_x86_64::hw::gdt","",9,[[["privilegelevel",4]]]],[11,"eq","hal_x86_64::paging","",31,[[["entryflags",3]]]],[11,"ne","","",31,[[["entryflags",3]]]],[11,"cmp","","",31,[[["entryflags",3]],["ordering",4]]],[11,"partial_cmp","","",31,[[["entryflags",3]],[["ordering",4],["option",4]]]],[11,"lt","","",31,[[["entryflags",3]]]],[11,"le","","",31,[[["entryflags",3]]]],[11,"gt","","",31,[[["entryflags",3]]]],[11,"ge","","",31,[[["entryflags",3]]]],[11,"sub_assign","","Disables all flags enabled in the set.",31,[[["entryflags",3]]]],[11,"not","","Returns the complement of this set of flags.",31,[[],["entryflags",3]]],[11,"bitand","","Returns the intersection between the two sets of flags.",31,[[["entryflags",3]],["entryflags",3]]],[11,"bitor","","Returns the union of the two sets of flags.",31,[[["entryflags",3]],["entryflags",3]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",31,[[["entryflags",3]],["entryflags",3]]],[11,"bitand_assign","","Disables all flags disabled in the set.",31,[[["entryflags",3]]]],[11,"bitor_assign","","Adds the set of flags.",31,[[["entryflags",3]]]],[11,"bitxor_assign","","Toggles the set of flags.",31,[[["entryflags",3]]]],[11,"index","hal_x86_64::hw::idt","",17,[[]]],[11,"index","hal_x86_64::paging","",33,[[]]],[11,"index_mut","hal_x86_64::hw::idt","",17,[[]]],[11,"index_mut","hal_x86_64::paging","",33,[[]]],[11,"hash","","",31,[[]]],[11,"extend","","",31,[[["intoiterator",8]]]],[11,"from_iter","","",31,[[["intoiterator",8]],["entryflags",3]]],[11,"write_str","hal_x86_64::hw::serial","",27,[[],["result",6]]],[11,"fmt","hal_x86_64::paging","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"clone","hal_x86_64::hw::gdt","",9,[[],["privilegelevel",4]]],[11,"clone","","",8,[[],["segmentselector",3]]],[11,"clone","","",12,[[],["tsssegment",3]]],[11,"clone","hal_x86_64::hw::idt","",16,[[],["idtentry",3]]],[11,"clone","","",15,[[],["interruptstackframe",3]]],[11,"clone","hal_x86_64::hw::io_apic","",19,[[],["deliverymode",4]]],[11,"clone","","",20,[[],["pinpolarity",4]]],[11,"clone","","",21,[[],["triggermode",4]]],[11,"clone","hal_x86_64::hw::registers","",26,[[],["cpuflags",3]]],[11,"clone","hal_x86_64::hw::tss","",28,[[],["tss",3]]],[11,"clone","hal_x86_64::paging","",31,[[],["entryflags",3]]],[11,"clone","","",32,[[],["entry",3]]],[11,"default","","",31,[[],["entryflags",3]]],[11,"translate","","",29,[[["virtualaddress",3]],[["physicaladdress",3],["option",4]]]],[11,"map","","",29,[[["frame",3],["flags",3],["page",3]],[["result",4],["mappererror",4]]]],[11,"map_area","","",29,[[["flags",3],["physicaladdress",3],["virtualaddress",3]],[["result",4],["mappererror",4]]]],[11,"unmap","","",29,[[["page",3]],[["frame",3],["option",4]]]]],"p":[[3,"DescriptorTablePointer"],[3,"SupportedFeatures"],[3,"CpuInfo"],[3,"ModelInfo"],[3,"HypervisorInfo"],[4,"Vendor"],[4,"Microarch"],[4,"HypervisorVendor"],[3,"SegmentSelector"],[4,"PrivilegeLevel"],[3,"CodeSegment"],[3,"DataSegment"],[3,"TssSegment"],[3,"Gdt"],[3,"Pic"],[3,"InterruptStackFrame"],[3,"IdtEntry"],[3,"Idt"],[3,"IoApic"],[4,"DeliveryMode"],[4,"PinPolarity"],[4,"TriggerMode"],[3,"LocalApicRegister"],[3,"LocalApic"],[8,"PortSize"],[3,"Port"],[3,"CpuFlags"],[3,"SerialPort"],[3,"Tss"],[3,"MapperImpl"],[8,"HierarchicalLevel"],[3,"EntryFlags"],[3,"Entry"],[3,"Table"],[3,"PageTable"],[8,"VirtualAddressEx"],[4,"Level4"],[4,"Level3"],[4,"Level2"],[4,"Level1"]]};
searchIndex["kernel"] = {"doc":"This module probably looks rather sparse! Check the root…","i":[[3,"Common","kernel","This is a collection of stuff we need to access from…",null,null],[12,"object_map","","",0,null],[12,"backup_framebuffer","","If the bootloader switched to a graphics mode that enables…",0,null],[5,"kmain","","This is the entry point for the kernel on x86_64. It is…",null,[[["bootinfo",3]]]],[5,"panic","","",null,[[["panicinfo",3]]]],[0,"x86_64","","This module defines the kernel entry-point on x86_64.",null,null],[3,"Arch","kernel::x86_64","",null,null],[12,"cpu_info","","",1,null],[12,"acpi_info","","",1,null],[12,"aml_context","","",1,null],[12,"physical_memory_manager","","",1,null],[12,"kernel_stack_bitmap","","Each bit in this bitmap corresponds to a slot for an…",1,null],[12,"kernel_page_table","","",1,null],[5,"kmain","","This is the entry point for the kernel on x86_64. It is…",null,[[["bootinfo",3]]]],[5,"create_framebuffer","","",null,[[["videomodeinfo",3]]]],[5,"load_task","","",null,[[["arch",3],["scheduler",3],["loadedimage",3]]]],[5,"check_support_and_enable_features","","We rely on certain processor features to be present for…",null,[[["cpuinfo",3]]]],[0,"acpi_handler","","",null,null],[3,"PebbleAcpiHandler","kernel::x86_64::acpi_handler","",null,null],[0,"address_space","kernel::x86_64","",null,null],[3,"AddressSpace","kernel::x86_64::address_space","",null,null],[12,"table","","",2,null],[12,"state","","",2,null],[12,"memory_objects","","",2,null],[12,"task_user_stack_bitmap","","We allocate 64 'slots' for task usermode stacks (each of…",2,null],[3,"TaskUserStack","","",null,null],[12,"top","","",3,null],[12,"slot_bottom","","",3,null],[12,"stack_bottom","","Initially, only a portion of the slot will be mapped with…",3,null],[4,"State","","",null,null],[13,"NotActive","","",4,null],[13,"Active","","",4,null],[11,"new","","",2,[[["arch",3]],["addressspace",3]]],[11,"map_memory_object","","",2,[[["arch",3],["wrappedkernelobject",3]],[["result",4],["memoryobjecterror",4]]]],[11,"switch_to","","",2,[[]]],[11,"switch_away_from","","Tell the address space that we are switching to another…",2,[[]]],[11,"add_stack","","",2,[[],[["option",4],["taskuserstack",3]]]],[0,"cpu","kernel::x86_64","",null,null],[3,"Cpu","kernel::x86_64::cpu","",null,null],[12,"processor_uid","","",5,null],[12,"local_apic_id","","",5,null],[12,"is_ap","","",5,null],[11,"from_acpi","","",5,[[["processor",3]],["cpu",3]]],[0,"interrupts","kernel::x86_64","",null,null],[3,"InterruptController","kernel::x86_64::interrupts","",null,null],[5,"local_apic_timer_handler","","",null,[[["interruptstackframe",3]]]],[5,"spurious_handler","","",null,[[["interruptstackframe",3]]]],[5,"syscall_handler","","",null,null],[0,"exception","","This module contains all the interrupt handlers used to…",null,null],[5,"nmi_handler","kernel::x86_64::interrupts::exception","",null,[[["interruptstackframe",3]]]],[5,"breakpoint_handler","","",null,[[["interruptstackframe",3]]]],[5,"invalid_opcode_handler","","",null,[[["interruptstackframe",3]]]],[5,"general_protection_fault_handler","","",null,[[["interruptstackframe",3]]]],[5,"page_fault_handler","","",null,[[["interruptstackframe",3]]]],[5,"double_fault_handler","","",null,[[["interruptstackframe",3]]]],[0,"pci","kernel::x86_64::interrupts","",null,null],[3,"PciConfigHeader","kernel::x86_64::interrupts::pci","",null,null],[12,"vendor_id","","",6,null],[12,"device_id","","",6,null],[12,"command","","",6,null],[12,"status","","",6,null],[12,"revision_id","","",6,null],[12,"prog_if","","",6,null],[12,"subclass","","",6,null],[12,"class","","",6,null],[12,"cache_line_size","","",6,null],[12,"latency_timer","","",6,null],[12,"header_type","","",6,null],[12,"bist","","",6,null],[3,"PciInfo","","",null,null],[3,"PciResolver","","",null,null],[12,"pci_info","","",7,null],[12,"config_regions","","",7,null],[12,"routing_table","","",7,null],[11,"has_multiple_functions","","",6,[[]]],[11,"resolve","","",7,[[["pciconfigregions",3],["amlcontext",3]],["pciinfo",3]]],[11,"check_bus","","",7,[[]]],[11,"check_device","","",7,[[]]],[11,"check_function","","",7,[[]]],[7,"IDT","kernel::x86_64::interrupts","This should only be accessed directly by the bootstrap…",null,null],[7,"LOCAL_APIC","","",null,null],[17,"LEGACY_PIC_VECTOR","","",null,null],[17,"FREE_VECTORS_START","","",null,null],[17,"APIC_TIMER_VECTOR","","",null,null],[17,"APIC_SPURIOUS_VECTOR","","",null,null],[11,"init","","",8,[[["arch",3]],["interruptcontroller",3]]],[11,"enable_local_timer","","Enable the per-CPU timer on the local APIC, so that it…",8,[[["arch",3],["duration",3]]]],[11,"install_exception_handlers","","",8,[[]]],[11,"install_syscall_handler","","",8,[[]]],[0,"logger","kernel::x86_64","",null,null],[3,"KernelLogger","kernel::x86_64::logger","This handles calls to the log macros throughout the…",null,null],[7,"COM1","","The COM1 serial port, accessed through the UART 16550…",null,null],[0,"memory","kernel::x86_64","This module contains the physical memory manager Pebble…",null,null],[3,"PhysicalMemoryManager","kernel::x86_64::memory","The main physical memory manager. It tracks all…",null,null],[12,"buddy_allocator","","A buddy allocator used to track all conventional memory.…",9,null],[12,"kernel_stack_bitmap","","",9,null],[3,"KernelStack","","",null,null],[12,"index","","",10,null],[12,"top","","",10,null],[12,"slot_bottom","","",10,null],[12,"stack_bottom","","Depending on the initial size passed, not all of the slot…",10,null],[3,"LockedPhysicalMemoryManager","","",null,null],[12,"0","","",11,null],[0,"buddy_allocator","","This module implements a buddy allocator, an efficient…",null,null],[3,"BuddyAllocator","kernel::x86_64::memory::buddy_allocator","",null,null],[12,"bins","","The bins of free blocks, where bin `i` contains blocks of…",12,null],[11,"new","","Create a new `BuddyAllocator`, with a maximum block size…",12,[[],["buddyallocator",3]]],[11,"add_range","","Add a range of `Frame`s to this allocator, marking them…",12,[[["range",3],["frame",3]]]],[11,"allocate_n","","Allocate (at least) `n` contiguous frames from this…",12,[[],[["frame",3],["option",4]]]],[11,"free_n","","Free the given block (starting at `start` and of size `n`…",12,[[["frame",3]]]],[11,"allocate_block","","Tries to allocate a block of the given order. If no blocks…",12,[[],[["frame",3],["option",4]]]],[11,"buddy_of","","Finds the starting frame of the block that is the buddy of…",12,[[["frame",3]],["frame",3]]],[11,"max_order","","Get the order of the largest block this allocator can track.",12,[[]]],[0,"userspace_map","kernel::x86_64::memory","",null,null],[17,"KERNEL_SPACE_START","kernel::x86_64::memory::userspace_map","",null,null],[17,"KERNEL_SPACE_END","","",null,null],[17,"INITIAL_STACK_SIZE","","The initial size of a task's user and kernel stacks. Must…",null,null],[17,"MAX_STACK_SIZE","","The maximum size of each task's usermode stack. This is…",null,null],[17,"MEMORY_OBJECTS_START","","",null,null],[17,"RECEIVE_BUFFERS_START","","",null,null],[17,"SEND_BUFFERS_START","","",null,null],[17,"USER_STACKS_START","","",null,null],[17,"HEAP_START","","",null,null],[17,"IMAGE_START","","",null,null],[17,"BUDDY_ALLOCATOR_MAX_ORDER","kernel::x86_64::memory","",null,null],[11,"new","","",11,[[["bootinfo",3]],["lockedphysicalmemorymanager",3]]],[11,"get_kernel_stack","","",11,[[],[["kernelstack",3],["option",4]]]],[0,"memory_object","kernel::x86_64","",null,null],[3,"MemoryObject","kernel::x86_64::memory_object","",null,null],[12,"virtual_address","","",13,null],[12,"physical_address","","",13,null],[12,"size","","Size of this MemoryObject in bytes.",13,null],[12,"flags","","",13,null],[11,"new","","",13,[[["flags",3],["physicaladdress",3],["virtualaddress",3]],["memoryobject",3]]],[11,"from_boot_info","","",13,[[["segment",3]],["memoryobject",3]]],[0,"per_cpu","kernel::x86_64","",null,null],[3,"PerCpu","kernel::x86_64::per_cpu","",null,null],[12,"_self_pointer","","The first field of this structure must be a pointer to…",14,null],[12,"_pin","","This structure must be pinned in memory for two reasons: -…",14,null],[12,"current_task_kernel_rsp","","This holds the kernel `rsp` of the current task, and makes…",14,null],[12,"common","","",14,null],[12,"tss","","",14,null],[12,"tss_selector","","",14,null],[3,"GuardedPerCpu","","This guards a `PerCpu` instance, preventing it from being…",null,null],[12,"0","","",15,null],[5,"common_per_cpu_data","","Access the common per-CPU data. This is exported from the…",null,[[],["commonpercpu",3]]],[5,"common_per_cpu_data_mut","","Get a mutable reference to the common per-CPU data.…",null,[[],["commonpercpu",3]]],[5,"per_cpu_data","","Access the per-CPU data. Unsafe because this must not be…",null,[[],[["pin",3],["percpu",3]]]],[5,"per_cpu_data_mut","","Get a mutable reference to the per-cpu data. This is…",null,[[],[["percpu",3],["pin",3]]]],[11,"tss","","",14,[[["pin",3]],[["tss",3],["pin",3]]]],[11,"tss_mut","","",14,[[["pin",3]],[["pin",3],["tss",3]]]],[11,"current_task_kernel_rsp","","",14,[[["pin",3]],["virtualaddress",3]]],[11,"current_task_kernel_rsp_mut","","",14,[[["pin",3]],[["virtualaddress",3],["pin",3]]]],[11,"common","","",14,[[["pin",3]],["commonpercpu",3]]],[11,"common_mut","","",14,[[["pin",3]],["commonpercpu",3]]],[11,"new","","Create a new `GuardedPerCpu`, but does not install the…",15,[[]]],[11,"install","","",15,[[]]],[0,"task","kernel::x86_64","",null,null],[3,"ContextSwitchFrame","kernel::x86_64::task","This is the layout of the stack that we expect to be…",null,null],[12,"r15","","",16,null],[12,"r14","","",16,null],[12,"r13","","",16,null],[12,"r12","","",16,null],[12,"rbp","","",16,null],[12,"rbx","","",16,null],[12,"return_address","","When we construct an initial stack frame, we set this to…",16,null],[3,"Task","","This is the representation of a task on x86_64. It's…",null,null],[12,"name","","",17,null],[12,"address_space","","",17,null],[12,"state","","",17,null],[12,"capabilities","","",17,null],[12,"user_stack","","",17,null],[12,"kernel_stack","","",17,null],[12,"kernel_stack_pointer","","",17,null],[4,"TaskCreationError","","",null,null],[13,"NotAnAddressSpace","","The kernel object that should be the AddressSpace that…",18,null],[13,"NotEnoughStackSlots","","The AddressSpace has run out of stack slots",18,null],[13,"InvalidCapabilityEncoding","","The task image has an invalid capability encoding",18,null],[13,"InitialNameTooLong","","Initial tasks (from images loaded by the bootloader) can…",18,null],[13,"InvalidName","","The task's name is not valid UTF-8.",18,null],[5,"context_switch","","Perform a context-switch between the currently running…",null,[[["arch",3],["taskstate",4],["wrappedkernelobject",3]]]],[5,"drop_to_usermode","","Drop into usermode into the given task. This permanently…",null,[[["arch",3],["wrappedkernelobject",3]]]],[5,"decode_capabilities","","Decode a capability stream (as found in a task's image)…",null,[[],[["result",4],["vec",3],["taskcreationerror",4]]]],[5,"task_entry_trampoline","","",null,null],[5,"do_context_switch","","Do the actual context switch: save the context of the old…",null,null],[11,"from_boot_info_image","","Create a new task in a given address space, which will…",17,[[["arch",3],["loadedimage",3],["arch",3],["wrappedkernelobject",3]],[["result",4],["task",3],["taskcreationerror",4]]]],[11,"initialize_kernel_stack","","Before a task can be started, either by it being scheduled…",17,[[["virtualaddress",3]]]],[7,"GDT","kernel::x86_64","",null,null],[7,"ARCH","","",null,null],[0,"arch","kernel","",null,null],[8,"Architecture","kernel::arch","Trait that is implemented by a type in each architecture…",null,null],[16,"AddressSpace","","",19,null],[16,"Task","","",19,null],[16,"MemoryObject","","",19,null],[16,"Mailbox","","",19,null],[10,"drop_to_userspace","","Performs the initial kernel -> userspace transistion.…",19,[[["wrappedkernelobject",3]]]],[0,"heap_allocator","kernel","",null,null],[3,"HoleAllocator","kernel::heap_allocator","",null,null],[12,"heap_bottom","","",20,null],[12,"heap_size","","",20,null],[12,"holes","","",20,null],[3,"LockedHoleAllocator","","",null,null],[12,"0","","",21,null],[3,"HoleInfo","","",null,null],[12,"addr","","",22,null],[12,"size","","",22,null],[3,"Hole","","",null,null],[12,"size","","",23,null],[12,"next","","",23,null],[3,"HoleList","","",null,null],[12,"first","","",24,null],[3,"Allocation","","",null,null],[12,"info","","",25,null],[12,"front_padding","","",25,null],[12,"back_padding","","",25,null],[5,"split_hole","","Split the given hole into…",null,[[["holeinfo",3],["layout",3]],[["allocation",3],["option",4]]]],[5,"allocate_first_fit","","",null,[[["hole",3],["layout",3]],[["result",4],["allocation",3],["allocerr",3]]]],[5,"free","","Walk the list, starting at `hole` and free the allocation…",null,[[["hole",3],["virtualaddress",3]]]],[5,"handle_alloc_error","","",null,[[["layout",3]]]],[11,"new_uninitialized","","Create a new, uninitialized `HoleAllocator`. Before heap…",20,[[],["holeallocator",3]]],[11,"init","","Initialise the `HoleAllocator`. This should only be called…",20,[[["virtualaddress",3]]]],[11,"new_uninitialized","","",21,[[],["lockedholeallocator",3]]],[11,"info","","",23,[[],["holeinfo",3]]],[11,"new","","Create a new `HoleList` that contains the given hole.…",24,[[["virtualaddress",3]],["holelist",3]]],[11,"allocate_first_fit","","Search for a big enough hole for the given `Layout` with…",24,[[["layout",3]],[["allocerr",3],["result",4]]]],[11,"free","","Free an allocation defined by `ptr` and `layout`. Unsafe…",24,[[["layout",3]]]],[11,"get_min_size","","",24,[[]]],[0,"mailbox","kernel","",null,null],[3,"Mailbox","kernel::mailbox","A `Mailbox` is a kernel object that allows the kernel to…",null,null],[12,"queue","","",26,null],[11,"new","","",26,[[],["mailbox",3]]],[11,"add","","",26,[[["mail",4]]]],[11,"get_next","","",26,[[],[["mail",4],["option",4]]]],[0,"object","kernel","",null,null],[3,"WrappedKernelObject","kernel::object","",null,null],[12,"id","","",27,null],[12,"object","","",27,null],[4,"KernelObject","","",null,null],[13,"AddressSpace","","",28,null],[13,"MemoryObject","","",28,null],[13,"Task","","",28,null],[13,"Mailbox","","",28,null],[0,"common","","This module contains types that can be re-used between…",null,null],[4,"TaskBlock","kernel::object::common","",null,null],[13,"WaitForMail","","Block the task until the mailbox with the given ID…",29,null],[4,"TaskState","","",null,null],[13,"Ready","","",30,null],[13,"Running","","",30,null],[13,"Blocked","","",30,null],[8,"CommonTask","","Implemented by each of the structures that provide the…",null,null],[10,"state","","",31,[[],["taskstate",4]]],[10,"name","","",31,[[]]],[0,"map","kernel::object","",null,null],[3,"ObjectMap","kernel::object::map","Stores all the `KernelObject`s against their generational…",null,null],[12,"entries","","",32,null],[12,"free_list_head","","",32,null],[4,"Entry","","",null,null],[13,"Free","","",33,null],[12,"next_generation","kernel::object::map::Entry","",34,null],[12,"next_free","","",34,null],[13,"Occupied","kernel::object::map","",33,null],[12,"generation","kernel::object::map::Entry","",35,null],[12,"object","","",35,null],[17,"INITIAL_OBJECT_CAPACITY","kernel::object::map","",null,null],[11,"new","","",32,[[],["objectmap",3]]],[11,"insert","","Insert a new object into the map, assigning it a…",32,[[["kernelobject",4],["arc",3]],["kernelobjectid",3]]],[11,"insert_into","","",32,[[["kernelobject",4],["arc",3]],["kernelobjectid",3]]],[11,"reserve","","",32,[[]]],[11,"get","","",32,[[["kernelobjectid",3]],[["option",4],["wrappedkernelobject",3]]]],[11,"remove","","",32,[[["kernelobjectid",3]],[["option",4],["arc",3]]]],[11,"contains","","",32,[[["kernelobjectid",3]]]],[11,"len","","",32,[[]]],[11,"add_to_map","kernel::object","",28,[[["objectmap",3]],["wrappedkernelobject",3]]],[11,"address_space","","",28,[[],[["option",4],["rwlock",3]]]],[11,"memory_object","","",28,[[],[["option",4],["rwlock",3]]]],[11,"task","","",28,[[],[["rwlock",3],["option",4]]]],[11,"mailbox","","",28,[[],[["rwlock",3],["option",4]]]],[0,"per_cpu","kernel","",null,null],[3,"CommonPerCpu","kernel::per_cpu","Per-cpu data that needs to be accessed from the…",null,null],[12,"scheduler","","",36,null],[11,"new","","",36,[[],["commonpercpu",3]]],[11,"running_task","","Helper method to get the currently running task. Panics if…",36,[[],["wrappedkernelobject",3]]],[0,"scheduler","kernel","",null,null],[3,"Scheduler","kernel::scheduler","",null,null],[12,"running_task","","",37,null],[12,"ready_queue","","List of Tasks ready to be scheduled. Every kernel object…",37,null],[12,"blocked","","",37,null],[4,"ScheduleError","","",null,null],[13,"KernelObjectNotATask","","Returned by `add_task` if you try to schedule a kernel…",38,null],[11,"new","","",37,[[],["scheduler",3]]],[11,"add_task","","",37,[[["wrappedkernelobject",3],["arch",3]],[["result",4],["scheduleerror",4]]]],[11,"drop_to_userspace","","Performs the first transistion from the kernel into…",37,[[["arch",3]]]],[11,"switch_to_next","","Switch to the next scheduled task. This is called when a…",37,[[["taskstate",4]]]],[0,"syscall","kernel","",null,null],[5,"rust_syscall_handler","kernel::syscall","This is the architecture-independent syscall handler. It…",null,[[]]],[5,"yield_syscall","","",null,[[]]],[5,"early_log","","",null,[[]]],[5,"request_system_object","","",null,[[]]],[5,"my_address_space","","",null,[[]]],[5,"create_memory_object","","",null,[[],[["memoryobjecterror",4],["kernelobjectid",3],["result",4]]]],[5,"map_memory_object","","",null,[[],[["result",4],["memoryobjecterror",4]]]],[5,"create_mailbox","","",null,[[],[["mailboxerror",4],["result",4],["kernelobjectid",3]]]],[5,"wait_for_mail","","",null,[[],[["result",4],["mailboxerror",4]]]],[7,"ALLOCATOR","kernel","",null,null],[7,"COMMON","","We need to make various bits of data accessible on a…",null,null],[11,"new","","",0,[[],["common",3]]],[14,"set_handler","","",null,null],[14,"set_handler_with_error_code","","",null,null],[14,"save_regs","","Macro to save the scratch registers. In System-V, `rbx`,…",null,null],[14,"restore_regs","","Restore the saved scratch registers.",null,null],[14,"wrap_handler","","",null,null],[14,"wrap_handler_with_error_code","","",null,null],[14,"kernel_object_table","","",null,null],[11,"from","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","kernel::x86_64","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","kernel::x86_64::acpi_handler","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"into","","",39,[[]]],[11,"try_into","","",39,[[],["result",4]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","kernel::x86_64::address_space","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"from","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","kernel::x86_64::cpu","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","kernel::x86_64::interrupts","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","kernel::x86_64::interrupts::pci","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"from","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"into","","",40,[[]]],[11,"try_into","","",40,[[],["result",4]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","kernel::x86_64::logger","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"into","","",41,[[]]],[11,"try_into","","",41,[[],["result",4]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"from","kernel::x86_64::memory","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"from","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"into","","",11,[[]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","kernel::x86_64::memory::buddy_allocator","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"into","","",12,[[]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","kernel::x86_64::memory_object","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"into","","",13,[[]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","kernel::x86_64::per_cpu","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"into","","",14,[[]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"into","","",15,[[]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","kernel::x86_64::task","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"into","","",16,[[]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"into","","",17,[[]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"into","","",18,[[]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","kernel::heap_allocator","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"into","","",20,[[]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"into","","",21,[[]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"into","","",22,[[]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"from","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"into","","",23,[[]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"into","","",24,[[]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"into","","",25,[[]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"from","kernel::mailbox","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"into","","",26,[[]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","kernel::object","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"into","","",27,[[]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"from","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"into","","",28,[[]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","kernel::object::common","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"into","","",29,[[]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"from","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"into","","",30,[[]]],[11,"try_into","","",30,[[],["result",4]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"from","kernel::object::map","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"into","","",32,[[]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"into","","",33,[[]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","kernel::per_cpu","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"into","","",36,[[]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from","kernel::scheduler","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"into","","",37,[[]]],[11,"try_into","","",37,[[],["result",4]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"into","","",38,[[]]],[11,"try_into","","",38,[[],["result",4]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"drop_to_userspace","kernel::x86_64","",1,[[["arch",3],["wrappedkernelobject",3]]]],[11,"state","kernel::x86_64::task","",17,[[],["taskstate",4]]],[11,"name","","",17,[[]]],[11,"deref","kernel::heap_allocator","",21,[[],["mutex",3]]],[11,"fmt","kernel::x86_64::address_space","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","kernel::x86_64::interrupts::pci","",6,[[["formatter",3]],["result",6]]],[11,"fmt","kernel::x86_64::memory","",10,[[["formatter",3]],["result",6]]],[11,"fmt","kernel::x86_64::per_cpu","",14,[[["formatter",3]],["result",6]]],[11,"fmt","kernel::x86_64::task","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","kernel::heap_allocator","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","kernel::object::common","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","kernel::object","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","kernel::per_cpu","",36,[[["formatter",3]],["result",6]]],[11,"fmt","kernel::scheduler","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"eq","kernel::x86_64::address_space","",4,[[["state",4]]]],[11,"eq","kernel::object::common","",29,[[["taskblock",4]]]],[11,"ne","","",29,[[["taskblock",4]]]],[11,"eq","","",30,[[["taskstate",4]]]],[11,"ne","","",30,[[["taskstate",4]]]],[11,"drop","kernel::x86_64::per_cpu","",15,[[]]],[11,"drop","kernel::x86_64","",1,[[]]],[11,"clone","kernel::x86_64::address_space","",3,[[],["taskuserstack",3]]],[11,"clone","kernel::x86_64::interrupts::pci","",6,[[],["pciconfigheader",3]]],[11,"clone","kernel::x86_64::memory","",10,[[],["kernelstack",3]]],[11,"clone","kernel::heap_allocator","",22,[[],["holeinfo",3]]],[11,"clone","","",25,[[],["allocation",3]]],[11,"clone","kernel::object::common","",29,[[],["taskblock",4]]],[11,"clone","","",30,[[],["taskstate",4]]],[11,"clone","kernel::object","",27,[[]]],[11,"default","kernel::x86_64::task","",16,[[],["contextswitchframe",3]]],[11,"alloc","kernel::heap_allocator","",21,[[["layout",3]]]],[11,"dealloc","","",21,[[["layout",3]]]],[11,"allocate_n","kernel::x86_64::memory","",11,[[],[["range",3],["frame",3]]]],[11,"free_n","","",11,[[["frame",3]]]],[11,"enabled","kernel::x86_64::logger","",41,[[["metadata",3]]]],[11,"log","","",41,[[["record",3]]]],[11,"flush","","",41,[[]]],[11,"map_physical_region","kernel::x86_64::acpi_handler","",39,[[],["physicalmapping",3]]],[11,"unmap_physical_region","","",39,[[["physicalmapping",3]]]]],"p":[[3,"Common"],[3,"Arch"],[3,"AddressSpace"],[3,"TaskUserStack"],[4,"State"],[3,"Cpu"],[3,"PciConfigHeader"],[3,"PciResolver"],[3,"InterruptController"],[3,"PhysicalMemoryManager"],[3,"KernelStack"],[3,"LockedPhysicalMemoryManager"],[3,"BuddyAllocator"],[3,"MemoryObject"],[3,"PerCpu"],[3,"GuardedPerCpu"],[3,"ContextSwitchFrame"],[3,"Task"],[4,"TaskCreationError"],[8,"Architecture"],[3,"HoleAllocator"],[3,"LockedHoleAllocator"],[3,"HoleInfo"],[3,"Hole"],[3,"HoleList"],[3,"Allocation"],[3,"Mailbox"],[3,"WrappedKernelObject"],[4,"KernelObject"],[4,"TaskBlock"],[4,"TaskState"],[8,"CommonTask"],[3,"ObjectMap"],[4,"Entry"],[13,"Free"],[13,"Occupied"],[3,"CommonPerCpu"],[3,"Scheduler"],[4,"ScheduleError"],[3,"PebbleAcpiHandler"],[3,"PciInfo"],[3,"KernelLogger"]]};
searchIndex["libpebble"] = {"doc":"","i":[[0,"caps","libpebble","",null,null],[4,"Capability","libpebble::caps","",null,null],[13,"CreateAddressSpace","","",0,null],[13,"CreateMemoryObject","","",0,null],[13,"CreateTask","","",0,null],[13,"X86_64AccessIoPort","","",0,null],[13,"AccessBackupFramebuffer","","",0,null],[13,"EarlyLogging","","",0,null],[0,"object","libpebble","",null,null],[3,"KernelObjectId","libpebble::object","",null,null],[12,"index","","",1,null],[12,"generation","","",1,null],[6,"Index","","",null,null],[6,"Generation","","",null,null],[11,"from_syscall_repr","","Used to convert between the form the kernel represents…",1,[[],["kernelobjectid",3]]],[11,"to_syscall_repr","","Convert this `KernelObjectId` to the form used in the…",1,[[]]],[0,"syscall","libpebble","",null,null],[4,"MemoryObjectError","libpebble::syscall","",null,null],[13,"InvalidVirtualAddress","","",2,null],[13,"InvalidFlags","","",2,null],[13,"InvalidSize","","",2,null],[13,"AddressRangeNotFree","","",2,null],[13,"AccessDeniedToMemoryObject","","",2,null],[13,"AccessDeniedToAddressSpace","","",2,null],[13,"NotAMemoryObject","","",2,null],[13,"NotAnAddressSpace","","",2,null],[5,"yield_to_kernel","","",null,[[]]],[5,"early_log","","",null,[[],["result",4]]],[5,"my_address_space","","",null,[[],["kernelobjectid",3]]],[5,"create_memory_object","","Create a MemoryObject kernel object at the given virtual…",null,[[],[["result",4],["memoryobjecterror",4],["kernelobjectid",3]]]],[5,"map_memory_object","","",null,[[["kernelobjectid",3]],[["result",4],["memoryobjecterror",4]]]],[0,"mailbox","","",null,null],[3,"InterruptMailRepr","libpebble::syscall::mailbox","",null,null],[3,"MailRepr","","",null,null],[12,"mail_type","","",3,null],[12,"payload","","",3,null],[19,"MailPayload","","",null,null],[4,"Mail","","",null,null],[13,"Interrupt","","",4,null],[4,"MailboxError","","",null,null],[13,"NotAMailbox","","",5,null],[13,"InvalidMailType","","",5,null],[5,"create_mailbox","","",null,[[],[["kernelobjectid",3],["mailboxerror",4],["result",4]]]],[5,"wait_for_mail","","",null,[[["kernelobjectid",3]],[["mail",4],["result",4],["mailboxerror",4]]]],[6,"MailType","","",null,null],[17,"MAIL_TYPE_INTERRUPT","","",null,null],[11,"to_syscall_repr","","",4,[[],["mailrepr",3]]],[0,"result","libpebble::syscall","",null,null],[5,"status_from_syscall_repr","libpebble::syscall::result","",null,[[],["result",4]]],[5,"status_to_syscall_repr","","",null,[[["result",4]]]],[5,"result_from_syscall_repr","","",null,[[],[["kernelobjectid",3],["result",4]]]],[5,"result_to_syscall_repr","","",null,[[["result",4],["kernelobjectid",3]]]],[0,"system_object","libpebble::syscall","",null,null],[3,"FramebufferSystemObjectInfo","libpebble::syscall::system_object","This is a type representing the information that the…",null,null],[12,"address","","",6,null],[12,"width","","",6,null],[12,"height","","",6,null],[12,"stride","","",6,null],[12,"pixel_format","","The representation of pixels in the supplied framebuffer.…",6,null],[4,"SystemObjectId","","",null,null],[13,"BackupFramebuffer","","",7,null],[12,"info_address","libpebble::syscall::system_object::SystemObjectId","",8,null],[4,"RequestSystemObjectError","libpebble::syscall::system_object","",null,null],[13,"ObjectDoesNotExist","","The requested object ID does point to a valid system…",9,null],[13,"NotAValidId","","The requested object ID does not correspond to a valid…",9,null],[13,"AccessDenied","","The requested object ID is valid, but the requesting task…",9,null],[5,"request_system_object","","",null,[[["systemobjectid",4]],[["requestsystemobjecterror",4],["result",4],["kernelobjectid",3]]]],[17,"SYSTEM_OBJECT_BACKUP_FRAMEBUFFER_ID","","",null,null],[0,"raw_x86_64","libpebble::syscall","",null,null],[5,"syscall0","libpebble::syscall::raw_x86_64","",null,[[]]],[5,"syscall1","","",null,[[]]],[5,"syscall2","","",null,[[]]],[5,"syscall3","","",null,[[]]],[5,"syscall4","","",null,[[]]],[5,"syscall5","","",null,[[]]],[17,"SYSCALL_YIELD","libpebble::syscall","",null,null],[17,"SYSCALL_EARLY_LOG","","",null,null],[17,"SYSCALL_REQUEST_SYSTEM_OBJECT","","",null,null],[17,"SYSCALL_MY_ADDRESS_SPACE","","",null,null],[17,"SYSCALL_CREATE_MEMORY_OBJECT","","",null,null],[17,"SYSCALL_MAP_MEMORY_OBJECT","","",null,null],[17,"SYSCALL_CREATE_MAILBOX","","",null,null],[17,"SYSCALL_WAIT_FOR_MAIL","","",null,null],[14,"define_error_type","libpebble","",null,null],[11,"from","libpebble::caps","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","libpebble::object","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","libpebble::syscall","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","libpebble::syscall::mailbox","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"into","","",11,[[]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","libpebble::syscall::system_object","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"fmt","libpebble::caps","",0,[[["formatter",3]],["result",6]]],[11,"fmt","libpebble::object","",1,[[["formatter",3]],["result",6]]],[11,"fmt","libpebble::syscall::mailbox","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","libpebble::syscall::system_object","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","libpebble::syscall","",2,[[["formatter",3]],["result",6]]],[11,"eq","libpebble::caps","",0,[[["capability",4]]]],[11,"ne","","",0,[[["capability",4]]]],[11,"eq","libpebble::object","",1,[[["kernelobjectid",3]]]],[11,"ne","","",1,[[["kernelobjectid",3]]]],[11,"try_from","libpebble::syscall::mailbox","",5,[[],["result",4]]],[11,"try_from","libpebble::syscall::system_object","",9,[[],["result",4]]],[11,"try_from","libpebble::syscall","",2,[[],["result",4]]],[11,"into","libpebble::syscall::mailbox","",5,[[]]],[11,"into","libpebble::syscall::system_object","",9,[[]]],[11,"into","libpebble::syscall","",2,[[]]],[11,"clone","libpebble::caps","",0,[[],["capability",4]]],[11,"clone","libpebble::object","",1,[[],["kernelobjectid",3]]],[11,"clone","libpebble::syscall::mailbox","",10,[[],["interruptmailrepr",3]]],[11,"clone","","",4,[[],["mail",4]]],[11,"clone","","",5,[[],["mailboxerror",4]]],[11,"clone","libpebble::syscall::system_object","",7,[[],["systemobjectid",4]]],[11,"clone","","",9,[[],["requestsystemobjecterror",4]]],[11,"clone","","",6,[[],["framebuffersystemobjectinfo",3]]],[11,"clone","libpebble::syscall","",2,[[],["memoryobjecterror",4]]]],"p":[[4,"Capability"],[3,"KernelObjectId"],[4,"MemoryObjectError"],[3,"MailRepr"],[4,"Mail"],[4,"MailboxError"],[3,"FramebufferSystemObjectInfo"],[4,"SystemObjectId"],[13,"BackupFramebuffer"],[4,"RequestSystemObjectError"],[3,"InterruptMailRepr"],[19,"MailPayload"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","i":[[3,"Record","log","The \"payload\" of a log message.",null,null],[3,"RecordBuilder","","Builder for `Record`.",null,null],[3,"Metadata","","Metadata about a log message.",null,null],[3,"MetadataBuilder","","Builder for `Metadata`.",null,null],[3,"SetLoggerError","","The type returned by [`set_logger`] if [`set_logger`] has…",null,null],[3,"ParseLevelError","","The type returned by [`from_str`] when the string doesn't…",null,null],[4,"Level","","An enum representing the available verbosity levels of the…",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[4,"LevelFilter","","An enum representing the available verbosity level filters…",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"set_max_level","","Sets the global maximum log level.",null,[[["levelfilter",4]]]],[5,"max_level","","Returns the current maximum log level.",null,[[],["levelfilter",4]]],[5,"set_logger","","Sets the global logger to a `&'static Log`.",null,[[["log",8]],[["setloggererror",3],["result",4]]]],[5,"set_logger_racy","","A thread-unsafe version of [`set_logger`].",null,[[["log",8]],[["setloggererror",3],["result",4]]]],[5,"logger","","Returns a reference to the logger.",null,[[],["log",8]]],[17,"STATIC_MAX_LEVEL","","The statically resolved maximum log level.",null,null],[8,"Log","","A trait encapsulating the operations required of a logger.",null,null],[10,"enabled","","Determines if a log message with the specified metadata…",2,[[["metadata",3]]]],[10,"log","","Logs the `Record`.",2,[[["record",3]]]],[10,"flush","","Flushes any buffered records.",2,[[]]],[11,"max","","Returns the most verbose logging level.",0,[[],["level",4]]],[11,"to_level_filter","","Converts the `Level` to the equivalent `LevelFilter`.",0,[[],["levelfilter",4]]],[11,"max","","Returns the most verbose logging level filter.",1,[[],["levelfilter",4]]],[11,"to_level","","Converts `self` to the equivalent `Level`.",1,[[],[["option",4],["level",4]]]],[11,"builder","","Returns a new builder.",3,[[],["recordbuilder",3]]],[11,"args","","The message body.",3,[[],["arguments",3]]],[11,"metadata","","Metadata about the log directive.",3,[[],["metadata",3]]],[11,"level","","The verbosity level of the message.",3,[[],["level",4]]],[11,"target","","The name of the target of the directive.",3,[[]]],[11,"module_path","","The module path of the message.",3,[[],["option",4]]],[11,"module_path_static","","The module path of the message, if it is a `'static` string.",3,[[],["option",4]]],[11,"file","","The source file containing the message.",3,[[],["option",4]]],[11,"file_static","","The module path of the message, if it is a `'static` string.",3,[[],["option",4]]],[11,"line","","The line containing the message.",3,[[],["option",4]]],[11,"new","","Construct new `RecordBuilder`.",4,[[],["recordbuilder",3]]],[11,"args","","Set `args`.",4,[[["arguments",3]],["recordbuilder",3]]],[11,"metadata","","Set `metadata`. Construct a `Metadata` object with…",4,[[["metadata",3]],["recordbuilder",3]]],[11,"level","","Set `Metadata::level`.",4,[[["level",4]],["recordbuilder",3]]],[11,"target","","Set `Metadata::target`",4,[[],["recordbuilder",3]]],[11,"module_path","","Set `module_path`",4,[[["option",4]],["recordbuilder",3]]],[11,"module_path_static","","Set `module_path` to a `'static` string",4,[[["option",4]],["recordbuilder",3]]],[11,"file","","Set `file`",4,[[["option",4]],["recordbuilder",3]]],[11,"file_static","","Set `file` to a `'static` string.",4,[[["option",4]],["recordbuilder",3]]],[11,"line","","Set `line`",4,[[["option",4]],["recordbuilder",3]]],[11,"build","","Invoke the builder and return a `Record`",4,[[],["record",3]]],[11,"builder","","Returns a new builder.",5,[[],["metadatabuilder",3]]],[11,"level","","The verbosity level of the message.",5,[[],["level",4]]],[11,"target","","The name of the target of the directive.",5,[[]]],[11,"new","","Construct a new `MetadataBuilder`.",6,[[],["metadatabuilder",3]]],[11,"level","","Setter for `level`.",6,[[["level",4]],["metadatabuilder",3]]],[11,"target","","Setter for `target`.",6,[[],["metadatabuilder",3]]],[11,"build","","Returns a `Metadata` object.",6,[[],["metadata",3]]],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in…",null,null],[11,"from","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"eq","","",0,[[["level",4]]]],[11,"eq","","",0,[[["levelfilter",4]]]],[11,"eq","","",1,[[["levelfilter",4]]]],[11,"eq","","",1,[[["level",4]]]],[11,"eq","","",5,[[["metadata",3]]]],[11,"ne","","",5,[[["metadata",3]]]],[11,"eq","","",6,[[["metadatabuilder",3]]]],[11,"ne","","",6,[[["metadatabuilder",3]]]],[11,"eq","","",8,[[["parselevelerror",3]]]],[11,"ne","","",8,[[["parselevelerror",3]]]],[11,"cmp","","",0,[[["level",4]],["ordering",4]]],[11,"cmp","","",1,[[["levelfilter",4]],["ordering",4]]],[11,"cmp","","",5,[[["metadata",3]],["ordering",4]]],[11,"cmp","","",6,[[["metadatabuilder",3]],["ordering",4]]],[11,"partial_cmp","","",0,[[["level",4]],[["ordering",4],["option",4]]]],[11,"lt","","",0,[[["level",4]]]],[11,"le","","",0,[[["level",4]]]],[11,"gt","","",0,[[["level",4]]]],[11,"ge","","",0,[[["level",4]]]],[11,"partial_cmp","","",0,[[["levelfilter",4]],[["ordering",4],["option",4]]]],[11,"lt","","",0,[[["levelfilter",4]]]],[11,"le","","",0,[[["levelfilter",4]]]],[11,"gt","","",0,[[["levelfilter",4]]]],[11,"ge","","",0,[[["levelfilter",4]]]],[11,"partial_cmp","","",1,[[["levelfilter",4]],[["ordering",4],["option",4]]]],[11,"lt","","",1,[[["levelfilter",4]]]],[11,"le","","",1,[[["levelfilter",4]]]],[11,"gt","","",1,[[["levelfilter",4]]]],[11,"ge","","",1,[[["levelfilter",4]]]],[11,"partial_cmp","","",1,[[["level",4]],[["ordering",4],["option",4]]]],[11,"lt","","",1,[[["level",4]]]],[11,"le","","",1,[[["level",4]]]],[11,"gt","","",1,[[["level",4]]]],[11,"ge","","",1,[[["level",4]]]],[11,"partial_cmp","","",5,[[["metadata",3]],[["ordering",4],["option",4]]]],[11,"lt","","",5,[[["metadata",3]]]],[11,"le","","",5,[[["metadata",3]]]],[11,"gt","","",5,[[["metadata",3]]]],[11,"ge","","",5,[[["metadata",3]]]],[11,"partial_cmp","","",6,[[["metadatabuilder",3]],[["ordering",4],["option",4]]]],[11,"lt","","",6,[[["metadatabuilder",3]]]],[11,"le","","",6,[[["metadatabuilder",3]]]],[11,"gt","","",6,[[["metadatabuilder",3]]]],[11,"ge","","",6,[[["metadatabuilder",3]]]],[11,"hash","","",0,[[]]],[11,"hash","","",1,[[]]],[11,"hash","","",5,[[]]],[11,"hash","","",6,[[]]],[11,"from_str","","",0,[[],[["level",4],["result",4]]]],[11,"from_str","","",1,[[],[["levelfilter",4],["result",4]]]],[11,"clone","","",0,[[],["level",4]]],[11,"clone","","",1,[[],["levelfilter",4]]],[11,"clone","","",3,[[],["record",3]]],[11,"clone","","",5,[[],["metadata",3]]]],"p":[[4,"Level"],[4,"LevelFilter"],[8,"Log"],[3,"Record"],[3,"RecordBuilder"],[3,"Metadata"],[3,"MetadataBuilder"],[3,"SetLoggerError"],[3,"ParseLevelError"]]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","i":[[3,"Complex","num","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",1,[[]]],[10,"mod_floor","","Floored integer modulo, satisfying:",1,[[]]],[10,"gcd","","Greatest Common Divisor (GCD).",1,[[]]],[10,"lcm","","Lowest Common Multiple (LCM).",1,[[]]],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,[[]]],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",1,[[]]],[10,"is_even","","Returns `true` if the number is even.",1,[[]]],[10,"is_odd","","Returns `true` if the number is odd.",1,[[]]],[10,"div_rem","","Simultaneous truncated integer division and modulus.…",1,[[]]],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns…",1,[[]]],[5,"range","","Returns an iterator over the given range [start, stop)…",null,[[],["range",3]]],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,[[],["rangeinclusive",3]]],[5,"range_step","","Return an iterator over the range [start, stop) by `step`.…",null,[[],["rangestep",3]]],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`.…",null,[[],["rangestepinclusive",3]]],[8,"Num","","The base trait for numeric types, covering `0` and `1`…",null,null],[16,"FromStrRadixErr","","",2,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",2,[[],["result",4]]],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,[[]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,[[]]],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,[[]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative…",4,[[]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can…",null,null],[10,"abs","","Computes the absolute value.",5,[[]]],[10,"abs_sub","","The positive difference of two numbers.",5,[[]]],[10,"signum","","Returns the sign of the number.",5,[[]]],[10,"is_positive","","Returns true if the number is positive and false if the…",5,[[]]],[10,"is_negative","","Returns true if the number is negative and false if the…",5,[[]]],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",6,[[]]],[10,"max_value","","returns the largest finite number this type can represent",6,[[]]],[5,"one","","Returns the multiplicative identity, `1`.",null,[[]]],[5,"zero","","Returns the additive identity, `0`.",null,[[]]],[5,"abs","","Computes the absolute value.",null,[[]]],[5,"abs_sub","","The positive difference of two numbers.",null,[[]]],[5,"signum","","Returns the sign of the number.",null,[[]]],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at…",7,[[]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating…",7,[[]]],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping…",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow…",8,[[],["option",4]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of…",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If…",9,[[],["option",4]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of…",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or…",10,[[],["option",4]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking…",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and…",11,[[],["option",4]]],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of…",12,[[]]],[10,"count_zeros","","Returns the number of zeros in the binary representation…",12,[[]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary…",12,[[]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary…",12,[[]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount,…",12,[[]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount,…",12,[[]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount,…",12,[[]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount,…",12,[[]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount,…",12,[[]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount,…",12,[[]]],[10,"swap_bytes","","Reverses the byte order of the integer.",12,[[]]],[10,"from_be","","Convert an integer from big endian to the target's…",12,[[]]],[10,"from_le","","Convert an integer from little endian to the target's…",12,[[]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",12,[[]]],[10,"to_le","","Convert `self` to little endian from the target's…",12,[[]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by…",12,[[]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,[[],["option",4]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,[[],["option",4]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,[[],["option",4]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,[[],["option",4]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,[[],["option",4]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",13,[[],["option",4]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,[[],["option",4]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,[[],["option",4]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,[[],["option",4]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,[[],["option",4]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,[[],["option",4]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",13,[[],["option",4]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,[[],["option",4]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,[[],["option",4]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this…",14,[[],["option",4]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type.…",14,[[],["option",4]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type.…",14,[[],["option",4]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type.…",14,[[],["option",4]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type.…",14,[[],["option",4]]],[11,"from_i128","","Convert an `i128` to return an optional value of this…",14,[[],["option",4]]],[11,"from_usize","","Convert a `usize` to return an optional value of this…",14,[[],["option",4]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type.…",14,[[],["option",4]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type.…",14,[[],["option",4]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type.…",14,[[],["option",4]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type.…",14,[[],["option",4]]],[11,"from_u128","","Convert an `u128` to return an optional value of this…",14,[[],["option",4]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type.…",14,[[],["option",4]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type.…",14,[[],["option",4]]],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted…",15,[[],["option",4]]],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,[[],["option",4]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,[[],["option",4]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,[[],["option",4]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,[[],["option",4]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,[[],["option",4]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",13,[[],["option",4]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,[[],["option",4]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,[[],["option",4]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,[[],["option",4]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,[[],["option",4]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,[[],["option",4]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",13,[[],["option",4]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,[[],["option",4]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,[[],["option",4]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this…",14,[[],["option",4]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type.…",14,[[],["option",4]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type.…",14,[[],["option",4]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type.…",14,[[],["option",4]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type.…",14,[[],["option",4]]],[11,"from_i128","","Convert an `i128` to return an optional value of this…",14,[[],["option",4]]],[11,"from_usize","","Convert a `usize` to return an optional value of this…",14,[[],["option",4]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type.…",14,[[],["option",4]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type.…",14,[[],["option",4]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type.…",14,[[],["option",4]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type.…",14,[[],["option",4]]],[11,"from_u128","","Convert an `u128` to return an optional value of this…",14,[[],["option",4]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type.…",14,[[],["option",4]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type.…",14,[[],["option",4]]],[5,"cast","","Cast from one machine scalar to another.",null,[[],["option",4]]],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted…",15,[[],["option",4]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars…",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",16,[[]]],[5,"cast","num","Cast from one machine scalar to another.",null,[[],["option",4]]],[0,"pow","","",null,null],[8,"Pow","num::pow","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",17,null],[10,"pow","","Returns `self` to the power `rhs`.",17,[[]]],[5,"pow","","Raises a value to the power of exp, using exponentiation…",null,[[]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an…",null,[[],["option",4]]],[5,"pow","num","Raises a value to the power of exp, using exponentiation…",null,[[]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an…",null,[[],["option",4]]],[5,"clamp","","A value bounded by a minimum and a maximum",null,[[]]],[0,"complex","","",null,null],[3,"Complex","num::complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[3,"ParseComplexError","","",null,null],[0,"integer","num","",null,null],[8,"Integer","num::integer","",null,null],[10,"div_floor","","Floored integer division.",1,[[]]],[10,"mod_floor","","Floored integer modulo, satisfying:",1,[[]]],[10,"gcd","","Greatest Common Divisor (GCD).",1,[[]]],[10,"lcm","","Lowest Common Multiple (LCM).",1,[[]]],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,[[]]],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",1,[[]]],[10,"is_even","","Returns `true` if the number is even.",1,[[]]],[10,"is_odd","","Returns `true` if the number is odd.",1,[[]]],[10,"div_rem","","Simultaneous truncated integer division and modulus.…",1,[[]]],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns…",1,[[]]],[5,"div_rem","","Simultaneous integer division and modulus",null,[[]]],[5,"div_floor","","Floored integer division",null,[[]]],[5,"mod_floor","","Floored integer modulus",null,[[]]],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,[[]]],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number…",null,[[]]],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number…",null,[[]]],[3,"IterBinomial","","An iterator over binomial coefficients.",null,null],[5,"binomial","","Calculate the binomial coefficient.",null,[[]]],[5,"multinomial","","Calculate the multinomial coefficient.",null,[[]]],[8,"Roots","","Provides methods to compute an integer's square root, cube…",null,null],[10,"nth_root","","Returns the truncated principal `n`th root of an integer…",18,[[]]],[11,"sqrt","","Returns the truncated principal square root of an integer…",18,[[]]],[11,"cbrt","","Returns the truncated principal cube root of an integer --…",18,[[]]],[5,"sqrt","","Returns the truncated principal square root of an integer…",null,[[]]],[5,"cbrt","","Returns the truncated principal cube root of an integer --…",null,[[]]],[5,"nth_root","","Returns the truncated principal `n`th root of an integer…",null,[[]]],[0,"iter","num","",null,null],[3,"Range","num::iter","An iterator over the range [start, stop)",null,null],[5,"range","","Returns an iterator over the given range [start, stop)…",null,[[],["range",3]]],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,[[],["rangeinclusive",3]]],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It…",null,null],[5,"range_step","","Return an iterator over the range [start, stop) by `step`.…",null,[[],["rangestep",3]]],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It…",null,null],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`.…",null,[[],["rangestepinclusive",3]]],[0,"traits","num","",null,null],[0,"bounds","num::traits","",null,null],[8,"Bounded","num::traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",6,[[]]],[10,"max_value","","returns the largest finite number this type can represent",6,[[]]],[0,"cast","num::traits","",null,null],[8,"ToPrimitive","num::traits::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,[[],["option",4]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,[[],["option",4]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,[[],["option",4]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,[[],["option",4]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,[[],["option",4]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",13,[[],["option",4]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,[[],["option",4]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,[[],["option",4]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,[[],["option",4]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,[[],["option",4]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,[[],["option",4]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",13,[[],["option",4]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,[[],["option",4]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,[[],["option",4]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this…",14,[[],["option",4]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type.…",14,[[],["option",4]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type.…",14,[[],["option",4]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type.…",14,[[],["option",4]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type.…",14,[[],["option",4]]],[11,"from_i128","","Convert an `i128` to return an optional value of this…",14,[[],["option",4]]],[11,"from_usize","","Convert a `usize` to return an optional value of this…",14,[[],["option",4]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type.…",14,[[],["option",4]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type.…",14,[[],["option",4]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type.…",14,[[],["option",4]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type.…",14,[[],["option",4]]],[11,"from_u128","","Convert an `u128` to return an optional value of this…",14,[[],["option",4]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type.…",14,[[],["option",4]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type.…",14,[[],["option",4]]],[5,"cast","","Cast from one machine scalar to another.",null,[[],["option",4]]],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted…",15,[[],["option",4]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars…",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",16,[[]]],[0,"float","num::traits","",null,null],[8,"FloatCore","num::traits::float","Generic trait for floating point numbers that works with…",null,null],[10,"infinity","","Returns positive infinity.",19,[[]]],[10,"neg_infinity","","Returns negative infinity.",19,[[]]],[10,"nan","","Returns NaN.",19,[[]]],[10,"neg_zero","","Returns `-0.0`.",19,[[]]],[10,"min_value","","Returns the smallest finite value that this type can…",19,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",19,[[]]],[10,"epsilon","","Returns epsilon, a small positive value.",19,[[]]],[10,"max_value","","Returns the largest finite value that this type can…",19,[[]]],[11,"is_nan","","Returns `true` if the number is NaN.",19,[[]]],[11,"is_infinite","","Returns `true` if the number is infinite.",19,[[]]],[11,"is_finite","","Returns `true` if the number is neither infinite or NaN.",19,[[]]],[11,"is_normal","","Returns `true` if the number is neither zero, infinite,…",19,[[]]],[10,"classify","","Returns the floating point category of the number. If only…",19,[[],["fpcategory",4]]],[11,"floor","","Returns the largest integer less than or equal to a number.",19,[[]]],[11,"ceil","","Returns the smallest integer greater than or equal to a…",19,[[]]],[11,"round","","Returns the nearest integer to a number. Round half-way…",19,[[]]],[11,"trunc","","Return the integer part of a number.",19,[[]]],[11,"fract","","Returns the fractional part of a number.",19,[[]]],[11,"abs","","Computes the absolute value of `self`. Returns…",19,[[]]],[11,"signum","","Returns a number that represents the sign of `self`.",19,[[]]],[11,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and…",19,[[]]],[11,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and…",19,[[]]],[11,"min","","Returns the minimum of the two numbers.",19,[[]]],[11,"max","","Returns the maximum of the two numbers.",19,[[]]],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the…",19,[[]]],[11,"powi","","Raise a number to an integer power.",19,[[]]],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",19,[[]]],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",19,[[]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as…",19,[[]]],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",20,[[]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",20,[[]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",20,[[]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",20,[[]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",20,[[]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",20,[[]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",20,[[]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",20,[[]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",20,[[]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",20,[[]]],[10,"LN_10","","Return `ln(10.0)`.",20,[[]]],[10,"LN_2","","Return `ln(2.0)`.",20,[[]]],[10,"LOG10_E","","Return `log10(e)`.",20,[[]]],[10,"LOG2_E","","Return `log2(e)`.",20,[[]]],[10,"PI","","Return Archimedes’ constant.",20,[[]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",20,[[]]],[0,"identities","num::traits","",null,null],[8,"Zero","num::traits::identities","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,[[]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,[[]]],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,[[]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative…",4,[[]]],[5,"zero","","Returns the additive identity, `0`.",null,[[]]],[5,"one","","Returns the multiplicative identity, `1`.",null,[[]]],[0,"int","num::traits","",null,null],[8,"PrimInt","num::traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of…",12,[[]]],[10,"count_zeros","","Returns the number of zeros in the binary representation…",12,[[]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary…",12,[[]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary…",12,[[]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount,…",12,[[]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount,…",12,[[]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount,…",12,[[]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount,…",12,[[]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount,…",12,[[]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount,…",12,[[]]],[10,"swap_bytes","","Reverses the byte order of the integer.",12,[[]]],[10,"from_be","","Convert an integer from big endian to the target's…",12,[[]]],[10,"from_le","","Convert an integer from little endian to the target's…",12,[[]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",12,[[]]],[10,"to_le","","Convert `self` to little endian from the target's…",12,[[]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by…",12,[[]]],[0,"ops","num::traits","",null,null],[0,"checked","num::traits::ops","",null,null],[8,"CheckedAdd","num::traits::ops::checked","Performs addition that returns `None` instead of wrapping…",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow…",8,[[],["option",4]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of…",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If…",9,[[],["option",4]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of…",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or…",10,[[],["option",4]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking…",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and…",11,[[],["option",4]]],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead…",null,null],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for…",21,[[],["option",4]]],[8,"CheckedNeg","","Performs negation that returns `None` if the result can't…",null,null],[10,"checked_neg","","Negates a number, returning `None` for results that can't…",22,[[],["option",4]]],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",null,null],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If…",23,[[],["option",4]]],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",null,null],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If…",24,[[],["option",4]]],[0,"inv","num::traits::ops","",null,null],[8,"Inv","num::traits::ops::inv","Unary operator for retrieving the multiplicative inverse,…",null,null],[16,"Output","","The result after applying the operator.",25,null],[10,"inv","","Returns the multiplicative inverse of `self`.",25,[[]]],[0,"mul_add","num::traits::ops","",null,null],[8,"MulAdd","num::traits::ops::mul_add","Fused multiply-add. Computes `(self * a) + b` with only…",null,null],[16,"Output","","The resulting type after applying the fused multiply-add.",26,null],[10,"mul_add","","Performs the fused multiply-add operation.",26,[[]]],[8,"MulAddAssign","","The fused multiply-add assignment operation.",null,null],[10,"mul_add_assign","","Performs the fused multiply-add operation.",27,[[]]],[0,"saturating","num::traits::ops","",null,null],[8,"Saturating","num::traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at…",7,[[]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating…",7,[[]]],[0,"wrapping","num::traits::ops","",null,null],[8,"WrappingAdd","num::traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`,…",28,[[]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`,…",29,[[]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self *…",30,[[]]],[8,"WrappingShl","","Performs a left shift that does not panic.",null,null],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`,…",31,[[]]],[8,"WrappingShr","","Performs a right shift that does not panic.",null,null],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >>…",32,[[]]],[0,"pow","num::traits","",null,null],[8,"Pow","num::traits::pow","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",17,null],[10,"pow","","Returns `self` to the power `rhs`.",17,[[]]],[5,"pow","","Raises a value to the power of exp, using exponentiation…",null,[[]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an…",null,[[],["option",4]]],[0,"sign","num::traits","",null,null],[8,"Signed","num::traits::sign","Useful functions for signed numbers (i.e. numbers that can…",null,null],[10,"abs","","Computes the absolute value.",5,[[]]],[10,"abs_sub","","The positive difference of two numbers.",5,[[]]],[10,"signum","","Returns the sign of the number.",5,[[]]],[10,"is_positive","","Returns true if the number is positive and false if the…",5,[[]]],[10,"is_negative","","Returns true if the number is negative and false if the…",5,[[]]],[5,"abs","","Computes the absolute value.",null,[[]]],[5,"abs_sub","","The positive difference of two numbers.",null,[[]]],[5,"signum","","Returns the sign of the number.",null,[[]]],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Num","num::traits","The base trait for numeric types, covering `0` and `1`…",null,null],[16,"FromStrRadixErr","","",2,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",2,[[],["result",4]]],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric…",null,null],[8,"RefNum","","The trait for references which implement numeric…",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment…",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment…",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement…",null,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",33,null],[13,"Invalid","","",33,null],[3,"ParseFloatError","","",null,null],[12,"kind","","",34,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,[[]]],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",6,[[]]],[10,"max_value","","returns the largest finite number this type can represent",6,[[]]],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",20,[[]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",20,[[]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",20,[[]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",20,[[]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",20,[[]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",20,[[]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",20,[[]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",20,[[]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",20,[[]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",20,[[]]],[10,"LN_10","","Return `ln(10.0)`.",20,[[]]],[10,"LN_2","","Return `ln(2.0)`.",20,[[]]],[10,"LOG10_E","","Return `log10(e)`.",20,[[]]],[10,"LOG2_E","","Return `log2(e)`.",20,[[]]],[10,"PI","","Return Archimedes’ constant.",20,[[]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",20,[[]]],[5,"cast","","Cast from one machine scalar to another.",null,[[],["option",4]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars…",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",16,[[]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this…",14,[[],["option",4]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type.…",14,[[],["option",4]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type.…",14,[[],["option",4]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type.…",14,[[],["option",4]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type.…",14,[[],["option",4]]],[11,"from_i128","","Convert an `i128` to return an optional value of this…",14,[[],["option",4]]],[11,"from_usize","","Convert a `usize` to return an optional value of this…",14,[[],["option",4]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type.…",14,[[],["option",4]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type.…",14,[[],["option",4]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type.…",14,[[],["option",4]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type.…",14,[[],["option",4]]],[11,"from_u128","","Convert an `u128` to return an optional value of this…",14,[[],["option",4]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type.…",14,[[],["option",4]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type.…",14,[[],["option",4]]],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted…",15,[[],["option",4]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,[[],["option",4]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,[[],["option",4]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,[[],["option",4]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,[[],["option",4]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,[[],["option",4]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",13,[[],["option",4]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,[[],["option",4]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,[[],["option",4]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,[[],["option",4]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,[[],["option",4]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,[[],["option",4]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",13,[[],["option",4]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,[[],["option",4]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,[[],["option",4]]],[5,"one","","Returns the multiplicative identity, `1`.",null,[[]]],[5,"zero","","Returns the additive identity, `0`.",null,[[]]],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,[[]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative…",4,[[]]],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,[[]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,[[]]],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of…",12,[[]]],[10,"count_zeros","","Returns the number of zeros in the binary representation…",12,[[]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary…",12,[[]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary…",12,[[]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount,…",12,[[]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount,…",12,[[]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount,…",12,[[]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount,…",12,[[]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount,…",12,[[]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount,…",12,[[]]],[10,"swap_bytes","","Reverses the byte order of the integer.",12,[[]]],[10,"from_be","","Convert an integer from big endian to the target's…",12,[[]]],[10,"from_le","","Convert an integer from little endian to the target's…",12,[[]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",12,[[]]],[10,"to_le","","Convert `self` to little endian from the target's…",12,[[]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by…",12,[[]]],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping…",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow…",8,[[],["option",4]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking…",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and…",11,[[],["option",4]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of…",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or…",10,[[],["option",4]]],[8,"CheckedNeg","","Performs negation that returns `None` if the result can't…",null,null],[10,"checked_neg","","Negates a number, returning `None` for results that can't…",22,[[],["option",4]]],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead…",null,null],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for…",21,[[],["option",4]]],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",null,null],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If…",23,[[],["option",4]]],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",null,null],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If…",24,[[],["option",4]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of…",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If…",9,[[],["option",4]]],[8,"Inv","","Unary operator for retrieving the multiplicative inverse,…",null,null],[16,"Output","","The result after applying the operator.",25,null],[10,"inv","","Returns the multiplicative inverse of `self`.",25,[[]]],[8,"MulAdd","","Fused multiply-add. Computes `(self * a) + b` with only…",null,null],[16,"Output","","The resulting type after applying the fused multiply-add.",26,null],[10,"mul_add","","Performs the fused multiply-add operation.",26,[[]]],[8,"MulAddAssign","","The fused multiply-add assignment operation.",null,null],[10,"mul_add_assign","","Performs the fused multiply-add operation.",27,[[]]],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at…",7,[[]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating…",7,[[]]],[8,"WrappingAdd","","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`,…",28,[[]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self *…",30,[[]]],[8,"WrappingShl","","Performs a left shift that does not panic.",null,null],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`,…",31,[[]]],[8,"WrappingShr","","Performs a right shift that does not panic.",null,null],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >>…",32,[[]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`,…",29,[[]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an…",null,[[],["option",4]]],[5,"pow","","Raises a value to the power of exp, using exponentiation…",null,[[]]],[8,"Pow","","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",17,null],[10,"pow","","Returns `self` to the power `rhs`.",17,[[]]],[5,"abs","","Computes the absolute value.",null,[[]]],[5,"abs_sub","","The positive difference of two numbers.",null,[[]]],[5,"signum","","Returns the sign of the number.",null,[[]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can…",null,null],[10,"abs","","Computes the absolute value.",5,[[]]],[10,"abs_sub","","The positive difference of two numbers.",5,[[]]],[10,"signum","","Returns the sign of the number.",5,[[]]],[10,"is_positive","","Returns true if the number is positive and false if the…",5,[[]]],[10,"is_negative","","Returns true if the number is negative and false if the…",5,[[]]],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"rational","num","",null,null],[3,"Ratio","num::rational","Represents the ratio between two numbers.",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","Alias for a `Ratio` of 32-bit-sized integers.",null,null],[6,"Rational64","","Alias for a `Ratio` of 64-bit-sized integers.",null,null],[3,"ParseRatioError","","",null,null],[11,"from","num::complex","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"into","","",35,[[]]],[11,"try_into","","",35,[[],["result",4]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"from","num::integer","",36,[[]]],[11,"into_iter","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"into","","",36,[[]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from","num::iter","",37,[[]]],[11,"into_iter","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"into","","",37,[[]]],[11,"try_into","","",37,[[],["result",4]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","","",38,[[]]],[11,"into_iter","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"into","","",38,[[]]],[11,"try_into","","",38,[[],["result",4]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"from","","",39,[[]]],[11,"into_iter","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"into","","",39,[[]]],[11,"try_into","","",39,[[],["result",4]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","","",40,[[]]],[11,"into_iter","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"into","","",40,[[]]],[11,"try_into","","",40,[[],["result",4]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"from","num::traits","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"into","","",33,[[]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"into","","",34,[[]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"from","num::rational","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"into","","",41,[[]]],[11,"try_into","","",41,[[],["result",4]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"from","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"into","","",42,[[]]],[11,"try_into","","",42,[[],["result",4]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"default","num::complex","",0,[[],["complex",3]]],[11,"fmt","","",0,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",35,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",0,[[["formatter",3]],[["error",3],["result",4]]]],[11,"sub_assign","","",0,[[]]],[11,"sub_assign","","",0,[[]]],[11,"sub_assign","","",0,[[["complex",3]]]],[11,"sub_assign","","",0,[[["complex",3]]]],[11,"rem_assign","","",0,[[["complex",3]]]],[11,"rem_assign","","",0,[[]]],[11,"rem_assign","","",0,[[]]],[11,"rem_assign","","",0,[[["complex",3]]]],[11,"fmt","","",0,[[["formatter",3]],[["error",3],["result",4]]]],[11,"mul_assign","","",0,[[["complex",3]]]],[11,"mul_assign","","",0,[[["complex",3]]]],[11,"mul_assign","","",0,[[]]],[11,"mul_assign","","",0,[[]]],[11,"neg","","",0,[[],["complex",3]]],[11,"fmt","","",0,[[["formatter",3]],[["error",3],["result",4]]]],[11,"from_usize","","",0,[[],[["option",4],["complex",3]]]],[11,"from_isize","","",0,[[],[["option",4],["complex",3]]]],[11,"from_u8","","",0,[[],[["option",4],["complex",3]]]],[11,"from_u16","","",0,[[],[["option",4],["complex",3]]]],[11,"from_u32","","",0,[[],[["option",4],["complex",3]]]],[11,"from_u64","","",0,[[],[["option",4],["complex",3]]]],[11,"from_i8","","",0,[[],[["option",4],["complex",3]]]],[11,"from_i16","","",0,[[],[["option",4],["complex",3]]]],[11,"from_i32","","",0,[[],[["option",4],["complex",3]]]],[11,"from_i64","","",0,[[],[["option",4],["complex",3]]]],[11,"from_u128","","",0,[[],[["option",4],["complex",3]]]],[11,"from_i128","","",0,[[],[["option",4],["complex",3]]]],[11,"from_f32","","",0,[[],[["option",4],["complex",3]]]],[11,"from_f64","","",0,[[],[["option",4],["complex",3]]]],[11,"div","","",0,[[["complex",3]],["complex",3]]],[11,"div","","",0,[[],["complex",3]]],[11,"div","","",0,[[["complex",3]],["complex",3]]],[11,"div","","",0,[[],["complex",3]]],[11,"from","","",0,[[],["complex",3]]],[11,"from","","",0,[[],["complex",3]]],[11,"zero","","",0,[[],["complex",3]]],[11,"is_zero","","",0,[[]]],[11,"as_","","",0,[[]]],[11,"add","","",0,[[["complex",3]],["complex",3]]],[11,"add","","",0,[[],["complex",3]]],[11,"add","","",0,[[],["complex",3]]],[11,"add","","",0,[[["complex",3]],["complex",3]]],[11,"hash","","",0,[[]]],[11,"eq","","",35,[[["parsecomplexerror",3]]]],[11,"ne","","",35,[[["parsecomplexerror",3]]]],[11,"eq","","",0,[[["complex",3]]]],[11,"ne","","",0,[[["complex",3]]]],[11,"fmt","","",0,[[["formatter",3]],[["error",3],["result",4]]]],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and…",0,[[],[["result",4],["complex",3]]]],[11,"div_assign","","",0,[[]]],[11,"div_assign","","",0,[[["complex",3]]]],[11,"div_assign","","",0,[[["complex",3]]]],[11,"div_assign","","",0,[[]]],[11,"sum","","",0,[[],["complex",3]]],[11,"sum","","",0,[[],["complex",3]]],[11,"from","","",0,[[],[["option",4],["complex",3]]]],[11,"to_usize","","",0,[[],["option",4]]],[11,"to_isize","","",0,[[],["option",4]]],[11,"to_u8","","",0,[[],["option",4]]],[11,"to_u16","","",0,[[],["option",4]]],[11,"to_u32","","",0,[[],["option",4]]],[11,"to_u64","","",0,[[],["option",4]]],[11,"to_i8","","",0,[[],["option",4]]],[11,"to_i16","","",0,[[],["option",4]]],[11,"to_i32","","",0,[[],["option",4]]],[11,"to_i64","","",0,[[],["option",4]]],[11,"to_u128","","",0,[[],["option",4]]],[11,"to_i128","","",0,[[],["option",4]]],[11,"to_f32","","",0,[[],["option",4]]],[11,"to_f64","","",0,[[],["option",4]]],[11,"product","","",0,[[],["complex",3]]],[11,"product","","",0,[[],["complex",3]]],[11,"clone","","",0,[[],["complex",3]]],[11,"sub","","",0,[[["complex",3]],["complex",3]]],[11,"sub","","",0,[[["complex",3]],["complex",3]]],[11,"sub","","",0,[[],["complex",3]]],[11,"sub","","",0,[[],["complex",3]]],[11,"fmt","","",0,[[["formatter",3]],[["error",3],["result",4]]]],[11,"from_str_radix","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and…",0,[[],[["result",4],["complex",3]]]],[11,"fmt","","",35,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",0,[[["formatter",3]],[["error",3],["result",4]]]],[11,"one","","",0,[[],["complex",3]]],[11,"is_one","","",0,[[]]],[11,"add_assign","","",0,[[["complex",3]]]],[11,"add_assign","","",0,[[["complex",3]]]],[11,"add_assign","","",0,[[]]],[11,"add_assign","","",0,[[]]],[11,"rem","","",0,[[],["complex",3]]],[11,"rem","","",0,[[],["complex",3]]],[11,"rem","","",0,[[["complex",3]],["complex",3]]],[11,"rem","","",0,[[["complex",3]],["complex",3]]],[11,"inv","","",0,[[],["complex",3]]],[11,"fmt","","",0,[[["formatter",3]],[["error",3],["result",4]]]],[11,"mul","","",0,[[["complex",3]],["complex",3]]],[11,"mul","","",0,[[],["complex",3]]],[11,"mul","","",0,[[["complex",3]],["complex",3]]],[11,"mul","","",0,[[],["complex",3]]],[11,"fmt","num::traits","",34,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",34,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",33,[[["formatter",3]],[["error",3],["result",4]]]],[11,"next","num::integer","",36,[[],["option",4]]],[11,"clone","num::iter","",40,[[],["rangestepinclusive",3]]],[11,"clone","","",37,[[],["range",3]]],[11,"clone","","",38,[[],["rangeinclusive",3]]],[11,"clone","","",39,[[],["rangestep",3]]],[11,"next","","",38,[[],["option",4]]],[11,"size_hint","","",38,[[]]],[11,"next","","",37,[[],["option",4]]],[11,"size_hint","","",37,[[]]],[11,"next","","",39,[[],["option",4]]],[11,"next","","",40,[[],["option",4]]],[11,"next_back","","",38,[[],["option",4]]],[11,"next_back","","",37,[[],["option",4]]],[11,"checked_mul","num::rational","",41,[[["ratio",3]],[["ratio",3],["option",4]]]],[11,"rem_assign","","",41,[[]]],[11,"rem_assign","","",41,[[["ratio",3]]]],[11,"rem_assign","","",41,[[]]],[11,"rem_assign","","",41,[[["ratio",3]]]],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",41,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",42,[[["formatter",3]],[["error",3],["result",4]]]],[11,"sub_assign","","",41,[[]]],[11,"sub_assign","","",41,[[["ratio",3]]]],[11,"sub_assign","","",41,[[["ratio",3]]]],[11,"sub_assign","","",41,[[]]],[11,"mul_assign","","",41,[[["ratio",3]]]],[11,"mul_assign","","",41,[[["ratio",3]]]],[11,"mul_assign","","",41,[[]]],[11,"mul_assign","","",41,[[]]],[11,"abs","","",41,[[],["ratio",3]]],[11,"abs_sub","","",41,[[["ratio",3]],["ratio",3]]],[11,"signum","","",41,[[],["ratio",3]]],[11,"is_positive","","",41,[[]]],[11,"is_negative","","",41,[[]]],[11,"neg","","",41,[[],["ratio",3]]],[11,"from_i64","","",41,[[],[["ratio",3],["option",4]]]],[11,"from_i128","","",41,[[],[["ratio",3],["option",4]]]],[11,"from_u64","","",41,[[],[["ratio",3],["option",4]]]],[11,"from_u128","","",41,[[],[["ratio",3],["option",4]]]],[11,"from_f32","","",41,[[],[["ratio",3],["option",4]]]],[11,"from_f64","","",41,[[],[["ratio",3],["option",4]]]],[11,"from_i64","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_i128","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_u64","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_u128","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_f32","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_f64","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_i64","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_i128","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_u64","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_u128","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_f32","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_f64","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_i64","","",41,[[],[["ratio",3],["option",4]]]],[11,"from_i128","","",41,[[],[["ratio",3],["option",4]]]],[11,"from_u64","","",41,[[],[["ratio",3],["option",4]]]],[11,"from_u128","","",41,[[],[["ratio",3],["option",4]]]],[11,"from_f32","","",41,[[],[["ratio",3],["option",4]]]],[11,"from_f64","","",41,[[],[["ratio",3],["option",4]]]],[11,"from_i64","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_i128","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_u64","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_u128","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_f32","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_f64","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_i64","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_i128","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_u64","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_u128","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_f32","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_f64","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_i64","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_i128","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_u64","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_u128","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_f32","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_f64","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_i64","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_i128","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_u64","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_u128","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_f32","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_f64","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_i64","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_i128","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_u64","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_u128","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_f32","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_f64","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_i64","","",41,[[],[["ratio",3],["option",4]]]],[11,"from_i128","","",41,[[],[["ratio",3],["option",4]]]],[11,"from_u64","","",41,[[],[["ratio",3],["option",4]]]],[11,"from_u128","","",41,[[],[["ratio",3],["option",4]]]],[11,"from_f32","","",41,[[],[["ratio",3],["option",4]]]],[11,"from_f64","","",41,[[],[["ratio",3],["option",4]]]],[11,"from_i64","","",41,[[],[["ratio",3],["option",4]]]],[11,"from_i128","","",41,[[],[["ratio",3],["option",4]]]],[11,"from_u64","","",41,[[],[["ratio",3],["option",4]]]],[11,"from_u128","","",41,[[],[["ratio",3],["option",4]]]],[11,"from_f32","","",41,[[],[["ratio",3],["option",4]]]],[11,"from_f64","","",41,[[],[["ratio",3],["option",4]]]],[11,"from_i64","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_i128","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_u64","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_u128","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_f32","","",41,[[],[["option",4],["ratio",3]]]],[11,"from_f64","","",41,[[],[["option",4],["ratio",3]]]],[11,"div","","",41,[[["ratio",3]],["ratio",3]]],[11,"div","","",41,[[],["ratio",3]]],[11,"div","","",41,[[["ratio",3]],["ratio",3]]],[11,"div","","",41,[[],["ratio",3]]],[11,"pow","","",41,[[],["ratio",3]]],[11,"pow","","",41,[[],["ratio",3]]],[11,"pow","","",41,[[],["ratio",3]]],[11,"pow","","",41,[[],["ratio",3]]],[11,"pow","","",41,[[],["ratio",3]]],[11,"pow","","",41,[[],["ratio",3]]],[11,"pow","","",41,[[],["ratio",3]]],[11,"pow","","",41,[[],["ratio",3]]],[11,"pow","","",41,[[],["ratio",3]]],[11,"pow","","",41,[[],["ratio",3]]],[11,"pow","","",41,[[],["ratio",3]]],[11,"pow","","",41,[[],["ratio",3]]],[11,"pow","","",41,[[],["ratio",3]]],[11,"pow","","",41,[[],["ratio",3]]],[11,"pow","","",41,[[],["ratio",3]]],[11,"pow","","",41,[[],["ratio",3]]],[11,"pow","","",41,[[],["ratio",3]]],[11,"pow","","",41,[[],["ratio",3]]],[11,"pow","","",41,[[],["ratio",3]]],[11,"pow","","",41,[[],["ratio",3]]],[11,"from","","",41,[[],["ratio",3]]],[11,"from","","",41,[[],["ratio",3]]],[11,"zero","","",41,[[],["ratio",3]]],[11,"is_zero","","",41,[[]]],[11,"into","","",41,[[]]],[11,"add","","",41,[[["ratio",3]],["ratio",3]]],[11,"add","","",41,[[["ratio",3]],["ratio",3]]],[11,"add","","",41,[[],["ratio",3]]],[11,"add","","",41,[[],["ratio",3]]],[11,"hash","","",41,[[]]],[11,"checked_add","","",41,[[["ratio",3]],[["ratio",3],["option",4]]]],[11,"eq","","",41,[[["ratio",3]]]],[11,"eq","","",42,[[["parseratioerror",3]]]],[11,"ne","","",42,[[["parseratioerror",3]]]],[11,"from_str","","Parses `numer/denom` or just `numer`.",41,[[],[["parseratioerror",3],["result",4],["ratio",3]]]],[11,"div_assign","","",41,[[["ratio",3]]]],[11,"div_assign","","",41,[[]]],[11,"div_assign","","",41,[[["ratio",3]]]],[11,"div_assign","","",41,[[]]],[11,"checked_sub","","",41,[[["ratio",3]],[["ratio",3],["option",4]]]],[11,"sum","","",41,[[],["ratio",3]]],[11,"sum","","",41,[[],["ratio",3]]],[11,"product","","",41,[[],["ratio",3]]],[11,"product","","",41,[[],["ratio",3]]],[11,"partial_cmp","","",41,[[["ratio",3]],[["option",4],["ordering",4]]]],[11,"clone","","",42,[[],["parseratioerror",3]]],[11,"clone","","",41,[[],["ratio",3]]],[11,"sub","","",41,[[["ratio",3]],["ratio",3]]],[11,"sub","","",41,[[],["ratio",3]]],[11,"sub","","",41,[[],["ratio",3]]],[11,"sub","","",41,[[["ratio",3]],["ratio",3]]],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",41,[[],[["parseratioerror",3],["result",4],["ratio",3]]]],[11,"fmt","","",41,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",42,[[["formatter",3]],[["error",3],["result",4]]]],[11,"checked_div","","",41,[[["ratio",3]],[["ratio",3],["option",4]]]],[11,"one","","",41,[[],["ratio",3]]],[11,"is_one","","",41,[[]]],[11,"add_assign","","",41,[[["ratio",3]]]],[11,"add_assign","","",41,[[["ratio",3]]]],[11,"add_assign","","",41,[[]]],[11,"add_assign","","",41,[[]]],[11,"rem","","",41,[[],["ratio",3]]],[11,"rem","","",41,[[],["ratio",3]]],[11,"rem","","",41,[[["ratio",3]],["ratio",3]]],[11,"rem","","",41,[[["ratio",3]],["ratio",3]]],[11,"cmp","","",41,[[["ratio",3]],["ordering",4]]],[11,"inv","","",41,[[],["ratio",3]]],[11,"mul","","",41,[[["ratio",3]],["ratio",3]]],[11,"mul","","",41,[[["ratio",3]],["ratio",3]]],[11,"mul","","",41,[[],["ratio",3]]],[11,"mul","","",41,[[],["ratio",3]]],[11,"new","num::complex","Create a new Complex",0,[[],["complex",3]]],[11,"i","","Returns imaginary unit",0,[[],["complex",3]]],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't…",0,[[]]],[11,"scale","","Multiplies `self` by the scalar `t`.",0,[[],["complex",3]]],[11,"unscale","","Divides `self` by the scalar `t`.",0,[[],["complex",3]]],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,[[],["complex",3]]],[11,"inv","","Returns `1/self`",0,[[],["complex",3]]],[11,"is_nan","","Checks if the given complex number is NaN",0,[[]]],[11,"is_infinite","","Checks if the given complex number is infinite",0,[[]]],[11,"is_finite","","Checks if the given complex number is finite",0,[[]]],[11,"is_normal","","Checks if the given complex number is normal",0,[[]]],[11,"new","num::integer","For a given n, iterate over all binomial coefficients…",36,[[],["iterbinomial",3]]],[11,"new","num::rational","Creates a new `Ratio`. Fails if `denom` is zero.",41,[[],["ratio",3]]],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",41,[[],["ratio",3]]],[11,"new_raw","","Creates a `Ratio` without checking for `denom == 0` or…",41,[[],["ratio",3]]],[11,"to_integer","","Converts to an integer, rounding towards zero.",41,[[]]],[11,"numer","","Gets an immutable reference to the numerator.",41,[[]]],[11,"denom","","Gets an immutable reference to the denominator.",41,[[]]],[11,"is_integer","","Returns true if the rational number is an integer…",41,[[]]],[11,"reduced","","Returns a reduced copy of self.",41,[[],["ratio",3]]],[11,"recip","","Returns the reciprocal.",41,[[],["ratio",3]]],[11,"floor","","Rounds towards minus infinity.",41,[[],["ratio",3]]],[11,"ceil","","Rounds towards plus infinity.",41,[[],["ratio",3]]],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away…",41,[[],["ratio",3]]],[11,"trunc","","Rounds towards zero.",41,[[],["ratio",3]]],[11,"fract","","Returns the fractional part of a number, with division…",41,[[],["ratio",3]]],[11,"pow","","Raises the `Ratio` to the power of an exponent.",41,[[],["ratio",3]]],[11,"approximate_float","","",41,[[],[["ratio",3],["option",4]]]]],"p":[[3,"Complex"],[8,"Integer"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"Pow"],[8,"Roots"],[8,"FloatCore"],[8,"FloatConst"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"WrappingShl"],[8,"WrappingShr"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[3,"ParseComplexError"],[3,"IterBinomial"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["num_complex"] = {"doc":"Complex numbers.","i":[[3,"Complex","num_complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[3,"ParseComplexError","","",null,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"new","","Create a new Complex",0,[[],["complex",3]]],[11,"i","","Returns imaginary unit",0,[[],["complex",3]]],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't…",0,[[]]],[11,"scale","","Multiplies `self` by the scalar `t`.",0,[[],["complex",3]]],[11,"unscale","","Divides `self` by the scalar `t`.",0,[[],["complex",3]]],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,[[],["complex",3]]],[11,"inv","","Returns `1/self`",0,[[],["complex",3]]],[11,"is_nan","","Checks if the given complex number is NaN",0,[[]]],[11,"is_infinite","","Checks if the given complex number is infinite",0,[[]]],[11,"is_finite","","Checks if the given complex number is finite",0,[[]]],[11,"is_normal","","Checks if the given complex number is normal",0,[[]]],[11,"from","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",0,[[],["complex",3]]],[11,"from","","",0,[[],["complex",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"div","","",0,[[["complex",3]],["complex",3]]],[11,"div","","",0,[[["complex",3]],["complex",3]]],[11,"div","","",0,[[],["complex",3]]],[11,"div","","",0,[[],["complex",3]]],[11,"rem","","",0,[[["complex",3]],["complex",3]]],[11,"rem","","",0,[[["complex",3]]]],[11,"rem","","",0,[[],["complex",3]]],[11,"rem","","",0,[[],["complex",3]]],[11,"sub","","",0,[[["complex",3]],["complex",3]]],[11,"sub","","",0,[[["complex",3]],["complex",3]]],[11,"sub","","",0,[[],["complex",3]]],[11,"sub","","",0,[[],["complex",3]]],[11,"eq","","",0,[[["complex",3]]]],[11,"ne","","",0,[[["complex",3]]]],[11,"eq","","",1,[[["parsecomplexerror",3]]]],[11,"ne","","",1,[[["parsecomplexerror",3]]]],[11,"add","","",0,[[["complex",3]],["complex",3]]],[11,"add","","",0,[[["complex",3]],["complex",3]]],[11,"add","","",0,[[],["complex",3]]],[11,"add","","",0,[[],["complex",3]]],[11,"mul","","",0,[[["complex",3]],["complex",3]]],[11,"mul","","",0,[[["complex",3]],["complex",3]]],[11,"mul","","",0,[[],["complex",3]]],[11,"mul","","",0,[[],["complex",3]]],[11,"neg","","",0,[[],["complex",3]]],[11,"add_assign","","",0,[[["complex",3]]]],[11,"add_assign","","",0,[[]]],[11,"add_assign","","",0,[[["complex",3]]]],[11,"add_assign","","",0,[[]]],[11,"sub_assign","","",0,[[["complex",3]]]],[11,"sub_assign","","",0,[[]]],[11,"sub_assign","","",0,[[["complex",3]]]],[11,"sub_assign","","",0,[[]]],[11,"mul_assign","","",0,[[["complex",3]]]],[11,"mul_assign","","",0,[[]]],[11,"mul_assign","","",0,[[["complex",3]]]],[11,"mul_assign","","",0,[[]]],[11,"div_assign","","",0,[[["complex",3]]]],[11,"div_assign","","",0,[[]]],[11,"div_assign","","",0,[[["complex",3]]]],[11,"div_assign","","",0,[[]]],[11,"rem_assign","","",0,[[["complex",3]]]],[11,"rem_assign","","",0,[[]]],[11,"rem_assign","","",0,[[["complex",3]]]],[11,"rem_assign","","",0,[[]]],[11,"hash","","",0,[[]]],[11,"product","","",0,[[]]],[11,"product","","",0,[[]]],[11,"sum","","",0,[[]]],[11,"sum","","",0,[[]]],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and…",0,[[],["result",4]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"clone","","",0,[[],["complex",3]]],[11,"default","","",0,[[],["complex",3]]],[11,"to_usize","","",0,[[],["option",4]]],[11,"to_isize","","",0,[[],["option",4]]],[11,"to_u8","","",0,[[],["option",4]]],[11,"to_u16","","",0,[[],["option",4]]],[11,"to_u32","","",0,[[],["option",4]]],[11,"to_u64","","",0,[[],["option",4]]],[11,"to_i8","","",0,[[],["option",4]]],[11,"to_i16","","",0,[[],["option",4]]],[11,"to_i32","","",0,[[],["option",4]]],[11,"to_i64","","",0,[[],["option",4]]],[11,"to_u128","","",0,[[],["option",4]]],[11,"to_i128","","",0,[[],["option",4]]],[11,"to_f32","","",0,[[],["option",4]]],[11,"to_f64","","",0,[[],["option",4]]],[11,"from_usize","","",0,[[],["option",4]]],[11,"from_isize","","",0,[[],["option",4]]],[11,"from_u8","","",0,[[],["option",4]]],[11,"from_u16","","",0,[[],["option",4]]],[11,"from_u32","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_i8","","",0,[[],["option",4]]],[11,"from_i16","","",0,[[],["option",4]]],[11,"from_i32","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from","","",0,[[["toprimitive",8]],["option",4]]],[11,"as_","","",0,[[]]],[11,"from_str_radix","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and…",0,[[],["result",4]]],[11,"zero","","",0,[[],["complex",3]]],[11,"is_zero","","",0,[[]]],[11,"one","","",0,[[],["complex",3]]],[11,"is_one","","",0,[[]]],[11,"inv","","",0,[[],["complex",3]]]],"p":[[3,"Complex"],[3,"ParseComplexError"]]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","i":[[3,"IterBinomial","num_integer","An iterator over binomial coefficients.",null,null],[5,"sqrt","","Returns the truncated principal square root of an integer…",null,[[["roots",8]],["roots",8]]],[5,"cbrt","","Returns the truncated principal cube root of an integer --…",null,[[["roots",8]],["roots",8]]],[5,"nth_root","","Returns the truncated principal `n`th root of an integer…",null,[[["roots",8]],["roots",8]]],[5,"div_rem","","Simultaneous integer division and modulus",null,[[["integer",8]]]],[5,"div_floor","","Floored integer division",null,[[["integer",8]],["integer",8]]],[5,"mod_floor","","Floored integer modulus",null,[[["integer",8]],["integer",8]]],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,[[["integer",8]]]],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number…",null,[[["integer",8]],["integer",8]]],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number…",null,[[["integer",8]],["integer",8]]],[5,"binomial","","Calculate the binomial coefficient.",null,[[["integer",8],["clone",8]],[["integer",8],["clone",8]]]],[5,"multinomial","","Calculate the multinomial coefficient.",null,[[],[["integer",8],["clone",8]]]],[8,"Roots","","Provides methods to compute an integer's square root, cube…",null,null],[10,"nth_root","","Returns the truncated principal `n`th root of an integer…",0,[[]]],[11,"sqrt","","Returns the truncated principal square root of an integer…",0,[[]]],[11,"cbrt","","Returns the truncated principal cube root of an integer --…",0,[[]]],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",1,[[]]],[10,"mod_floor","","Floored integer modulo, satisfying:",1,[[]]],[10,"gcd","","Greatest Common Divisor (GCD).",1,[[]]],[10,"lcm","","Lowest Common Multiple (LCM).",1,[[]]],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,[[]]],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",1,[[]]],[10,"is_even","","Returns `true` if the number is even.",1,[[]]],[10,"is_odd","","Returns `true` if the number is odd.",1,[[]]],[10,"div_rem","","Simultaneous truncated integer division and modulus.…",1,[[]]],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns…",1,[[]]],[11,"new","","For a given n, iterate over all binomial coefficients…",2,[[],["iterbinomial",3]]],[11,"from","","",2,[[]]],[11,"into_iter","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"next","","",2,[[],["option",4]]],[11,"sqrt","","Returns the truncated principal square root of an integer…",0,[[]]],[11,"cbrt","","Returns the truncated principal cube root of an integer --…",0,[[]]]],"p":[[8,"Roots"],[8,"Integer"],[3,"IterBinomial"]]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","i":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It…",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It…",null,null],[5,"range","","Returns an iterator over the given range [start, stop)…",null,[[],["range",3]]],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,[[],["rangeinclusive",3]]],[5,"range_step","","Return an iterator over the range [start, stop) by `step`.…",null,[[],["rangestep",3]]],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`.…",null,[[],["rangestepinclusive",3]]],[11,"from","","",0,[[]]],[11,"into_iter","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into_iter","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into_iter","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into_iter","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"next","","",0,[[],["option",4]]],[11,"size_hint","","",0,[[]]],[11,"next","","",1,[[],["option",4]]],[11,"size_hint","","",1,[[]]],[11,"next","","",2,[[],["option",4]]],[11,"next","","",3,[[],["option",4]]],[11,"next_back","","",0,[[],["option",4]]],[11,"next_back","","",1,[[],["option",4]]],[11,"clone","","",0,[[],["range",3]]],[11,"clone","","",1,[[],["rangeinclusive",3]]],[11,"clone","","",2,[[],["rangestep",3]]],[11,"clone","","",3,[[],["rangestepinclusive",3]]]],"p":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_rational"] = {"doc":"Rational numbers","i":[[3,"Ratio","num_rational","Represents the ratio between two numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","Alias for a `Ratio` of 32-bit-sized integers.",null,null],[6,"Rational64","","Alias for a `Ratio` of 64-bit-sized integers.",null,null],[11,"new","","Creates a new `Ratio`. Fails if `denom` is zero.",0,[[],["ratio",3]]],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",0,[[],["ratio",3]]],[11,"new_raw","","Creates a `Ratio` without checking for `denom == 0` or…",0,[[],["ratio",3]]],[11,"to_integer","","Converts to an integer, rounding towards zero.",0,[[]]],[11,"numer","","Gets an immutable reference to the numerator.",0,[[]]],[11,"denom","","Gets an immutable reference to the denominator.",0,[[]]],[11,"is_integer","","Returns true if the rational number is an integer…",0,[[]]],[11,"reduced","","Returns a reduced copy of self.",0,[[],["ratio",3]]],[11,"recip","","Returns the reciprocal.",0,[[],["ratio",3]]],[11,"floor","","Rounds towards minus infinity.",0,[[],["ratio",3]]],[11,"ceil","","Rounds towards plus infinity.",0,[[],["ratio",3]]],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away…",0,[[],["ratio",3]]],[11,"trunc","","Rounds towards zero.",0,[[],["ratio",3]]],[11,"fract","","Returns the fractional part of a number, with division…",0,[[],["ratio",3]]],[11,"pow","","Raises the `Ratio` to the power of an exponent.",0,[[],["ratio",3]]],[11,"approximate_float","","",0,[[["floatcore",8],["numcast",8]],[["ratio",3],["option",4]]]],[11,"from","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",0,[[],["ratio",3]]],[11,"from","","",0,[[],["ratio",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"div","","",0,[[["ratio",3]],["ratio",3]]],[11,"div","","",0,[[],["ratio",3]]],[11,"div","","",0,[[["ratio",3]],["ratio",3]]],[11,"div","","",0,[[],["ratio",3]]],[11,"rem","","",0,[[["ratio",3]],["ratio",3]]],[11,"rem","","",0,[[],["ratio",3]]],[11,"rem","","",0,[[["ratio",3]],["ratio",3]]],[11,"rem","","",0,[[],["ratio",3]]],[11,"sub","","",0,[[["ratio",3]],["ratio",3]]],[11,"sub","","",0,[[],["ratio",3]]],[11,"sub","","",0,[[["ratio",3]],["ratio",3]]],[11,"sub","","",0,[[],["ratio",3]]],[11,"eq","","",0,[[]]],[11,"eq","","",1,[[["parseratioerror",3]]]],[11,"ne","","",1,[[["parseratioerror",3]]]],[11,"cmp","","",0,[[],["ordering",4]]],[11,"partial_cmp","","",0,[[],[["ordering",4],["option",4]]]],[11,"add","","",0,[[["ratio",3]],["ratio",3]]],[11,"add","","",0,[[],["ratio",3]]],[11,"add","","",0,[[["ratio",3]],["ratio",3]]],[11,"add","","",0,[[],["ratio",3]]],[11,"mul","","",0,[[["ratio",3]],["ratio",3]]],[11,"mul","","",0,[[],["ratio",3]]],[11,"mul","","",0,[[["ratio",3]],["ratio",3]]],[11,"mul","","",0,[[],["ratio",3]]],[11,"neg","","",0,[[],["ratio",3]]],[11,"add_assign","","",0,[[["ratio",3]]]],[11,"add_assign","","",0,[[]]],[11,"add_assign","","",0,[[["ratio",3]]]],[11,"add_assign","","",0,[[]]],[11,"sub_assign","","",0,[[["ratio",3]]]],[11,"sub_assign","","",0,[[]]],[11,"sub_assign","","",0,[[["ratio",3]]]],[11,"sub_assign","","",0,[[]]],[11,"mul_assign","","",0,[[["ratio",3]]]],[11,"mul_assign","","",0,[[]]],[11,"mul_assign","","",0,[[["ratio",3]]]],[11,"mul_assign","","",0,[[]]],[11,"div_assign","","",0,[[["ratio",3]]]],[11,"div_assign","","",0,[[]]],[11,"div_assign","","",0,[[["ratio",3]]]],[11,"div_assign","","",0,[[]]],[11,"rem_assign","","",0,[[["ratio",3]]]],[11,"rem_assign","","",0,[[]]],[11,"rem_assign","","",0,[[["ratio",3]]]],[11,"rem_assign","","",0,[[]]],[11,"hash","","",0,[[]]],[11,"product","","",0,[[]]],[11,"product","","",0,[[]]],[11,"sum","","",0,[[]]],[11,"sum","","",0,[[]]],[11,"from_str","","Parses `numer/denom` or just `numer`.",0,[[],[["ratio",3],["result",4],["parseratioerror",3]]]],[11,"into","","",0,[[]]],[11,"clone","","",0,[[],["ratio",3]]],[11,"clone","","",1,[[],["parseratioerror",3]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",0,[[],[["ratio",3],["result",4],["parseratioerror",3]]]],[11,"zero","","",0,[[],["ratio",3]]],[11,"is_zero","","",0,[[]]],[11,"one","","",0,[[],["ratio",3]]],[11,"is_one","","",0,[[]]],[11,"checked_add","","",0,[[["ratio",3]],[["ratio",3],["option",4]]]],[11,"checked_sub","","",0,[[["ratio",3]],[["ratio",3],["option",4]]]],[11,"checked_mul","","",0,[[["ratio",3]],[["ratio",3],["option",4]]]],[11,"checked_div","","",0,[[["ratio",3]],[["ratio",3],["option",4]]]],[11,"inv","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"abs","","",0,[[],["ratio",3]]],[11,"abs_sub","","",0,[[["ratio",3]],["ratio",3]]],[11,"signum","","",0,[[],["ratio",3]]],[11,"is_positive","","",0,[[]]],[11,"is_negative","","",0,[[]]]],"p":[[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","i":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,[[["partialord",8]],["partialord",8]]],[0,"bounds","","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",2,[[]]],[10,"max_value","","returns the largest finite number this type can represent",2,[[]]],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,[[["numcast",8]],[["option",4],["numcast",8]]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",3,[[],["option",4]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",3,[[],["option",4]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",3,[[],["option",4]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",3,[[],["option",4]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",3,[[],["option",4]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",3,[[],["option",4]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",3,[[],["option",4]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",3,[[],["option",4]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",3,[[],["option",4]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",3,[[],["option",4]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",3,[[],["option",4]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",3,[[],["option",4]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",3,[[],["option",4]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",3,[[],["option",4]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this…",4,[[],["option",4]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type.…",4,[[],["option",4]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_i128","","Convert an `i128` to return an optional value of this…",4,[[],["option",4]]],[11,"from_usize","","Convert a `usize` to return an optional value of this…",4,[[],["option",4]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type.…",4,[[],["option",4]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_u128","","Convert an `u128` to return an optional value of this…",4,[[],["option",4]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type.…",4,[[],["option",4]]],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted…",5,[[["toprimitive",8]],["option",4]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars…",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",6,[[]]],[0,"float","num_traits","",null,null],[8,"FloatCore","num_traits::float","Generic trait for floating point numbers that works with…",null,null],[10,"infinity","","Returns positive infinity.",7,[[]]],[10,"neg_infinity","","Returns negative infinity.",7,[[]]],[10,"nan","","Returns NaN.",7,[[]]],[10,"neg_zero","","Returns `-0.0`.",7,[[]]],[10,"min_value","","Returns the smallest finite value that this type can…",7,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",7,[[]]],[10,"epsilon","","Returns epsilon, a small positive value.",7,[[]]],[10,"max_value","","Returns the largest finite value that this type can…",7,[[]]],[11,"is_nan","","Returns `true` if the number is NaN.",7,[[]]],[11,"is_infinite","","Returns `true` if the number is infinite.",7,[[]]],[11,"is_finite","","Returns `true` if the number is neither infinite or NaN.",7,[[]]],[11,"is_normal","","Returns `true` if the number is neither zero, infinite,…",7,[[]]],[10,"classify","","Returns the floating point category of the number. If only…",7,[[],["fpcategory",4]]],[11,"floor","","Returns the largest integer less than or equal to a number.",7,[[]]],[11,"ceil","","Returns the smallest integer greater than or equal to a…",7,[[]]],[11,"round","","Returns the nearest integer to a number. Round half-way…",7,[[]]],[11,"trunc","","Return the integer part of a number.",7,[[]]],[11,"fract","","Returns the fractional part of a number.",7,[[]]],[11,"abs","","Computes the absolute value of `self`. Returns…",7,[[]]],[11,"signum","","Returns a number that represents the sign of `self`.",7,[[]]],[11,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and…",7,[[]]],[11,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and…",7,[[]]],[11,"min","","Returns the minimum of the two numbers.",7,[[]]],[11,"max","","Returns the maximum of the two numbers.",7,[[]]],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the…",7,[[]]],[11,"powi","","Raise a number to an integer power.",7,[[]]],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",7,[[]]],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",7,[[]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as…",7,[[]]],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",8,[[]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",8,[[]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",8,[[]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",8,[[]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",8,[[]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",8,[[]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",8,[[]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",8,[[]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",8,[[]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",8,[[]]],[10,"LN_10","","Return `ln(10.0)`.",8,[[]]],[10,"LN_2","","Return `ln(2.0)`.",8,[[]]],[10,"LOG10_E","","Return `log10(e)`.",8,[[]]],[10,"LOG2_E","","Return `log2(e)`.",8,[[]]],[10,"PI","","Return Archimedes’ constant.",8,[[]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",8,[[]]],[0,"identities","num_traits","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,[[],["zero",8]]],[5,"one","","Returns the multiplicative identity, `1`.",null,[[],["one",8]]],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",9,[[]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",9,[[]]],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",10,[[]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative…",10,[[]]],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of…",11,[[]]],[10,"count_zeros","","Returns the number of zeros in the binary representation…",11,[[]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary…",11,[[]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary…",11,[[]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount,…",11,[[]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount,…",11,[[]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount,…",11,[[]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount,…",11,[[]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount,…",11,[[]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount,…",11,[[]]],[10,"swap_bytes","","Reverses the byte order of the integer.",11,[[]]],[10,"from_be","","Convert an integer from big endian to the target's…",11,[[]]],[10,"from_le","","Convert an integer from little endian to the target's…",11,[[]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",11,[[]]],[10,"to_le","","Convert `self` to little endian from the target's…",11,[[]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by…",11,[[]]],[0,"ops","num_traits","",null,null],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping…",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow…",12,[[],["option",4]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of…",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If…",13,[[],["option",4]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of…",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or…",14,[[],["option",4]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking…",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and…",15,[[],["option",4]]],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead…",null,null],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for…",16,[[],["option",4]]],[8,"CheckedNeg","","Performs negation that returns `None` if the result can't…",null,null],[10,"checked_neg","","Negates a number, returning `None` for results that can't…",17,[[],["option",4]]],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",null,null],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If…",18,[[],["option",4]]],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",null,null],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If…",19,[[],["option",4]]],[0,"inv","num_traits::ops","",null,null],[8,"Inv","num_traits::ops::inv","Unary operator for retrieving the multiplicative inverse,…",null,null],[16,"Output","","The result after applying the operator.",20,null],[10,"inv","","Returns the multiplicative inverse of `self`.",20,[[]]],[0,"mul_add","num_traits::ops","",null,null],[8,"MulAdd","num_traits::ops::mul_add","Fused multiply-add. Computes `(self * a) + b` with only…",null,null],[16,"Output","","The resulting type after applying the fused multiply-add.",21,null],[10,"mul_add","","Performs the fused multiply-add operation.",21,[[]]],[8,"MulAddAssign","","The fused multiply-add assignment operation.",null,null],[10,"mul_add_assign","","Performs the fused multiply-add operation.",22,[[]]],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at…",23,[[]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating…",23,[[]]],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`,…",24,[[]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`,…",25,[[]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self *…",26,[[]]],[8,"WrappingShl","","Performs a left shift that does not panic.",null,null],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`,…",27,[[]]],[8,"WrappingShr","","Performs a right shift that does not panic.",null,null],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >>…",28,[[]]],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation…",null,[[["one",8],["clone",8],["mul",8]],[["one",8],["mul",8],["clone",8]]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an…",null,[[["one",8],["clone",8],["checkedmul",8]],[["option",4],["one",8],["checkedmul",8],["clone",8]]]],[8,"Pow","","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",29,null],[10,"pow","","Returns `self` to the power `rhs`.",29,[[]]],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,[[["signed",8]],["signed",8]]],[5,"abs_sub","","The positive difference of two numbers.",null,[[["signed",8]],["signed",8]]],[5,"signum","","Returns the sign of the number.",null,[[["signed",8]],["signed",8]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can…",null,null],[10,"abs","","Computes the absolute value.",30,[[]]],[10,"abs_sub","","The positive difference of two numbers.",30,[[]]],[10,"signum","","Returns the sign of the number.",30,[[]]],[10,"is_positive","","Returns true if the number is positive and false if the…",30,[[]]],[10,"is_negative","","Returns true if the number is negative and false if the…",30,[[]]],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Num","num_traits","The base trait for numeric types, covering `0` and `1`…",null,null],[16,"FromStrRadixErr","","",31,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",31,[[],["result",4]]],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric…",null,null],[8,"RefNum","","The trait for references which implement numeric…",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment…",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment…",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement…",null,null],[11,"from","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]]],"p":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Bounded"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"FloatCore"],[8,"FloatConst"],[8,"Zero"],[8,"One"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"Saturating"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"Pow"],[8,"Signed"],[8,"Num"]]};
searchIndex["pebble_util"] = {"doc":"","i":[[3,"BinaryPrettyPrint","pebble_util","Values can be wrapped in this type when they're printed to…",null,null],[12,"0","","",0,null],[3,"InitGuard","","A guard for when you want to store some data in a static,…",null,null],[0,"bitmap","","It's useful to be able to model an integral type such as…",null,null],[8,"Bitmap","pebble_util::bitmap","",null,null],[10,"alloc","","Find `n` consecutive unset bits, set them and return the…",1,[[],["option",4]]],[8,"BitmapArray","","Like `Bitmap`, but for arrays. This is unfortunately…",null,null],[10,"alloc","","Find `n` consecutive unset bits, set them and return the…",2,[[],["option",4]]],[11,"uninit","pebble_util","",3,[[],["initguard",3]]],[11,"initialize","","Initialize this `InitGuard`, allowing it to be read from…",3,[[]]],[11,"get","","Get a reference to the data, if this guard has been…",3,[[]]],[11,"try_get","","Get a reference to the data, if this guard has been…",3,[[],["option",4]]],[0,"math","","",null,null],[5,"flooring_log2","pebble_util::math","Fast integer `log2` that floors to the lower power-of-2 if…",null,[[]]],[5,"align_down","","",null,[[]]],[5,"align_up","","",null,[[]]],[5,"ceiling_log2","","",null,[[]]],[5,"ceiling_integer_divide","","Divide `x` by `divide_by`, taking the ceiling if it does…",null,[[]]],[14,"assert_first_call","pebble_util","This macro should be called at the beginning of functions…",null,null],[11,"from","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]]],"p":[[3,"BinaryPrettyPrint"],[8,"Bitmap"],[8,"BitmapArray"],[3,"InitGuard"]]};
searchIndex["spin"] = {"doc":"Synchronization primitives based on spinning","i":[[3,"Mutex","spin","This type provides MUTual EXclusion based on spinning.",null,null],[3,"MutexGuard","","A guard to which the protected data can be accessed",null,null],[3,"RwLock","","A reader-writer lock",null,null],[3,"RwLockReadGuard","","A guard to which the protected data can be read",null,null],[3,"RwLockWriteGuard","","A guard to which the protected data can be written",null,null],[3,"Once","","A synchronization primitive which can be used to run a…",null,null],[11,"new","","Creates a new spinlock wrapping the supplied data.",0,[[],["mutex",3]]],[11,"into_inner","","Consumes this mutex, returning the underlying data.",0,[[]]],[11,"lock","","Locks the spinlock and returns a guard.",0,[[],["mutexguard",3]]],[11,"force_unlock","","Force unlock the spinlock.",0,[[]]],[11,"try_lock","","Tries to lock the mutex. If it is already locked, it will…",0,[[],[["mutexguard",3],["option",4]]]],[11,"new","","Creates a new spinlock wrapping the supplied data.",1,[[],["rwlock",3]]],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",1,[[]]],[11,"read","","Locks this rwlock with shared read access, blocking the…",1,[[],["rwlockreadguard",3]]],[11,"try_read","","Attempt to acquire this lock with shared read access.",1,[[],[["option",4],["rwlockreadguard",3]]]],[11,"force_read_decrement","","Force decrement the reader count.",1,[[]]],[11,"force_write_unlock","","Force unlock exclusive write access.",1,[[]]],[11,"write","","Lock this rwlock with exclusive write access, blocking the…",1,[[],["rwlockwriteguard",3]]],[11,"try_write","","Attempt to lock this rwlock with exclusive write access.",1,[[],[["option",4],["rwlockwriteguard",3]]]],[18,"INIT","","Initialization constant of `Once`.",2,null],[11,"new","","Creates a new `Once` value.",2,[[],["once",3]]],[11,"call_once","","Performs an initialization routine once and only once. The…",2,[[]]],[11,"try","","Returns a pointer iff the `Once` was previously initialized",2,[[],["option",4]]],[11,"wait","","Like try, but will spin if the `Once` is in the process of…",2,[[],["option",4]]],[11,"from","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"deref","","",3,[[]]],[11,"deref","","",4,[[]]],[11,"deref","","",5,[[]]],[11,"deref_mut","","",3,[[]]],[11,"deref_mut","","",5,[[]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"drop","","The dropping of the MutexGuard will release the lock it…",3,[[]]],[11,"drop","","",4,[[]]],[11,"drop","","",5,[[]]],[11,"default","","",0,[[],["mutex",3]]],[11,"default","","",1,[[],["rwlock",3]]]],"p":[[3,"Mutex"],[3,"RwLock"],[3,"Once"],[3,"MutexGuard"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);