{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/hw/cpu.rs","byte_start":9138,"byte_end":9141,"line_start":298,"line_end":298,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        asm!(\"cpuid\"","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(deprecated)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/hw/cpu.rs","byte_start":9138,"byte_end":9141,"line_start":298,"line_end":298,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        asm!(\"cpuid\"","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/hw/cpu.rs:298:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m298\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        asm!(\"cpuid\"\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(deprecated)]` on by default\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/hw/gdt.rs","byte_start":6174,"byte_end":6177,"line_start":174,"line_end":174,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        asm!(\"// Load the new GDT","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/hw/gdt.rs","byte_start":6174,"byte_end":6177,"line_start":174,"line_end":174,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        asm!(\"// Load the new GDT","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/hw/gdt.rs:174:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        asm!(\"// Load the new GDT\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/hw/idt.rs","byte_start":3963,"byte_end":3966,"line_start":132,"line_end":132,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"            asm!(\"lidt [$0]\"","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/hw/idt.rs","byte_start":3963,"byte_end":3966,"line_start":132,"line_end":132,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"            asm!(\"lidt [$0]\"","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/hw/idt.rs:132:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m132\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            asm!(\"lidt [$0]\"\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/hw/port.rs","byte_start":410,"byte_end":413,"line_start":13,"line_end":13,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        asm!(\"in al, dx\"","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/hw/port.rs","byte_start":410,"byte_end":413,"line_start":13,"line_end":13,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        asm!(\"in al, dx\"","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/hw/port.rs:13:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        asm!(\"in al, dx\"\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/hw/port.rs","byte_start":610,"byte_end":613,"line_start":23,"line_end":23,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        asm!(\"out dx, al\"","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/hw/port.rs","byte_start":610,"byte_end":613,"line_start":23,"line_end":23,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        asm!(\"out dx, al\"","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/hw/port.rs:23:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        asm!(\"out dx, al\"\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/hw/port.rs","byte_start":848,"byte_end":851,"line_start":34,"line_end":34,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        asm!(\"in ax, dx\"","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/hw/port.rs","byte_start":848,"byte_end":851,"line_start":34,"line_end":34,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        asm!(\"in ax, dx\"","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/hw/port.rs:34:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        asm!(\"in ax, dx\"\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/hw/port.rs","byte_start":1049,"byte_end":1052,"line_start":44,"line_end":44,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        asm!(\"out dx, ax\"","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/hw/port.rs","byte_start":1049,"byte_end":1052,"line_start":44,"line_end":44,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        asm!(\"out dx, ax\"","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/hw/port.rs:44:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        asm!(\"out dx, ax\"\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/hw/port.rs","byte_start":1280,"byte_end":1283,"line_start":56,"line_end":56,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        asm!(\"in eax, dx\"","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/hw/port.rs","byte_start":1280,"byte_end":1283,"line_start":56,"line_end":56,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        asm!(\"in eax, dx\"","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/hw/port.rs:56:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        asm!(\"in eax, dx\"\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/hw/port.rs","byte_start":1483,"byte_end":1486,"line_start":66,"line_end":66,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        asm!(\"out dx, eax\"","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/hw/port.rs","byte_start":1483,"byte_end":1486,"line_start":66,"line_end":66,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        asm!(\"out dx, eax\"","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/hw/port.rs:66:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        asm!(\"out dx, eax\"\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/hw/registers.rs","byte_start":408,"byte_end":411,"line_start":15,"line_end":15,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"            asm!(\"pushfq","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/hw/registers.rs","byte_start":408,"byte_end":411,"line_start":15,"line_end":15,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"            asm!(\"pushfq","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/hw/registers.rs:15:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            asm!(\"pushfq\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/hw/registers.rs","byte_start":4307,"byte_end":4310,"line_start":127,"line_end":127,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        asm!(\"rdmsr\"","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/hw/registers.rs","byte_start":4307,"byte_end":4310,"line_start":127,"line_end":127,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        asm!(\"rdmsr\"","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/hw/registers.rs:127:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        asm!(\"rdmsr\"\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/hw/registers.rs","byte_start":4660,"byte_end":4663,"line_start":140,"line_end":140,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(\"wrmsr\"","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/hw/registers.rs","byte_start":4660,"byte_end":4663,"line_start":140,"line_end":140,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(\"wrmsr\"","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/hw/registers.rs:140:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m140\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    asm!(\"wrmsr\"\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/hw/serial.rs","byte_start":2202,"byte_end":2205,"line_start":72,"line_end":72,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"            asm!(\"\" :::: \"volatile\");","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/hw/serial.rs","byte_start":2202,"byte_end":2205,"line_start":72,"line_end":72,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"            asm!(\"\" :::: \"volatile\");","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/hw/serial.rs:72:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            asm!(\"\" :::: \"volatile\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/hw/serial.rs","byte_start":2403,"byte_end":2406,"line_start":80,"line_end":80,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"            asm!(\"\" :::: \"volatile\");","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/hw/serial.rs","byte_start":2403,"byte_end":2406,"line_start":80,"line_end":80,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"            asm!(\"\" :::: \"volatile\");","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/hw/serial.rs:80:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            asm!(\"\" :::: \"volatile\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/hw/tlb.rs","byte_start":183,"byte_end":186,"line_start":7,"line_end":7,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        asm!(\"invlpg ($0)\"","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/hw/tlb.rs","byte_start":183,"byte_end":186,"line_start":7,"line_end":7,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        asm!(\"invlpg ($0)\"","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/hw/tlb.rs:7:9\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        asm!(\"invlpg ($0)\"\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/hw/registers.rs","byte_start":2378,"byte_end":2381,"line_start":72,"line_end":72,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        asm!(concat!(\"mov %\", stringify!($reg), \", $0\")","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/hw/tlb.rs","byte_start":347,"byte_end":369,"line_start":17,"line_end":17,"column_start":23,"column_end":45,"is_primary":false,"text":[{"text":"    let current_cr3 = read_control_reg!(cr3);","highlight_start":23,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_control_reg!","def_site_span":{"file_name":"hal_x86_64/src/hw/registers.rs","byte_start":2104,"byte_end":2553,"line_start":63,"line_end":80,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"pub macro read_control_reg($reg: ident) {{","highlight_start":1,"highlight_end":43},{"text":"    let result: u64;","highlight_start":1,"highlight_end":21},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /*","highlight_start":1,"highlight_end":7},{"text":"     * If this macro is used inside an unsafe block, this causes a warning, which can be unexpected and is noisy,","highlight_start":1,"highlight_end":114},{"text":"     * so we suppress it here.","highlight_start":1,"highlight_end":31},{"text":"     */","highlight_start":1,"highlight_end":8},{"text":"    #[allow(unused_unsafe)]","highlight_start":1,"highlight_end":28},{"text":"    unsafe {","highlight_start":1,"highlight_end":13},{"text":"        asm!(concat!(\"mov %\", stringify!($reg), \", $0\")","highlight_start":1,"highlight_end":56},{"text":"             : \"=r\"(result)","highlight_start":1,"highlight_end":28},{"text":"             :","highlight_start":1,"highlight_end":15},{"text":"             : \"memory\"","highlight_start":1,"highlight_end":24},{"text":"             : \"volatile\"","highlight_start":1,"highlight_end":26},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    result","highlight_start":1,"highlight_end":11},{"text":"}}","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/hw/registers.rs","byte_start":2378,"byte_end":2381,"line_start":72,"line_end":72,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        asm!(concat!(\"mov %\", stringify!($reg), \", $0\")","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"hal_x86_64/src/hw/tlb.rs","byte_start":347,"byte_end":369,"line_start":17,"line_end":17,"column_start":23,"column_end":45,"is_primary":false,"text":[{"text":"    let current_cr3 = read_control_reg!(cr3);","highlight_start":23,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_control_reg!","def_site_span":{"file_name":"hal_x86_64/src/hw/registers.rs","byte_start":2104,"byte_end":2553,"line_start":63,"line_end":80,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"pub macro read_control_reg($reg: ident) {{","highlight_start":1,"highlight_end":43},{"text":"    let result: u64;","highlight_start":1,"highlight_end":21},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /*","highlight_start":1,"highlight_end":7},{"text":"     * If this macro is used inside an unsafe block, this causes a warning, which can be unexpected and is noisy,","highlight_start":1,"highlight_end":114},{"text":"     * so we suppress it here.","highlight_start":1,"highlight_end":31},{"text":"     */","highlight_start":1,"highlight_end":8},{"text":"    #[allow(unused_unsafe)]","highlight_start":1,"highlight_end":28},{"text":"    unsafe {","highlight_start":1,"highlight_end":13},{"text":"        asm!(concat!(\"mov %\", stringify!($reg), \", $0\")","highlight_start":1,"highlight_end":56},{"text":"             : \"=r\"(result)","highlight_start":1,"highlight_end":28},{"text":"             :","highlight_start":1,"highlight_end":15},{"text":"             : \"memory\"","highlight_start":1,"highlight_end":24},{"text":"             : \"volatile\"","highlight_start":1,"highlight_end":26},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    result","highlight_start":1,"highlight_end":11},{"text":"}}","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/hw/registers.rs:72:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        asm!(concat!(\"mov %\", stringify!($reg), \", $0\")\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mhal_x86_64/src/hw/tlb.rs:17:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let current_cr3 = read_control_reg!(cr3);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/hw/registers.rs","byte_start":3012,"byte_end":3015,"line_start":90,"line_end":90,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(concat!(\"mov $0, %\", stringify!($reg))","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/hw/tlb.rs","byte_start":392,"byte_end":429,"line_start":19,"line_end":19,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        write_control_reg!(cr3, current_cr3);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write_control_reg!","def_site_span":{"file_name":"hal_x86_64/src/hw/registers.rs","byte_start":2838,"byte_end":3147,"line_start":85,"line_end":96,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub macro write_control_reg($reg: ident, $value: expr) {","highlight_start":1,"highlight_end":57},{"text":"    /*","highlight_start":1,"highlight_end":7},{"text":"     * This will cause a type-check error if $value isn't a u64.","highlight_start":1,"highlight_end":65},{"text":"     */","highlight_start":1,"highlight_end":8},{"text":"    let value_u64: u64 = $value;","highlight_start":1,"highlight_end":33},{"text":"    asm!(concat!(\"mov $0, %\", stringify!($reg))","highlight_start":1,"highlight_end":48},{"text":"         :","highlight_start":1,"highlight_end":11},{"text":"         : \"r\"(value_u64)","highlight_start":1,"highlight_end":26},{"text":"         : \"memory\"","highlight_start":1,"highlight_end":20},{"text":"         : \"volatile\"","highlight_start":1,"highlight_end":22},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/hw/registers.rs","byte_start":3012,"byte_end":3015,"line_start":90,"line_end":90,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(concat!(\"mov $0, %\", stringify!($reg))","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"hal_x86_64/src/hw/tlb.rs","byte_start":392,"byte_end":429,"line_start":19,"line_end":19,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        write_control_reg!(cr3, current_cr3);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write_control_reg!","def_site_span":{"file_name":"hal_x86_64/src/hw/registers.rs","byte_start":2838,"byte_end":3147,"line_start":85,"line_end":96,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub macro write_control_reg($reg: ident, $value: expr) {","highlight_start":1,"highlight_end":57},{"text":"    /*","highlight_start":1,"highlight_end":7},{"text":"     * This will cause a type-check error if $value isn't a u64.","highlight_start":1,"highlight_end":65},{"text":"     */","highlight_start":1,"highlight_end":8},{"text":"    let value_u64: u64 = $value;","highlight_start":1,"highlight_end":33},{"text":"    asm!(concat!(\"mov $0, %\", stringify!($reg))","highlight_start":1,"highlight_end":48},{"text":"         :","highlight_start":1,"highlight_end":11},{"text":"         : \"r\"(value_u64)","highlight_start":1,"highlight_end":26},{"text":"         : \"memory\"","highlight_start":1,"highlight_end":20},{"text":"         : \"volatile\"","highlight_start":1,"highlight_end":22},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/hw/registers.rs:90:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    asm!(concat!(\"mov $0, %\", stringify!($reg))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mhal_x86_64/src/hw/tlb.rs:19:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        write_control_reg!(cr3, current_cr3);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/hw/registers.rs","byte_start":3012,"byte_end":3015,"line_start":90,"line_end":90,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(concat!(\"mov $0, %\", stringify!($reg))","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/paging.rs","byte_start":11287,"byte_end":11352,"line_start":322,"line_end":322,"column_start":13,"column_end":78,"is_primary":false,"text":[{"text":"            write_control_reg!(cr3, usize::from(self.p4_frame.start) as u64);","highlight_start":13,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write_control_reg!","def_site_span":{"file_name":"hal_x86_64/src/hw/registers.rs","byte_start":2838,"byte_end":3147,"line_start":85,"line_end":96,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub macro write_control_reg($reg: ident, $value: expr) {","highlight_start":1,"highlight_end":57},{"text":"    /*","highlight_start":1,"highlight_end":7},{"text":"     * This will cause a type-check error if $value isn't a u64.","highlight_start":1,"highlight_end":65},{"text":"     */","highlight_start":1,"highlight_end":8},{"text":"    let value_u64: u64 = $value;","highlight_start":1,"highlight_end":33},{"text":"    asm!(concat!(\"mov $0, %\", stringify!($reg))","highlight_start":1,"highlight_end":48},{"text":"         :","highlight_start":1,"highlight_end":11},{"text":"         : \"r\"(value_u64)","highlight_start":1,"highlight_end":26},{"text":"         : \"memory\"","highlight_start":1,"highlight_end":20},{"text":"         : \"volatile\"","highlight_start":1,"highlight_end":22},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/hw/registers.rs","byte_start":3012,"byte_end":3015,"line_start":90,"line_end":90,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(concat!(\"mov $0, %\", stringify!($reg))","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"hal_x86_64/src/paging.rs","byte_start":11287,"byte_end":11352,"line_start":322,"line_end":322,"column_start":13,"column_end":78,"is_primary":false,"text":[{"text":"            write_control_reg!(cr3, usize::from(self.p4_frame.start) as u64);","highlight_start":13,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write_control_reg!","def_site_span":{"file_name":"hal_x86_64/src/hw/registers.rs","byte_start":2838,"byte_end":3147,"line_start":85,"line_end":96,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub macro write_control_reg($reg: ident, $value: expr) {","highlight_start":1,"highlight_end":57},{"text":"    /*","highlight_start":1,"highlight_end":7},{"text":"     * This will cause a type-check error if $value isn't a u64.","highlight_start":1,"highlight_end":65},{"text":"     */","highlight_start":1,"highlight_end":8},{"text":"    let value_u64: u64 = $value;","highlight_start":1,"highlight_end":33},{"text":"    asm!(concat!(\"mov $0, %\", stringify!($reg))","highlight_start":1,"highlight_end":48},{"text":"         :","highlight_start":1,"highlight_end":11},{"text":"         : \"r\"(value_u64)","highlight_start":1,"highlight_end":26},{"text":"         : \"memory\"","highlight_start":1,"highlight_end":20},{"text":"         : \"volatile\"","highlight_start":1,"highlight_end":22},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/hw/registers.rs:90:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    asm!(concat!(\"mov $0, %\", stringify!($reg))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mhal_x86_64/src/paging.rs:322:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m322\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            write_control_reg!(cr3, usize::from(self.p4_frame.start) as u64);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8464,"byte_end":8467,"line_start":216,"line_end":216,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(\"push rax","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9389,"byte_end":9402,"line_start":260,"line_end":260,"column_start":17,"column_end":30,"is_primary":false,"text":[{"text":"                save_regs!();","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":4498,"byte_end":4537,"line_start":120,"line_end":120,"column_start":38,"column_end":77,"is_primary":false,"text":[{"text":"                        .set_handler(wrap_handler!(local_apic_timer_handler), KERNEL_CODE_SELECTOR);","highlight_start":38,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"wrap_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8979,"byte_end":9946,"line_start":250,"line_end":282,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler($name: path) {","highlight_start":1,"highlight_end":34},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers). We don't need to manually align the stack, as it should","highlight_start":1,"highlight_end":94},{"text":"                 * already be aligned correctly.","highlight_start":1,"highlight_end":49},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x48","highlight_start":1,"highlight_end":36},{"text":"                      call $0\"","highlight_start":1,"highlight_end":31},{"text":"                    :","highlight_start":1,"highlight_end":22},{"text":"                    : \"i\"($name as extern \"C\" fn(&InterruptStackFrame))","highlight_start":1,"highlight_end":72},{"text":"                    : \"rdi\"","highlight_start":1,"highlight_end":28},{"text":"                    : \"intel\"","highlight_start":1,"highlight_end":30},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                     );","highlight_start":1,"highlight_end":24},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"save_regs!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8440,"byte_end":8690,"line_start":215,"line_end":230,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro save_regs() {","highlight_start":1,"highlight_end":20},{"text":"    asm!(\"push rax","highlight_start":1,"highlight_end":19},{"text":"          push rcx","highlight_start":1,"highlight_end":19},{"text":"          push rdx","highlight_start":1,"highlight_end":19},{"text":"          push rsi","highlight_start":1,"highlight_end":19},{"text":"          push rdi","highlight_start":1,"highlight_end":19},{"text":"          push r8","highlight_start":1,"highlight_end":18},{"text":"          push r9","highlight_start":1,"highlight_end":18},{"text":"          push r10","highlight_start":1,"highlight_end":19},{"text":"          push r11\"","highlight_start":1,"highlight_end":20},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        : \"intel\"","highlight_start":1,"highlight_end":18},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8464,"byte_end":8467,"line_start":216,"line_end":216,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(\"push rax","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9389,"byte_end":9402,"line_start":260,"line_end":260,"column_start":17,"column_end":30,"is_primary":false,"text":[{"text":"                save_regs!();","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":4498,"byte_end":4537,"line_start":120,"line_end":120,"column_start":38,"column_end":77,"is_primary":false,"text":[{"text":"                        .set_handler(wrap_handler!(local_apic_timer_handler), KERNEL_CODE_SELECTOR);","highlight_start":38,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"wrap_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8979,"byte_end":9946,"line_start":250,"line_end":282,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler($name: path) {","highlight_start":1,"highlight_end":34},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers). We don't need to manually align the stack, as it should","highlight_start":1,"highlight_end":94},{"text":"                 * already be aligned correctly.","highlight_start":1,"highlight_end":49},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x48","highlight_start":1,"highlight_end":36},{"text":"                      call $0\"","highlight_start":1,"highlight_end":31},{"text":"                    :","highlight_start":1,"highlight_end":22},{"text":"                    : \"i\"($name as extern \"C\" fn(&InterruptStackFrame))","highlight_start":1,"highlight_end":72},{"text":"                    : \"rdi\"","highlight_start":1,"highlight_end":28},{"text":"                    : \"intel\"","highlight_start":1,"highlight_end":30},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                     );","highlight_start":1,"highlight_end":24},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"save_regs!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8440,"byte_end":8690,"line_start":215,"line_end":230,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro save_regs() {","highlight_start":1,"highlight_end":20},{"text":"    asm!(\"push rax","highlight_start":1,"highlight_end":19},{"text":"          push rcx","highlight_start":1,"highlight_end":19},{"text":"          push rdx","highlight_start":1,"highlight_end":19},{"text":"          push rsi","highlight_start":1,"highlight_end":19},{"text":"          push rdi","highlight_start":1,"highlight_end":19},{"text":"          push r8","highlight_start":1,"highlight_end":18},{"text":"          push r9","highlight_start":1,"highlight_end":18},{"text":"          push r10","highlight_start":1,"highlight_end":19},{"text":"          push r11\"","highlight_start":1,"highlight_end":20},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        : \"intel\"","highlight_start":1,"highlight_end":18},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/interrupts/mod.rs:216:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        .set_handler(wrap_handler!(local_apic_timer_handler), KERNEL_CODE_SELECTOR);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    asm!(\"push rax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9419,"byte_end":9422,"line_start":261,"line_end":261,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                asm!(\"mov rdi, rsp","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":4498,"byte_end":4537,"line_start":120,"line_end":120,"column_start":38,"column_end":77,"is_primary":false,"text":[{"text":"                        .set_handler(wrap_handler!(local_apic_timer_handler), KERNEL_CODE_SELECTOR);","highlight_start":38,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"wrap_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8979,"byte_end":9946,"line_start":250,"line_end":282,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler($name: path) {","highlight_start":1,"highlight_end":34},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers). We don't need to manually align the stack, as it should","highlight_start":1,"highlight_end":94},{"text":"                 * already be aligned correctly.","highlight_start":1,"highlight_end":49},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x48","highlight_start":1,"highlight_end":36},{"text":"                      call $0\"","highlight_start":1,"highlight_end":31},{"text":"                    :","highlight_start":1,"highlight_end":22},{"text":"                    : \"i\"($name as extern \"C\" fn(&InterruptStackFrame))","highlight_start":1,"highlight_end":72},{"text":"                    : \"rdi\"","highlight_start":1,"highlight_end":28},{"text":"                    : \"intel\"","highlight_start":1,"highlight_end":30},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                     );","highlight_start":1,"highlight_end":24},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9419,"byte_end":9422,"line_start":261,"line_end":261,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                asm!(\"mov rdi, rsp","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":4498,"byte_end":4537,"line_start":120,"line_end":120,"column_start":38,"column_end":77,"is_primary":false,"text":[{"text":"                        .set_handler(wrap_handler!(local_apic_timer_handler), KERNEL_CODE_SELECTOR);","highlight_start":38,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"wrap_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8979,"byte_end":9946,"line_start":250,"line_end":282,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler($name: path) {","highlight_start":1,"highlight_end":34},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers). We don't need to manually align the stack, as it should","highlight_start":1,"highlight_end":94},{"text":"                 * already be aligned correctly.","highlight_start":1,"highlight_end":49},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x48","highlight_start":1,"highlight_end":36},{"text":"                      call $0\"","highlight_start":1,"highlight_end":31},{"text":"                    :","highlight_start":1,"highlight_end":22},{"text":"                    : \"i\"($name as extern \"C\" fn(&InterruptStackFrame))","highlight_start":1,"highlight_end":72},{"text":"                    : \"rdi\"","highlight_start":1,"highlight_end":28},{"text":"                    : \"intel\"","highlight_start":1,"highlight_end":30},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                     );","highlight_start":1,"highlight_end":24},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/interrupts/mod.rs:261:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        .set_handler(wrap_handler!(local_apic_timer_handler), KERNEL_CODE_SELECTOR);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m261\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                asm!(\"mov rdi, rsp\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8760,"byte_end":8763,"line_start":234,"line_end":234,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(\"pop r11","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9696,"byte_end":9712,"line_start":269,"line_end":269,"column_start":17,"column_end":33,"is_primary":false,"text":[{"text":"                restore_regs!();","highlight_start":17,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":4498,"byte_end":4537,"line_start":120,"line_end":120,"column_start":38,"column_end":77,"is_primary":false,"text":[{"text":"                        .set_handler(wrap_handler!(local_apic_timer_handler), KERNEL_CODE_SELECTOR);","highlight_start":38,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"wrap_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8979,"byte_end":9946,"line_start":250,"line_end":282,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler($name: path) {","highlight_start":1,"highlight_end":34},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers). We don't need to manually align the stack, as it should","highlight_start":1,"highlight_end":94},{"text":"                 * already be aligned correctly.","highlight_start":1,"highlight_end":49},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x48","highlight_start":1,"highlight_end":36},{"text":"                      call $0\"","highlight_start":1,"highlight_end":31},{"text":"                    :","highlight_start":1,"highlight_end":22},{"text":"                    : \"i\"($name as extern \"C\" fn(&InterruptStackFrame))","highlight_start":1,"highlight_end":72},{"text":"                    : \"rdi\"","highlight_start":1,"highlight_end":28},{"text":"                    : \"intel\"","highlight_start":1,"highlight_end":30},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                     );","highlight_start":1,"highlight_end":24},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"restore_regs!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8733,"byte_end":8977,"line_start":233,"line_end":248,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro restore_regs() {","highlight_start":1,"highlight_end":23},{"text":"    asm!(\"pop r11","highlight_start":1,"highlight_end":18},{"text":"          pop r10","highlight_start":1,"highlight_end":18},{"text":"          pop r9","highlight_start":1,"highlight_end":17},{"text":"          pop r8","highlight_start":1,"highlight_end":17},{"text":"          pop rdi","highlight_start":1,"highlight_end":18},{"text":"          pop rsi","highlight_start":1,"highlight_end":18},{"text":"          pop rdx","highlight_start":1,"highlight_end":18},{"text":"          pop rcx","highlight_start":1,"highlight_end":18},{"text":"          pop rax\"","highlight_start":1,"highlight_end":19},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        : \"intel\"","highlight_start":1,"highlight_end":18},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8760,"byte_end":8763,"line_start":234,"line_end":234,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(\"pop r11","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9696,"byte_end":9712,"line_start":269,"line_end":269,"column_start":17,"column_end":33,"is_primary":false,"text":[{"text":"                restore_regs!();","highlight_start":17,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":4498,"byte_end":4537,"line_start":120,"line_end":120,"column_start":38,"column_end":77,"is_primary":false,"text":[{"text":"                        .set_handler(wrap_handler!(local_apic_timer_handler), KERNEL_CODE_SELECTOR);","highlight_start":38,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"wrap_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8979,"byte_end":9946,"line_start":250,"line_end":282,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler($name: path) {","highlight_start":1,"highlight_end":34},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers). We don't need to manually align the stack, as it should","highlight_start":1,"highlight_end":94},{"text":"                 * already be aligned correctly.","highlight_start":1,"highlight_end":49},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x48","highlight_start":1,"highlight_end":36},{"text":"                      call $0\"","highlight_start":1,"highlight_end":31},{"text":"                    :","highlight_start":1,"highlight_end":22},{"text":"                    : \"i\"($name as extern \"C\" fn(&InterruptStackFrame))","highlight_start":1,"highlight_end":72},{"text":"                    : \"rdi\"","highlight_start":1,"highlight_end":28},{"text":"                    : \"intel\"","highlight_start":1,"highlight_end":30},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                     );","highlight_start":1,"highlight_end":24},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"restore_regs!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8733,"byte_end":8977,"line_start":233,"line_end":248,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro restore_regs() {","highlight_start":1,"highlight_end":23},{"text":"    asm!(\"pop r11","highlight_start":1,"highlight_end":18},{"text":"          pop r10","highlight_start":1,"highlight_end":18},{"text":"          pop r9","highlight_start":1,"highlight_end":17},{"text":"          pop r8","highlight_start":1,"highlight_end":17},{"text":"          pop rdi","highlight_start":1,"highlight_end":18},{"text":"          pop rsi","highlight_start":1,"highlight_end":18},{"text":"          pop rdx","highlight_start":1,"highlight_end":18},{"text":"          pop rcx","highlight_start":1,"highlight_end":18},{"text":"          pop rax\"","highlight_start":1,"highlight_end":19},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        : \"intel\"","highlight_start":1,"highlight_end":18},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/interrupts/mod.rs:234:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        .set_handler(wrap_handler!(local_apic_timer_handler), KERNEL_CODE_SELECTOR);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m234\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    asm!(\"pop r11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9729,"byte_end":9732,"line_start":270,"line_end":270,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                asm!(\"iretq\"","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":4498,"byte_end":4537,"line_start":120,"line_end":120,"column_start":38,"column_end":77,"is_primary":false,"text":[{"text":"                        .set_handler(wrap_handler!(local_apic_timer_handler), KERNEL_CODE_SELECTOR);","highlight_start":38,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"wrap_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8979,"byte_end":9946,"line_start":250,"line_end":282,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler($name: path) {","highlight_start":1,"highlight_end":34},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers). We don't need to manually align the stack, as it should","highlight_start":1,"highlight_end":94},{"text":"                 * already be aligned correctly.","highlight_start":1,"highlight_end":49},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x48","highlight_start":1,"highlight_end":36},{"text":"                      call $0\"","highlight_start":1,"highlight_end":31},{"text":"                    :","highlight_start":1,"highlight_end":22},{"text":"                    : \"i\"($name as extern \"C\" fn(&InterruptStackFrame))","highlight_start":1,"highlight_end":72},{"text":"                    : \"rdi\"","highlight_start":1,"highlight_end":28},{"text":"                    : \"intel\"","highlight_start":1,"highlight_end":30},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                     );","highlight_start":1,"highlight_end":24},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9729,"byte_end":9732,"line_start":270,"line_end":270,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                asm!(\"iretq\"","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":4498,"byte_end":4537,"line_start":120,"line_end":120,"column_start":38,"column_end":77,"is_primary":false,"text":[{"text":"                        .set_handler(wrap_handler!(local_apic_timer_handler), KERNEL_CODE_SELECTOR);","highlight_start":38,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"wrap_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8979,"byte_end":9946,"line_start":250,"line_end":282,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler($name: path) {","highlight_start":1,"highlight_end":34},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers). We don't need to manually align the stack, as it should","highlight_start":1,"highlight_end":94},{"text":"                 * already be aligned correctly.","highlight_start":1,"highlight_end":49},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x48","highlight_start":1,"highlight_end":36},{"text":"                      call $0\"","highlight_start":1,"highlight_end":31},{"text":"                    :","highlight_start":1,"highlight_end":22},{"text":"                    : \"i\"($name as extern \"C\" fn(&InterruptStackFrame))","highlight_start":1,"highlight_end":72},{"text":"                    : \"rdi\"","highlight_start":1,"highlight_end":28},{"text":"                    : \"intel\"","highlight_start":1,"highlight_end":30},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                     );","highlight_start":1,"highlight_end":24},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/interrupts/mod.rs:270:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        .set_handler(wrap_handler!(local_apic_timer_handler), KERNEL_CODE_SELECTOR);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m270\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                asm!(\"iretq\"\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8464,"byte_end":8467,"line_start":216,"line_end":216,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(\"push rax","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9389,"byte_end":9402,"line_start":260,"line_end":260,"column_start":17,"column_end":30,"is_primary":false,"text":[{"text":"                save_regs!();","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":4620,"byte_end":4651,"line_start":121,"line_end":121,"column_start":59,"column_end":90,"is_primary":false,"text":[{"text":"                    IDT[APIC_SPURIOUS_VECTOR].set_handler(wrap_handler!(spurious_handler), KERNEL_CODE_SELECTOR);","highlight_start":59,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"wrap_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8979,"byte_end":9946,"line_start":250,"line_end":282,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler($name: path) {","highlight_start":1,"highlight_end":34},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers). We don't need to manually align the stack, as it should","highlight_start":1,"highlight_end":94},{"text":"                 * already be aligned correctly.","highlight_start":1,"highlight_end":49},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x48","highlight_start":1,"highlight_end":36},{"text":"                      call $0\"","highlight_start":1,"highlight_end":31},{"text":"                    :","highlight_start":1,"highlight_end":22},{"text":"                    : \"i\"($name as extern \"C\" fn(&InterruptStackFrame))","highlight_start":1,"highlight_end":72},{"text":"                    : \"rdi\"","highlight_start":1,"highlight_end":28},{"text":"                    : \"intel\"","highlight_start":1,"highlight_end":30},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                     );","highlight_start":1,"highlight_end":24},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"save_regs!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8440,"byte_end":8690,"line_start":215,"line_end":230,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro save_regs() {","highlight_start":1,"highlight_end":20},{"text":"    asm!(\"push rax","highlight_start":1,"highlight_end":19},{"text":"          push rcx","highlight_start":1,"highlight_end":19},{"text":"          push rdx","highlight_start":1,"highlight_end":19},{"text":"          push rsi","highlight_start":1,"highlight_end":19},{"text":"          push rdi","highlight_start":1,"highlight_end":19},{"text":"          push r8","highlight_start":1,"highlight_end":18},{"text":"          push r9","highlight_start":1,"highlight_end":18},{"text":"          push r10","highlight_start":1,"highlight_end":19},{"text":"          push r11\"","highlight_start":1,"highlight_end":20},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        : \"intel\"","highlight_start":1,"highlight_end":18},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8464,"byte_end":8467,"line_start":216,"line_end":216,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(\"push rax","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9389,"byte_end":9402,"line_start":260,"line_end":260,"column_start":17,"column_end":30,"is_primary":false,"text":[{"text":"                save_regs!();","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":4620,"byte_end":4651,"line_start":121,"line_end":121,"column_start":59,"column_end":90,"is_primary":false,"text":[{"text":"                    IDT[APIC_SPURIOUS_VECTOR].set_handler(wrap_handler!(spurious_handler), KERNEL_CODE_SELECTOR);","highlight_start":59,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"wrap_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8979,"byte_end":9946,"line_start":250,"line_end":282,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler($name: path) {","highlight_start":1,"highlight_end":34},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers). We don't need to manually align the stack, as it should","highlight_start":1,"highlight_end":94},{"text":"                 * already be aligned correctly.","highlight_start":1,"highlight_end":49},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x48","highlight_start":1,"highlight_end":36},{"text":"                      call $0\"","highlight_start":1,"highlight_end":31},{"text":"                    :","highlight_start":1,"highlight_end":22},{"text":"                    : \"i\"($name as extern \"C\" fn(&InterruptStackFrame))","highlight_start":1,"highlight_end":72},{"text":"                    : \"rdi\"","highlight_start":1,"highlight_end":28},{"text":"                    : \"intel\"","highlight_start":1,"highlight_end":30},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                     );","highlight_start":1,"highlight_end":24},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"save_regs!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8440,"byte_end":8690,"line_start":215,"line_end":230,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro save_regs() {","highlight_start":1,"highlight_end":20},{"text":"    asm!(\"push rax","highlight_start":1,"highlight_end":19},{"text":"          push rcx","highlight_start":1,"highlight_end":19},{"text":"          push rdx","highlight_start":1,"highlight_end":19},{"text":"          push rsi","highlight_start":1,"highlight_end":19},{"text":"          push rdi","highlight_start":1,"highlight_end":19},{"text":"          push r8","highlight_start":1,"highlight_end":18},{"text":"          push r9","highlight_start":1,"highlight_end":18},{"text":"          push r10","highlight_start":1,"highlight_end":19},{"text":"          push r11\"","highlight_start":1,"highlight_end":20},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        : \"intel\"","highlight_start":1,"highlight_end":18},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/interrupts/mod.rs:216:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    IDT[APIC_SPURIOUS_VECTOR].set_handler(wrap_handler!(spurious_handler), KERNEL_CODE_SELECTOR);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    asm!(\"push rax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9419,"byte_end":9422,"line_start":261,"line_end":261,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                asm!(\"mov rdi, rsp","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":4620,"byte_end":4651,"line_start":121,"line_end":121,"column_start":59,"column_end":90,"is_primary":false,"text":[{"text":"                    IDT[APIC_SPURIOUS_VECTOR].set_handler(wrap_handler!(spurious_handler), KERNEL_CODE_SELECTOR);","highlight_start":59,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"wrap_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8979,"byte_end":9946,"line_start":250,"line_end":282,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler($name: path) {","highlight_start":1,"highlight_end":34},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers). We don't need to manually align the stack, as it should","highlight_start":1,"highlight_end":94},{"text":"                 * already be aligned correctly.","highlight_start":1,"highlight_end":49},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x48","highlight_start":1,"highlight_end":36},{"text":"                      call $0\"","highlight_start":1,"highlight_end":31},{"text":"                    :","highlight_start":1,"highlight_end":22},{"text":"                    : \"i\"($name as extern \"C\" fn(&InterruptStackFrame))","highlight_start":1,"highlight_end":72},{"text":"                    : \"rdi\"","highlight_start":1,"highlight_end":28},{"text":"                    : \"intel\"","highlight_start":1,"highlight_end":30},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                     );","highlight_start":1,"highlight_end":24},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9419,"byte_end":9422,"line_start":261,"line_end":261,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                asm!(\"mov rdi, rsp","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":4620,"byte_end":4651,"line_start":121,"line_end":121,"column_start":59,"column_end":90,"is_primary":false,"text":[{"text":"                    IDT[APIC_SPURIOUS_VECTOR].set_handler(wrap_handler!(spurious_handler), KERNEL_CODE_SELECTOR);","highlight_start":59,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"wrap_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8979,"byte_end":9946,"line_start":250,"line_end":282,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler($name: path) {","highlight_start":1,"highlight_end":34},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers). We don't need to manually align the stack, as it should","highlight_start":1,"highlight_end":94},{"text":"                 * already be aligned correctly.","highlight_start":1,"highlight_end":49},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x48","highlight_start":1,"highlight_end":36},{"text":"                      call $0\"","highlight_start":1,"highlight_end":31},{"text":"                    :","highlight_start":1,"highlight_end":22},{"text":"                    : \"i\"($name as extern \"C\" fn(&InterruptStackFrame))","highlight_start":1,"highlight_end":72},{"text":"                    : \"rdi\"","highlight_start":1,"highlight_end":28},{"text":"                    : \"intel\"","highlight_start":1,"highlight_end":30},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                     );","highlight_start":1,"highlight_end":24},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/interrupts/mod.rs:261:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    IDT[APIC_SPURIOUS_VECTOR].set_handler(wrap_handler!(spurious_handler), KERNEL_CODE_SELECTOR);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m261\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                asm!(\"mov rdi, rsp\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8760,"byte_end":8763,"line_start":234,"line_end":234,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(\"pop r11","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9696,"byte_end":9712,"line_start":269,"line_end":269,"column_start":17,"column_end":33,"is_primary":false,"text":[{"text":"                restore_regs!();","highlight_start":17,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":4620,"byte_end":4651,"line_start":121,"line_end":121,"column_start":59,"column_end":90,"is_primary":false,"text":[{"text":"                    IDT[APIC_SPURIOUS_VECTOR].set_handler(wrap_handler!(spurious_handler), KERNEL_CODE_SELECTOR);","highlight_start":59,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"wrap_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8979,"byte_end":9946,"line_start":250,"line_end":282,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler($name: path) {","highlight_start":1,"highlight_end":34},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers). We don't need to manually align the stack, as it should","highlight_start":1,"highlight_end":94},{"text":"                 * already be aligned correctly.","highlight_start":1,"highlight_end":49},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x48","highlight_start":1,"highlight_end":36},{"text":"                      call $0\"","highlight_start":1,"highlight_end":31},{"text":"                    :","highlight_start":1,"highlight_end":22},{"text":"                    : \"i\"($name as extern \"C\" fn(&InterruptStackFrame))","highlight_start":1,"highlight_end":72},{"text":"                    : \"rdi\"","highlight_start":1,"highlight_end":28},{"text":"                    : \"intel\"","highlight_start":1,"highlight_end":30},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                     );","highlight_start":1,"highlight_end":24},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"restore_regs!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8733,"byte_end":8977,"line_start":233,"line_end":248,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro restore_regs() {","highlight_start":1,"highlight_end":23},{"text":"    asm!(\"pop r11","highlight_start":1,"highlight_end":18},{"text":"          pop r10","highlight_start":1,"highlight_end":18},{"text":"          pop r9","highlight_start":1,"highlight_end":17},{"text":"          pop r8","highlight_start":1,"highlight_end":17},{"text":"          pop rdi","highlight_start":1,"highlight_end":18},{"text":"          pop rsi","highlight_start":1,"highlight_end":18},{"text":"          pop rdx","highlight_start":1,"highlight_end":18},{"text":"          pop rcx","highlight_start":1,"highlight_end":18},{"text":"          pop rax\"","highlight_start":1,"highlight_end":19},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        : \"intel\"","highlight_start":1,"highlight_end":18},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8760,"byte_end":8763,"line_start":234,"line_end":234,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(\"pop r11","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9696,"byte_end":9712,"line_start":269,"line_end":269,"column_start":17,"column_end":33,"is_primary":false,"text":[{"text":"                restore_regs!();","highlight_start":17,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":4620,"byte_end":4651,"line_start":121,"line_end":121,"column_start":59,"column_end":90,"is_primary":false,"text":[{"text":"                    IDT[APIC_SPURIOUS_VECTOR].set_handler(wrap_handler!(spurious_handler), KERNEL_CODE_SELECTOR);","highlight_start":59,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"wrap_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8979,"byte_end":9946,"line_start":250,"line_end":282,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler($name: path) {","highlight_start":1,"highlight_end":34},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers). We don't need to manually align the stack, as it should","highlight_start":1,"highlight_end":94},{"text":"                 * already be aligned correctly.","highlight_start":1,"highlight_end":49},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x48","highlight_start":1,"highlight_end":36},{"text":"                      call $0\"","highlight_start":1,"highlight_end":31},{"text":"                    :","highlight_start":1,"highlight_end":22},{"text":"                    : \"i\"($name as extern \"C\" fn(&InterruptStackFrame))","highlight_start":1,"highlight_end":72},{"text":"                    : \"rdi\"","highlight_start":1,"highlight_end":28},{"text":"                    : \"intel\"","highlight_start":1,"highlight_end":30},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                     );","highlight_start":1,"highlight_end":24},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"restore_regs!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8733,"byte_end":8977,"line_start":233,"line_end":248,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro restore_regs() {","highlight_start":1,"highlight_end":23},{"text":"    asm!(\"pop r11","highlight_start":1,"highlight_end":18},{"text":"          pop r10","highlight_start":1,"highlight_end":18},{"text":"          pop r9","highlight_start":1,"highlight_end":17},{"text":"          pop r8","highlight_start":1,"highlight_end":17},{"text":"          pop rdi","highlight_start":1,"highlight_end":18},{"text":"          pop rsi","highlight_start":1,"highlight_end":18},{"text":"          pop rdx","highlight_start":1,"highlight_end":18},{"text":"          pop rcx","highlight_start":1,"highlight_end":18},{"text":"          pop rax\"","highlight_start":1,"highlight_end":19},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        : \"intel\"","highlight_start":1,"highlight_end":18},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/interrupts/mod.rs:234:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    IDT[APIC_SPURIOUS_VECTOR].set_handler(wrap_handler!(spurious_handler), KERNEL_CODE_SELECTOR);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m234\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    asm!(\"pop r11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9729,"byte_end":9732,"line_start":270,"line_end":270,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                asm!(\"iretq\"","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":4620,"byte_end":4651,"line_start":121,"line_end":121,"column_start":59,"column_end":90,"is_primary":false,"text":[{"text":"                    IDT[APIC_SPURIOUS_VECTOR].set_handler(wrap_handler!(spurious_handler), KERNEL_CODE_SELECTOR);","highlight_start":59,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"wrap_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8979,"byte_end":9946,"line_start":250,"line_end":282,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler($name: path) {","highlight_start":1,"highlight_end":34},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers). We don't need to manually align the stack, as it should","highlight_start":1,"highlight_end":94},{"text":"                 * already be aligned correctly.","highlight_start":1,"highlight_end":49},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x48","highlight_start":1,"highlight_end":36},{"text":"                      call $0\"","highlight_start":1,"highlight_end":31},{"text":"                    :","highlight_start":1,"highlight_end":22},{"text":"                    : \"i\"($name as extern \"C\" fn(&InterruptStackFrame))","highlight_start":1,"highlight_end":72},{"text":"                    : \"rdi\"","highlight_start":1,"highlight_end":28},{"text":"                    : \"intel\"","highlight_start":1,"highlight_end":30},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                     );","highlight_start":1,"highlight_end":24},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9729,"byte_end":9732,"line_start":270,"line_end":270,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                asm!(\"iretq\"","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":4620,"byte_end":4651,"line_start":121,"line_end":121,"column_start":59,"column_end":90,"is_primary":false,"text":[{"text":"                    IDT[APIC_SPURIOUS_VECTOR].set_handler(wrap_handler!(spurious_handler), KERNEL_CODE_SELECTOR);","highlight_start":59,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"wrap_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8979,"byte_end":9946,"line_start":250,"line_end":282,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler($name: path) {","highlight_start":1,"highlight_end":34},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers). We don't need to manually align the stack, as it should","highlight_start":1,"highlight_end":94},{"text":"                 * already be aligned correctly.","highlight_start":1,"highlight_end":49},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x48","highlight_start":1,"highlight_end":36},{"text":"                      call $0\"","highlight_start":1,"highlight_end":31},{"text":"                    :","highlight_start":1,"highlight_end":22},{"text":"                    : \"i\"($name as extern \"C\" fn(&InterruptStackFrame))","highlight_start":1,"highlight_end":72},{"text":"                    : \"rdi\"","highlight_start":1,"highlight_end":28},{"text":"                    : \"intel\"","highlight_start":1,"highlight_end":30},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                     );","highlight_start":1,"highlight_end":24},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/interrupts/mod.rs:270:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    IDT[APIC_SPURIOUS_VECTOR].set_handler(wrap_handler!(spurious_handler), KERNEL_CODE_SELECTOR);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m270\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                asm!(\"iretq\"\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8464,"byte_end":8467,"line_start":216,"line_end":216,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(\"push rax","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9389,"byte_end":9402,"line_start":260,"line_end":260,"column_start":17,"column_end":30,"is_primary":false,"text":[{"text":"                save_regs!();","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5835,"byte_end":5858,"line_start":150,"line_end":150,"column_start":41,"column_end":64,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6140,"byte_end":6182,"line_start":160,"line_end":160,"column_start":9,"column_end":51,"is_primary":false,"text":[{"text":"        set_handler!(nmi, exception::nmi_handler);","highlight_start":9,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5724,"byte_end":5906,"line_start":148,"line_end":152,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler($name: ident, $handler: path) {","highlight_start":9,"highlight_end":58},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":88},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8979,"byte_end":9946,"line_start":250,"line_end":282,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler($name: path) {","highlight_start":1,"highlight_end":34},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers). We don't need to manually align the stack, as it should","highlight_start":1,"highlight_end":94},{"text":"                 * already be aligned correctly.","highlight_start":1,"highlight_end":49},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x48","highlight_start":1,"highlight_end":36},{"text":"                      call $0\"","highlight_start":1,"highlight_end":31},{"text":"                    :","highlight_start":1,"highlight_end":22},{"text":"                    : \"i\"($name as extern \"C\" fn(&InterruptStackFrame))","highlight_start":1,"highlight_end":72},{"text":"                    : \"rdi\"","highlight_start":1,"highlight_end":28},{"text":"                    : \"intel\"","highlight_start":1,"highlight_end":30},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                     );","highlight_start":1,"highlight_end":24},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"save_regs!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8440,"byte_end":8690,"line_start":215,"line_end":230,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro save_regs() {","highlight_start":1,"highlight_end":20},{"text":"    asm!(\"push rax","highlight_start":1,"highlight_end":19},{"text":"          push rcx","highlight_start":1,"highlight_end":19},{"text":"          push rdx","highlight_start":1,"highlight_end":19},{"text":"          push rsi","highlight_start":1,"highlight_end":19},{"text":"          push rdi","highlight_start":1,"highlight_end":19},{"text":"          push r8","highlight_start":1,"highlight_end":18},{"text":"          push r9","highlight_start":1,"highlight_end":18},{"text":"          push r10","highlight_start":1,"highlight_end":19},{"text":"          push r11\"","highlight_start":1,"highlight_end":20},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        : \"intel\"","highlight_start":1,"highlight_end":18},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8464,"byte_end":8467,"line_start":216,"line_end":216,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(\"push rax","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9389,"byte_end":9402,"line_start":260,"line_end":260,"column_start":17,"column_end":30,"is_primary":false,"text":[{"text":"                save_regs!();","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5835,"byte_end":5858,"line_start":150,"line_end":150,"column_start":41,"column_end":64,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6140,"byte_end":6182,"line_start":160,"line_end":160,"column_start":9,"column_end":51,"is_primary":false,"text":[{"text":"        set_handler!(nmi, exception::nmi_handler);","highlight_start":9,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5724,"byte_end":5906,"line_start":148,"line_end":152,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler($name: ident, $handler: path) {","highlight_start":9,"highlight_end":58},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":88},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8979,"byte_end":9946,"line_start":250,"line_end":282,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler($name: path) {","highlight_start":1,"highlight_end":34},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers). We don't need to manually align the stack, as it should","highlight_start":1,"highlight_end":94},{"text":"                 * already be aligned correctly.","highlight_start":1,"highlight_end":49},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x48","highlight_start":1,"highlight_end":36},{"text":"                      call $0\"","highlight_start":1,"highlight_end":31},{"text":"                    :","highlight_start":1,"highlight_end":22},{"text":"                    : \"i\"($name as extern \"C\" fn(&InterruptStackFrame))","highlight_start":1,"highlight_end":72},{"text":"                    : \"rdi\"","highlight_start":1,"highlight_end":28},{"text":"                    : \"intel\"","highlight_start":1,"highlight_end":30},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                     );","highlight_start":1,"highlight_end":24},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"save_regs!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8440,"byte_end":8690,"line_start":215,"line_end":230,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro save_regs() {","highlight_start":1,"highlight_end":20},{"text":"    asm!(\"push rax","highlight_start":1,"highlight_end":19},{"text":"          push rcx","highlight_start":1,"highlight_end":19},{"text":"          push rdx","highlight_start":1,"highlight_end":19},{"text":"          push rsi","highlight_start":1,"highlight_end":19},{"text":"          push rdi","highlight_start":1,"highlight_end":19},{"text":"          push r8","highlight_start":1,"highlight_end":18},{"text":"          push r9","highlight_start":1,"highlight_end":18},{"text":"          push r10","highlight_start":1,"highlight_end":19},{"text":"          push r11\"","highlight_start":1,"highlight_end":20},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        : \"intel\"","highlight_start":1,"highlight_end":18},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/interrupts/mod.rs:216:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m160\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        set_handler!(nmi, exception::nmi_handler);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    asm!(\"push rax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9419,"byte_end":9422,"line_start":261,"line_end":261,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                asm!(\"mov rdi, rsp","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5835,"byte_end":5858,"line_start":150,"line_end":150,"column_start":41,"column_end":64,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6140,"byte_end":6182,"line_start":160,"line_end":160,"column_start":9,"column_end":51,"is_primary":false,"text":[{"text":"        set_handler!(nmi, exception::nmi_handler);","highlight_start":9,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5724,"byte_end":5906,"line_start":148,"line_end":152,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler($name: ident, $handler: path) {","highlight_start":9,"highlight_end":58},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":88},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8979,"byte_end":9946,"line_start":250,"line_end":282,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler($name: path) {","highlight_start":1,"highlight_end":34},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers). We don't need to manually align the stack, as it should","highlight_start":1,"highlight_end":94},{"text":"                 * already be aligned correctly.","highlight_start":1,"highlight_end":49},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x48","highlight_start":1,"highlight_end":36},{"text":"                      call $0\"","highlight_start":1,"highlight_end":31},{"text":"                    :","highlight_start":1,"highlight_end":22},{"text":"                    : \"i\"($name as extern \"C\" fn(&InterruptStackFrame))","highlight_start":1,"highlight_end":72},{"text":"                    : \"rdi\"","highlight_start":1,"highlight_end":28},{"text":"                    : \"intel\"","highlight_start":1,"highlight_end":30},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                     );","highlight_start":1,"highlight_end":24},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9419,"byte_end":9422,"line_start":261,"line_end":261,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                asm!(\"mov rdi, rsp","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5835,"byte_end":5858,"line_start":150,"line_end":150,"column_start":41,"column_end":64,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6140,"byte_end":6182,"line_start":160,"line_end":160,"column_start":9,"column_end":51,"is_primary":false,"text":[{"text":"        set_handler!(nmi, exception::nmi_handler);","highlight_start":9,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5724,"byte_end":5906,"line_start":148,"line_end":152,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler($name: ident, $handler: path) {","highlight_start":9,"highlight_end":58},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":88},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8979,"byte_end":9946,"line_start":250,"line_end":282,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler($name: path) {","highlight_start":1,"highlight_end":34},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers). We don't need to manually align the stack, as it should","highlight_start":1,"highlight_end":94},{"text":"                 * already be aligned correctly.","highlight_start":1,"highlight_end":49},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x48","highlight_start":1,"highlight_end":36},{"text":"                      call $0\"","highlight_start":1,"highlight_end":31},{"text":"                    :","highlight_start":1,"highlight_end":22},{"text":"                    : \"i\"($name as extern \"C\" fn(&InterruptStackFrame))","highlight_start":1,"highlight_end":72},{"text":"                    : \"rdi\"","highlight_start":1,"highlight_end":28},{"text":"                    : \"intel\"","highlight_start":1,"highlight_end":30},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                     );","highlight_start":1,"highlight_end":24},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/interrupts/mod.rs:261:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m160\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        set_handler!(nmi, exception::nmi_handler);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m261\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                asm!(\"mov rdi, rsp\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8760,"byte_end":8763,"line_start":234,"line_end":234,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(\"pop r11","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9696,"byte_end":9712,"line_start":269,"line_end":269,"column_start":17,"column_end":33,"is_primary":false,"text":[{"text":"                restore_regs!();","highlight_start":17,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5835,"byte_end":5858,"line_start":150,"line_end":150,"column_start":41,"column_end":64,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6140,"byte_end":6182,"line_start":160,"line_end":160,"column_start":9,"column_end":51,"is_primary":false,"text":[{"text":"        set_handler!(nmi, exception::nmi_handler);","highlight_start":9,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5724,"byte_end":5906,"line_start":148,"line_end":152,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler($name: ident, $handler: path) {","highlight_start":9,"highlight_end":58},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":88},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8979,"byte_end":9946,"line_start":250,"line_end":282,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler($name: path) {","highlight_start":1,"highlight_end":34},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers). We don't need to manually align the stack, as it should","highlight_start":1,"highlight_end":94},{"text":"                 * already be aligned correctly.","highlight_start":1,"highlight_end":49},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x48","highlight_start":1,"highlight_end":36},{"text":"                      call $0\"","highlight_start":1,"highlight_end":31},{"text":"                    :","highlight_start":1,"highlight_end":22},{"text":"                    : \"i\"($name as extern \"C\" fn(&InterruptStackFrame))","highlight_start":1,"highlight_end":72},{"text":"                    : \"rdi\"","highlight_start":1,"highlight_end":28},{"text":"                    : \"intel\"","highlight_start":1,"highlight_end":30},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                     );","highlight_start":1,"highlight_end":24},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"restore_regs!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8733,"byte_end":8977,"line_start":233,"line_end":248,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro restore_regs() {","highlight_start":1,"highlight_end":23},{"text":"    asm!(\"pop r11","highlight_start":1,"highlight_end":18},{"text":"          pop r10","highlight_start":1,"highlight_end":18},{"text":"          pop r9","highlight_start":1,"highlight_end":17},{"text":"          pop r8","highlight_start":1,"highlight_end":17},{"text":"          pop rdi","highlight_start":1,"highlight_end":18},{"text":"          pop rsi","highlight_start":1,"highlight_end":18},{"text":"          pop rdx","highlight_start":1,"highlight_end":18},{"text":"          pop rcx","highlight_start":1,"highlight_end":18},{"text":"          pop rax\"","highlight_start":1,"highlight_end":19},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        : \"intel\"","highlight_start":1,"highlight_end":18},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8760,"byte_end":8763,"line_start":234,"line_end":234,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(\"pop r11","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9696,"byte_end":9712,"line_start":269,"line_end":269,"column_start":17,"column_end":33,"is_primary":false,"text":[{"text":"                restore_regs!();","highlight_start":17,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5835,"byte_end":5858,"line_start":150,"line_end":150,"column_start":41,"column_end":64,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6140,"byte_end":6182,"line_start":160,"line_end":160,"column_start":9,"column_end":51,"is_primary":false,"text":[{"text":"        set_handler!(nmi, exception::nmi_handler);","highlight_start":9,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5724,"byte_end":5906,"line_start":148,"line_end":152,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler($name: ident, $handler: path) {","highlight_start":9,"highlight_end":58},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":88},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8979,"byte_end":9946,"line_start":250,"line_end":282,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler($name: path) {","highlight_start":1,"highlight_end":34},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers). We don't need to manually align the stack, as it should","highlight_start":1,"highlight_end":94},{"text":"                 * already be aligned correctly.","highlight_start":1,"highlight_end":49},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x48","highlight_start":1,"highlight_end":36},{"text":"                      call $0\"","highlight_start":1,"highlight_end":31},{"text":"                    :","highlight_start":1,"highlight_end":22},{"text":"                    : \"i\"($name as extern \"C\" fn(&InterruptStackFrame))","highlight_start":1,"highlight_end":72},{"text":"                    : \"rdi\"","highlight_start":1,"highlight_end":28},{"text":"                    : \"intel\"","highlight_start":1,"highlight_end":30},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                     );","highlight_start":1,"highlight_end":24},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"restore_regs!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8733,"byte_end":8977,"line_start":233,"line_end":248,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro restore_regs() {","highlight_start":1,"highlight_end":23},{"text":"    asm!(\"pop r11","highlight_start":1,"highlight_end":18},{"text":"          pop r10","highlight_start":1,"highlight_end":18},{"text":"          pop r9","highlight_start":1,"highlight_end":17},{"text":"          pop r8","highlight_start":1,"highlight_end":17},{"text":"          pop rdi","highlight_start":1,"highlight_end":18},{"text":"          pop rsi","highlight_start":1,"highlight_end":18},{"text":"          pop rdx","highlight_start":1,"highlight_end":18},{"text":"          pop rcx","highlight_start":1,"highlight_end":18},{"text":"          pop rax\"","highlight_start":1,"highlight_end":19},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        : \"intel\"","highlight_start":1,"highlight_end":18},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/interrupts/mod.rs:234:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m160\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        set_handler!(nmi, exception::nmi_handler);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m234\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    asm!(\"pop r11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9729,"byte_end":9732,"line_start":270,"line_end":270,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                asm!(\"iretq\"","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5835,"byte_end":5858,"line_start":150,"line_end":150,"column_start":41,"column_end":64,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6140,"byte_end":6182,"line_start":160,"line_end":160,"column_start":9,"column_end":51,"is_primary":false,"text":[{"text":"        set_handler!(nmi, exception::nmi_handler);","highlight_start":9,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5724,"byte_end":5906,"line_start":148,"line_end":152,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler($name: ident, $handler: path) {","highlight_start":9,"highlight_end":58},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":88},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8979,"byte_end":9946,"line_start":250,"line_end":282,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler($name: path) {","highlight_start":1,"highlight_end":34},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers). We don't need to manually align the stack, as it should","highlight_start":1,"highlight_end":94},{"text":"                 * already be aligned correctly.","highlight_start":1,"highlight_end":49},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x48","highlight_start":1,"highlight_end":36},{"text":"                      call $0\"","highlight_start":1,"highlight_end":31},{"text":"                    :","highlight_start":1,"highlight_end":22},{"text":"                    : \"i\"($name as extern \"C\" fn(&InterruptStackFrame))","highlight_start":1,"highlight_end":72},{"text":"                    : \"rdi\"","highlight_start":1,"highlight_end":28},{"text":"                    : \"intel\"","highlight_start":1,"highlight_end":30},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                     );","highlight_start":1,"highlight_end":24},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9729,"byte_end":9732,"line_start":270,"line_end":270,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                asm!(\"iretq\"","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5835,"byte_end":5858,"line_start":150,"line_end":150,"column_start":41,"column_end":64,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6140,"byte_end":6182,"line_start":160,"line_end":160,"column_start":9,"column_end":51,"is_primary":false,"text":[{"text":"        set_handler!(nmi, exception::nmi_handler);","highlight_start":9,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5724,"byte_end":5906,"line_start":148,"line_end":152,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler($name: ident, $handler: path) {","highlight_start":9,"highlight_end":58},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":88},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8979,"byte_end":9946,"line_start":250,"line_end":282,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler($name: path) {","highlight_start":1,"highlight_end":34},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers). We don't need to manually align the stack, as it should","highlight_start":1,"highlight_end":94},{"text":"                 * already be aligned correctly.","highlight_start":1,"highlight_end":49},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x48","highlight_start":1,"highlight_end":36},{"text":"                      call $0\"","highlight_start":1,"highlight_end":31},{"text":"                    :","highlight_start":1,"highlight_end":22},{"text":"                    : \"i\"($name as extern \"C\" fn(&InterruptStackFrame))","highlight_start":1,"highlight_end":72},{"text":"                    : \"rdi\"","highlight_start":1,"highlight_end":28},{"text":"                    : \"intel\"","highlight_start":1,"highlight_end":30},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                     );","highlight_start":1,"highlight_end":24},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/interrupts/mod.rs:270:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m160\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        set_handler!(nmi, exception::nmi_handler);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m270\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                asm!(\"iretq\"\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8464,"byte_end":8467,"line_start":216,"line_end":216,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(\"push rax","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9389,"byte_end":9402,"line_start":260,"line_end":260,"column_start":17,"column_end":30,"is_primary":false,"text":[{"text":"                save_regs!();","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5835,"byte_end":5858,"line_start":150,"line_end":150,"column_start":41,"column_end":64,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6191,"byte_end":6247,"line_start":161,"line_end":161,"column_start":9,"column_end":65,"is_primary":false,"text":[{"text":"        set_handler!(breakpoint, exception::breakpoint_handler);","highlight_start":9,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5724,"byte_end":5906,"line_start":148,"line_end":152,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler($name: ident, $handler: path) {","highlight_start":9,"highlight_end":58},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":88},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8979,"byte_end":9946,"line_start":250,"line_end":282,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler($name: path) {","highlight_start":1,"highlight_end":34},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers). We don't need to manually align the stack, as it should","highlight_start":1,"highlight_end":94},{"text":"                 * already be aligned correctly.","highlight_start":1,"highlight_end":49},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x48","highlight_start":1,"highlight_end":36},{"text":"                      call $0\"","highlight_start":1,"highlight_end":31},{"text":"                    :","highlight_start":1,"highlight_end":22},{"text":"                    : \"i\"($name as extern \"C\" fn(&InterruptStackFrame))","highlight_start":1,"highlight_end":72},{"text":"                    : \"rdi\"","highlight_start":1,"highlight_end":28},{"text":"                    : \"intel\"","highlight_start":1,"highlight_end":30},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                     );","highlight_start":1,"highlight_end":24},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"save_regs!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8440,"byte_end":8690,"line_start":215,"line_end":230,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro save_regs() {","highlight_start":1,"highlight_end":20},{"text":"    asm!(\"push rax","highlight_start":1,"highlight_end":19},{"text":"          push rcx","highlight_start":1,"highlight_end":19},{"text":"          push rdx","highlight_start":1,"highlight_end":19},{"text":"          push rsi","highlight_start":1,"highlight_end":19},{"text":"          push rdi","highlight_start":1,"highlight_end":19},{"text":"          push r8","highlight_start":1,"highlight_end":18},{"text":"          push r9","highlight_start":1,"highlight_end":18},{"text":"          push r10","highlight_start":1,"highlight_end":19},{"text":"          push r11\"","highlight_start":1,"highlight_end":20},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        : \"intel\"","highlight_start":1,"highlight_end":18},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8464,"byte_end":8467,"line_start":216,"line_end":216,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(\"push rax","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9389,"byte_end":9402,"line_start":260,"line_end":260,"column_start":17,"column_end":30,"is_primary":false,"text":[{"text":"                save_regs!();","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5835,"byte_end":5858,"line_start":150,"line_end":150,"column_start":41,"column_end":64,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6191,"byte_end":6247,"line_start":161,"line_end":161,"column_start":9,"column_end":65,"is_primary":false,"text":[{"text":"        set_handler!(breakpoint, exception::breakpoint_handler);","highlight_start":9,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5724,"byte_end":5906,"line_start":148,"line_end":152,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler($name: ident, $handler: path) {","highlight_start":9,"highlight_end":58},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":88},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8979,"byte_end":9946,"line_start":250,"line_end":282,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler($name: path) {","highlight_start":1,"highlight_end":34},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers). We don't need to manually align the stack, as it should","highlight_start":1,"highlight_end":94},{"text":"                 * already be aligned correctly.","highlight_start":1,"highlight_end":49},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x48","highlight_start":1,"highlight_end":36},{"text":"                      call $0\"","highlight_start":1,"highlight_end":31},{"text":"                    :","highlight_start":1,"highlight_end":22},{"text":"                    : \"i\"($name as extern \"C\" fn(&InterruptStackFrame))","highlight_start":1,"highlight_end":72},{"text":"                    : \"rdi\"","highlight_start":1,"highlight_end":28},{"text":"                    : \"intel\"","highlight_start":1,"highlight_end":30},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                     );","highlight_start":1,"highlight_end":24},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"save_regs!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8440,"byte_end":8690,"line_start":215,"line_end":230,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro save_regs() {","highlight_start":1,"highlight_end":20},{"text":"    asm!(\"push rax","highlight_start":1,"highlight_end":19},{"text":"          push rcx","highlight_start":1,"highlight_end":19},{"text":"          push rdx","highlight_start":1,"highlight_end":19},{"text":"          push rsi","highlight_start":1,"highlight_end":19},{"text":"          push rdi","highlight_start":1,"highlight_end":19},{"text":"          push r8","highlight_start":1,"highlight_end":18},{"text":"          push r9","highlight_start":1,"highlight_end":18},{"text":"          push r10","highlight_start":1,"highlight_end":19},{"text":"          push r11\"","highlight_start":1,"highlight_end":20},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        : \"intel\"","highlight_start":1,"highlight_end":18},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/interrupts/mod.rs:216:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        set_handler!(breakpoint, exception::breakpoint_handler);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    asm!(\"push rax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9419,"byte_end":9422,"line_start":261,"line_end":261,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                asm!(\"mov rdi, rsp","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5835,"byte_end":5858,"line_start":150,"line_end":150,"column_start":41,"column_end":64,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6191,"byte_end":6247,"line_start":161,"line_end":161,"column_start":9,"column_end":65,"is_primary":false,"text":[{"text":"        set_handler!(breakpoint, exception::breakpoint_handler);","highlight_start":9,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5724,"byte_end":5906,"line_start":148,"line_end":152,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler($name: ident, $handler: path) {","highlight_start":9,"highlight_end":58},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":88},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8979,"byte_end":9946,"line_start":250,"line_end":282,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler($name: path) {","highlight_start":1,"highlight_end":34},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers). We don't need to manually align the stack, as it should","highlight_start":1,"highlight_end":94},{"text":"                 * already be aligned correctly.","highlight_start":1,"highlight_end":49},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x48","highlight_start":1,"highlight_end":36},{"text":"                      call $0\"","highlight_start":1,"highlight_end":31},{"text":"                    :","highlight_start":1,"highlight_end":22},{"text":"                    : \"i\"($name as extern \"C\" fn(&InterruptStackFrame))","highlight_start":1,"highlight_end":72},{"text":"                    : \"rdi\"","highlight_start":1,"highlight_end":28},{"text":"                    : \"intel\"","highlight_start":1,"highlight_end":30},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                     );","highlight_start":1,"highlight_end":24},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9419,"byte_end":9422,"line_start":261,"line_end":261,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                asm!(\"mov rdi, rsp","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5835,"byte_end":5858,"line_start":150,"line_end":150,"column_start":41,"column_end":64,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6191,"byte_end":6247,"line_start":161,"line_end":161,"column_start":9,"column_end":65,"is_primary":false,"text":[{"text":"        set_handler!(breakpoint, exception::breakpoint_handler);","highlight_start":9,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5724,"byte_end":5906,"line_start":148,"line_end":152,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler($name: ident, $handler: path) {","highlight_start":9,"highlight_end":58},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":88},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8979,"byte_end":9946,"line_start":250,"line_end":282,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler($name: path) {","highlight_start":1,"highlight_end":34},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers). We don't need to manually align the stack, as it should","highlight_start":1,"highlight_end":94},{"text":"                 * already be aligned correctly.","highlight_start":1,"highlight_end":49},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x48","highlight_start":1,"highlight_end":36},{"text":"                      call $0\"","highlight_start":1,"highlight_end":31},{"text":"                    :","highlight_start":1,"highlight_end":22},{"text":"                    : \"i\"($name as extern \"C\" fn(&InterruptStackFrame))","highlight_start":1,"highlight_end":72},{"text":"                    : \"rdi\"","highlight_start":1,"highlight_end":28},{"text":"                    : \"intel\"","highlight_start":1,"highlight_end":30},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                     );","highlight_start":1,"highlight_end":24},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/interrupts/mod.rs:261:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        set_handler!(breakpoint, exception::breakpoint_handler);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m261\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                asm!(\"mov rdi, rsp\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8760,"byte_end":8763,"line_start":234,"line_end":234,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(\"pop r11","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9696,"byte_end":9712,"line_start":269,"line_end":269,"column_start":17,"column_end":33,"is_primary":false,"text":[{"text":"                restore_regs!();","highlight_start":17,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5835,"byte_end":5858,"line_start":150,"line_end":150,"column_start":41,"column_end":64,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6191,"byte_end":6247,"line_start":161,"line_end":161,"column_start":9,"column_end":65,"is_primary":false,"text":[{"text":"        set_handler!(breakpoint, exception::breakpoint_handler);","highlight_start":9,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5724,"byte_end":5906,"line_start":148,"line_end":152,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler($name: ident, $handler: path) {","highlight_start":9,"highlight_end":58},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":88},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8979,"byte_end":9946,"line_start":250,"line_end":282,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler($name: path) {","highlight_start":1,"highlight_end":34},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers). We don't need to manually align the stack, as it should","highlight_start":1,"highlight_end":94},{"text":"                 * already be aligned correctly.","highlight_start":1,"highlight_end":49},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x48","highlight_start":1,"highlight_end":36},{"text":"                      call $0\"","highlight_start":1,"highlight_end":31},{"text":"                    :","highlight_start":1,"highlight_end":22},{"text":"                    : \"i\"($name as extern \"C\" fn(&InterruptStackFrame))","highlight_start":1,"highlight_end":72},{"text":"                    : \"rdi\"","highlight_start":1,"highlight_end":28},{"text":"                    : \"intel\"","highlight_start":1,"highlight_end":30},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                     );","highlight_start":1,"highlight_end":24},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"restore_regs!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8733,"byte_end":8977,"line_start":233,"line_end":248,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro restore_regs() {","highlight_start":1,"highlight_end":23},{"text":"    asm!(\"pop r11","highlight_start":1,"highlight_end":18},{"text":"          pop r10","highlight_start":1,"highlight_end":18},{"text":"          pop r9","highlight_start":1,"highlight_end":17},{"text":"          pop r8","highlight_start":1,"highlight_end":17},{"text":"          pop rdi","highlight_start":1,"highlight_end":18},{"text":"          pop rsi","highlight_start":1,"highlight_end":18},{"text":"          pop rdx","highlight_start":1,"highlight_end":18},{"text":"          pop rcx","highlight_start":1,"highlight_end":18},{"text":"          pop rax\"","highlight_start":1,"highlight_end":19},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        : \"intel\"","highlight_start":1,"highlight_end":18},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8760,"byte_end":8763,"line_start":234,"line_end":234,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(\"pop r11","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9696,"byte_end":9712,"line_start":269,"line_end":269,"column_start":17,"column_end":33,"is_primary":false,"text":[{"text":"                restore_regs!();","highlight_start":17,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5835,"byte_end":5858,"line_start":150,"line_end":150,"column_start":41,"column_end":64,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6191,"byte_end":6247,"line_start":161,"line_end":161,"column_start":9,"column_end":65,"is_primary":false,"text":[{"text":"        set_handler!(breakpoint, exception::breakpoint_handler);","highlight_start":9,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5724,"byte_end":5906,"line_start":148,"line_end":152,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler($name: ident, $handler: path) {","highlight_start":9,"highlight_end":58},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":88},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8979,"byte_end":9946,"line_start":250,"line_end":282,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler($name: path) {","highlight_start":1,"highlight_end":34},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers). We don't need to manually align the stack, as it should","highlight_start":1,"highlight_end":94},{"text":"                 * already be aligned correctly.","highlight_start":1,"highlight_end":49},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x48","highlight_start":1,"highlight_end":36},{"text":"                      call $0\"","highlight_start":1,"highlight_end":31},{"text":"                    :","highlight_start":1,"highlight_end":22},{"text":"                    : \"i\"($name as extern \"C\" fn(&InterruptStackFrame))","highlight_start":1,"highlight_end":72},{"text":"                    : \"rdi\"","highlight_start":1,"highlight_end":28},{"text":"                    : \"intel\"","highlight_start":1,"highlight_end":30},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                     );","highlight_start":1,"highlight_end":24},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"restore_regs!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8733,"byte_end":8977,"line_start":233,"line_end":248,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro restore_regs() {","highlight_start":1,"highlight_end":23},{"text":"    asm!(\"pop r11","highlight_start":1,"highlight_end":18},{"text":"          pop r10","highlight_start":1,"highlight_end":18},{"text":"          pop r9","highlight_start":1,"highlight_end":17},{"text":"          pop r8","highlight_start":1,"highlight_end":17},{"text":"          pop rdi","highlight_start":1,"highlight_end":18},{"text":"          pop rsi","highlight_start":1,"highlight_end":18},{"text":"          pop rdx","highlight_start":1,"highlight_end":18},{"text":"          pop rcx","highlight_start":1,"highlight_end":18},{"text":"          pop rax\"","highlight_start":1,"highlight_end":19},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        : \"intel\"","highlight_start":1,"highlight_end":18},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/interrupts/mod.rs:234:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        set_handler!(breakpoint, exception::breakpoint_handler);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m234\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    asm!(\"pop r11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9729,"byte_end":9732,"line_start":270,"line_end":270,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                asm!(\"iretq\"","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5835,"byte_end":5858,"line_start":150,"line_end":150,"column_start":41,"column_end":64,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6191,"byte_end":6247,"line_start":161,"line_end":161,"column_start":9,"column_end":65,"is_primary":false,"text":[{"text":"        set_handler!(breakpoint, exception::breakpoint_handler);","highlight_start":9,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5724,"byte_end":5906,"line_start":148,"line_end":152,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler($name: ident, $handler: path) {","highlight_start":9,"highlight_end":58},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":88},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8979,"byte_end":9946,"line_start":250,"line_end":282,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler($name: path) {","highlight_start":1,"highlight_end":34},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers). We don't need to manually align the stack, as it should","highlight_start":1,"highlight_end":94},{"text":"                 * already be aligned correctly.","highlight_start":1,"highlight_end":49},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x48","highlight_start":1,"highlight_end":36},{"text":"                      call $0\"","highlight_start":1,"highlight_end":31},{"text":"                    :","highlight_start":1,"highlight_end":22},{"text":"                    : \"i\"($name as extern \"C\" fn(&InterruptStackFrame))","highlight_start":1,"highlight_end":72},{"text":"                    : \"rdi\"","highlight_start":1,"highlight_end":28},{"text":"                    : \"intel\"","highlight_start":1,"highlight_end":30},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                     );","highlight_start":1,"highlight_end":24},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9729,"byte_end":9732,"line_start":270,"line_end":270,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                asm!(\"iretq\"","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5835,"byte_end":5858,"line_start":150,"line_end":150,"column_start":41,"column_end":64,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6191,"byte_end":6247,"line_start":161,"line_end":161,"column_start":9,"column_end":65,"is_primary":false,"text":[{"text":"        set_handler!(breakpoint, exception::breakpoint_handler);","highlight_start":9,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5724,"byte_end":5906,"line_start":148,"line_end":152,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler($name: ident, $handler: path) {","highlight_start":9,"highlight_end":58},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":88},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8979,"byte_end":9946,"line_start":250,"line_end":282,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler($name: path) {","highlight_start":1,"highlight_end":34},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers). We don't need to manually align the stack, as it should","highlight_start":1,"highlight_end":94},{"text":"                 * already be aligned correctly.","highlight_start":1,"highlight_end":49},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x48","highlight_start":1,"highlight_end":36},{"text":"                      call $0\"","highlight_start":1,"highlight_end":31},{"text":"                    :","highlight_start":1,"highlight_end":22},{"text":"                    : \"i\"($name as extern \"C\" fn(&InterruptStackFrame))","highlight_start":1,"highlight_end":72},{"text":"                    : \"rdi\"","highlight_start":1,"highlight_end":28},{"text":"                    : \"intel\"","highlight_start":1,"highlight_end":30},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                     );","highlight_start":1,"highlight_end":24},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/interrupts/mod.rs:270:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        set_handler!(breakpoint, exception::breakpoint_handler);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m270\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                asm!(\"iretq\"\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8464,"byte_end":8467,"line_start":216,"line_end":216,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(\"push rax","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9389,"byte_end":9402,"line_start":260,"line_end":260,"column_start":17,"column_end":30,"is_primary":false,"text":[{"text":"                save_regs!();","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5835,"byte_end":5858,"line_start":150,"line_end":150,"column_start":41,"column_end":64,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6256,"byte_end":6320,"line_start":162,"line_end":162,"column_start":9,"column_end":73,"is_primary":false,"text":[{"text":"        set_handler!(invalid_opcode, exception::invalid_opcode_handler);","highlight_start":9,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5724,"byte_end":5906,"line_start":148,"line_end":152,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler($name: ident, $handler: path) {","highlight_start":9,"highlight_end":58},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":88},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8979,"byte_end":9946,"line_start":250,"line_end":282,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler($name: path) {","highlight_start":1,"highlight_end":34},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers). We don't need to manually align the stack, as it should","highlight_start":1,"highlight_end":94},{"text":"                 * already be aligned correctly.","highlight_start":1,"highlight_end":49},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x48","highlight_start":1,"highlight_end":36},{"text":"                      call $0\"","highlight_start":1,"highlight_end":31},{"text":"                    :","highlight_start":1,"highlight_end":22},{"text":"                    : \"i\"($name as extern \"C\" fn(&InterruptStackFrame))","highlight_start":1,"highlight_end":72},{"text":"                    : \"rdi\"","highlight_start":1,"highlight_end":28},{"text":"                    : \"intel\"","highlight_start":1,"highlight_end":30},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                     );","highlight_start":1,"highlight_end":24},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"save_regs!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8440,"byte_end":8690,"line_start":215,"line_end":230,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro save_regs() {","highlight_start":1,"highlight_end":20},{"text":"    asm!(\"push rax","highlight_start":1,"highlight_end":19},{"text":"          push rcx","highlight_start":1,"highlight_end":19},{"text":"          push rdx","highlight_start":1,"highlight_end":19},{"text":"          push rsi","highlight_start":1,"highlight_end":19},{"text":"          push rdi","highlight_start":1,"highlight_end":19},{"text":"          push r8","highlight_start":1,"highlight_end":18},{"text":"          push r9","highlight_start":1,"highlight_end":18},{"text":"          push r10","highlight_start":1,"highlight_end":19},{"text":"          push r11\"","highlight_start":1,"highlight_end":20},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        : \"intel\"","highlight_start":1,"highlight_end":18},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8464,"byte_end":8467,"line_start":216,"line_end":216,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(\"push rax","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9389,"byte_end":9402,"line_start":260,"line_end":260,"column_start":17,"column_end":30,"is_primary":false,"text":[{"text":"                save_regs!();","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5835,"byte_end":5858,"line_start":150,"line_end":150,"column_start":41,"column_end":64,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6256,"byte_end":6320,"line_start":162,"line_end":162,"column_start":9,"column_end":73,"is_primary":false,"text":[{"text":"        set_handler!(invalid_opcode, exception::invalid_opcode_handler);","highlight_start":9,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5724,"byte_end":5906,"line_start":148,"line_end":152,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler($name: ident, $handler: path) {","highlight_start":9,"highlight_end":58},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":88},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8979,"byte_end":9946,"line_start":250,"line_end":282,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler($name: path) {","highlight_start":1,"highlight_end":34},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers). We don't need to manually align the stack, as it should","highlight_start":1,"highlight_end":94},{"text":"                 * already be aligned correctly.","highlight_start":1,"highlight_end":49},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x48","highlight_start":1,"highlight_end":36},{"text":"                      call $0\"","highlight_start":1,"highlight_end":31},{"text":"                    :","highlight_start":1,"highlight_end":22},{"text":"                    : \"i\"($name as extern \"C\" fn(&InterruptStackFrame))","highlight_start":1,"highlight_end":72},{"text":"                    : \"rdi\"","highlight_start":1,"highlight_end":28},{"text":"                    : \"intel\"","highlight_start":1,"highlight_end":30},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                     );","highlight_start":1,"highlight_end":24},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"save_regs!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8440,"byte_end":8690,"line_start":215,"line_end":230,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro save_regs() {","highlight_start":1,"highlight_end":20},{"text":"    asm!(\"push rax","highlight_start":1,"highlight_end":19},{"text":"          push rcx","highlight_start":1,"highlight_end":19},{"text":"          push rdx","highlight_start":1,"highlight_end":19},{"text":"          push rsi","highlight_start":1,"highlight_end":19},{"text":"          push rdi","highlight_start":1,"highlight_end":19},{"text":"          push r8","highlight_start":1,"highlight_end":18},{"text":"          push r9","highlight_start":1,"highlight_end":18},{"text":"          push r10","highlight_start":1,"highlight_end":19},{"text":"          push r11\"","highlight_start":1,"highlight_end":20},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        : \"intel\"","highlight_start":1,"highlight_end":18},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/interrupts/mod.rs:216:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        set_handler!(invalid_opcode, exception::invalid_opcode_handler);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    asm!(\"push rax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9419,"byte_end":9422,"line_start":261,"line_end":261,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                asm!(\"mov rdi, rsp","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5835,"byte_end":5858,"line_start":150,"line_end":150,"column_start":41,"column_end":64,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6256,"byte_end":6320,"line_start":162,"line_end":162,"column_start":9,"column_end":73,"is_primary":false,"text":[{"text":"        set_handler!(invalid_opcode, exception::invalid_opcode_handler);","highlight_start":9,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5724,"byte_end":5906,"line_start":148,"line_end":152,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler($name: ident, $handler: path) {","highlight_start":9,"highlight_end":58},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":88},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8979,"byte_end":9946,"line_start":250,"line_end":282,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler($name: path) {","highlight_start":1,"highlight_end":34},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers). We don't need to manually align the stack, as it should","highlight_start":1,"highlight_end":94},{"text":"                 * already be aligned correctly.","highlight_start":1,"highlight_end":49},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x48","highlight_start":1,"highlight_end":36},{"text":"                      call $0\"","highlight_start":1,"highlight_end":31},{"text":"                    :","highlight_start":1,"highlight_end":22},{"text":"                    : \"i\"($name as extern \"C\" fn(&InterruptStackFrame))","highlight_start":1,"highlight_end":72},{"text":"                    : \"rdi\"","highlight_start":1,"highlight_end":28},{"text":"                    : \"intel\"","highlight_start":1,"highlight_end":30},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                     );","highlight_start":1,"highlight_end":24},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9419,"byte_end":9422,"line_start":261,"line_end":261,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                asm!(\"mov rdi, rsp","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5835,"byte_end":5858,"line_start":150,"line_end":150,"column_start":41,"column_end":64,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6256,"byte_end":6320,"line_start":162,"line_end":162,"column_start":9,"column_end":73,"is_primary":false,"text":[{"text":"        set_handler!(invalid_opcode, exception::invalid_opcode_handler);","highlight_start":9,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5724,"byte_end":5906,"line_start":148,"line_end":152,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler($name: ident, $handler: path) {","highlight_start":9,"highlight_end":58},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":88},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8979,"byte_end":9946,"line_start":250,"line_end":282,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler($name: path) {","highlight_start":1,"highlight_end":34},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers). We don't need to manually align the stack, as it should","highlight_start":1,"highlight_end":94},{"text":"                 * already be aligned correctly.","highlight_start":1,"highlight_end":49},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x48","highlight_start":1,"highlight_end":36},{"text":"                      call $0\"","highlight_start":1,"highlight_end":31},{"text":"                    :","highlight_start":1,"highlight_end":22},{"text":"                    : \"i\"($name as extern \"C\" fn(&InterruptStackFrame))","highlight_start":1,"highlight_end":72},{"text":"                    : \"rdi\"","highlight_start":1,"highlight_end":28},{"text":"                    : \"intel\"","highlight_start":1,"highlight_end":30},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                     );","highlight_start":1,"highlight_end":24},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/interrupts/mod.rs:261:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        set_handler!(invalid_opcode, exception::invalid_opcode_handler);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m261\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                asm!(\"mov rdi, rsp\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8760,"byte_end":8763,"line_start":234,"line_end":234,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(\"pop r11","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9696,"byte_end":9712,"line_start":269,"line_end":269,"column_start":17,"column_end":33,"is_primary":false,"text":[{"text":"                restore_regs!();","highlight_start":17,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5835,"byte_end":5858,"line_start":150,"line_end":150,"column_start":41,"column_end":64,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6256,"byte_end":6320,"line_start":162,"line_end":162,"column_start":9,"column_end":73,"is_primary":false,"text":[{"text":"        set_handler!(invalid_opcode, exception::invalid_opcode_handler);","highlight_start":9,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5724,"byte_end":5906,"line_start":148,"line_end":152,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler($name: ident, $handler: path) {","highlight_start":9,"highlight_end":58},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":88},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8979,"byte_end":9946,"line_start":250,"line_end":282,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler($name: path) {","highlight_start":1,"highlight_end":34},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers). We don't need to manually align the stack, as it should","highlight_start":1,"highlight_end":94},{"text":"                 * already be aligned correctly.","highlight_start":1,"highlight_end":49},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x48","highlight_start":1,"highlight_end":36},{"text":"                      call $0\"","highlight_start":1,"highlight_end":31},{"text":"                    :","highlight_start":1,"highlight_end":22},{"text":"                    : \"i\"($name as extern \"C\" fn(&InterruptStackFrame))","highlight_start":1,"highlight_end":72},{"text":"                    : \"rdi\"","highlight_start":1,"highlight_end":28},{"text":"                    : \"intel\"","highlight_start":1,"highlight_end":30},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                     );","highlight_start":1,"highlight_end":24},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"restore_regs!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8733,"byte_end":8977,"line_start":233,"line_end":248,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro restore_regs() {","highlight_start":1,"highlight_end":23},{"text":"    asm!(\"pop r11","highlight_start":1,"highlight_end":18},{"text":"          pop r10","highlight_start":1,"highlight_end":18},{"text":"          pop r9","highlight_start":1,"highlight_end":17},{"text":"          pop r8","highlight_start":1,"highlight_end":17},{"text":"          pop rdi","highlight_start":1,"highlight_end":18},{"text":"          pop rsi","highlight_start":1,"highlight_end":18},{"text":"          pop rdx","highlight_start":1,"highlight_end":18},{"text":"          pop rcx","highlight_start":1,"highlight_end":18},{"text":"          pop rax\"","highlight_start":1,"highlight_end":19},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        : \"intel\"","highlight_start":1,"highlight_end":18},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8760,"byte_end":8763,"line_start":234,"line_end":234,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(\"pop r11","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9696,"byte_end":9712,"line_start":269,"line_end":269,"column_start":17,"column_end":33,"is_primary":false,"text":[{"text":"                restore_regs!();","highlight_start":17,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5835,"byte_end":5858,"line_start":150,"line_end":150,"column_start":41,"column_end":64,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6256,"byte_end":6320,"line_start":162,"line_end":162,"column_start":9,"column_end":73,"is_primary":false,"text":[{"text":"        set_handler!(invalid_opcode, exception::invalid_opcode_handler);","highlight_start":9,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5724,"byte_end":5906,"line_start":148,"line_end":152,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler($name: ident, $handler: path) {","highlight_start":9,"highlight_end":58},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":88},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8979,"byte_end":9946,"line_start":250,"line_end":282,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler($name: path) {","highlight_start":1,"highlight_end":34},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers). We don't need to manually align the stack, as it should","highlight_start":1,"highlight_end":94},{"text":"                 * already be aligned correctly.","highlight_start":1,"highlight_end":49},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x48","highlight_start":1,"highlight_end":36},{"text":"                      call $0\"","highlight_start":1,"highlight_end":31},{"text":"                    :","highlight_start":1,"highlight_end":22},{"text":"                    : \"i\"($name as extern \"C\" fn(&InterruptStackFrame))","highlight_start":1,"highlight_end":72},{"text":"                    : \"rdi\"","highlight_start":1,"highlight_end":28},{"text":"                    : \"intel\"","highlight_start":1,"highlight_end":30},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                     );","highlight_start":1,"highlight_end":24},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"restore_regs!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8733,"byte_end":8977,"line_start":233,"line_end":248,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro restore_regs() {","highlight_start":1,"highlight_end":23},{"text":"    asm!(\"pop r11","highlight_start":1,"highlight_end":18},{"text":"          pop r10","highlight_start":1,"highlight_end":18},{"text":"          pop r9","highlight_start":1,"highlight_end":17},{"text":"          pop r8","highlight_start":1,"highlight_end":17},{"text":"          pop rdi","highlight_start":1,"highlight_end":18},{"text":"          pop rsi","highlight_start":1,"highlight_end":18},{"text":"          pop rdx","highlight_start":1,"highlight_end":18},{"text":"          pop rcx","highlight_start":1,"highlight_end":18},{"text":"          pop rax\"","highlight_start":1,"highlight_end":19},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        : \"intel\"","highlight_start":1,"highlight_end":18},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/interrupts/mod.rs:234:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        set_handler!(invalid_opcode, exception::invalid_opcode_handler);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m234\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    asm!(\"pop r11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9729,"byte_end":9732,"line_start":270,"line_end":270,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                asm!(\"iretq\"","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5835,"byte_end":5858,"line_start":150,"line_end":150,"column_start":41,"column_end":64,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6256,"byte_end":6320,"line_start":162,"line_end":162,"column_start":9,"column_end":73,"is_primary":false,"text":[{"text":"        set_handler!(invalid_opcode, exception::invalid_opcode_handler);","highlight_start":9,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5724,"byte_end":5906,"line_start":148,"line_end":152,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler($name: ident, $handler: path) {","highlight_start":9,"highlight_end":58},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":88},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8979,"byte_end":9946,"line_start":250,"line_end":282,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler($name: path) {","highlight_start":1,"highlight_end":34},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers). We don't need to manually align the stack, as it should","highlight_start":1,"highlight_end":94},{"text":"                 * already be aligned correctly.","highlight_start":1,"highlight_end":49},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x48","highlight_start":1,"highlight_end":36},{"text":"                      call $0\"","highlight_start":1,"highlight_end":31},{"text":"                    :","highlight_start":1,"highlight_end":22},{"text":"                    : \"i\"($name as extern \"C\" fn(&InterruptStackFrame))","highlight_start":1,"highlight_end":72},{"text":"                    : \"rdi\"","highlight_start":1,"highlight_end":28},{"text":"                    : \"intel\"","highlight_start":1,"highlight_end":30},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                     );","highlight_start":1,"highlight_end":24},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9729,"byte_end":9732,"line_start":270,"line_end":270,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                asm!(\"iretq\"","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5835,"byte_end":5858,"line_start":150,"line_end":150,"column_start":41,"column_end":64,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6256,"byte_end":6320,"line_start":162,"line_end":162,"column_start":9,"column_end":73,"is_primary":false,"text":[{"text":"        set_handler!(invalid_opcode, exception::invalid_opcode_handler);","highlight_start":9,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5724,"byte_end":5906,"line_start":148,"line_end":152,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler($name: ident, $handler: path) {","highlight_start":9,"highlight_end":58},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":88},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8979,"byte_end":9946,"line_start":250,"line_end":282,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler($name: path) {","highlight_start":1,"highlight_end":34},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers). We don't need to manually align the stack, as it should","highlight_start":1,"highlight_end":94},{"text":"                 * already be aligned correctly.","highlight_start":1,"highlight_end":49},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x48","highlight_start":1,"highlight_end":36},{"text":"                      call $0\"","highlight_start":1,"highlight_end":31},{"text":"                    :","highlight_start":1,"highlight_end":22},{"text":"                    : \"i\"($name as extern \"C\" fn(&InterruptStackFrame))","highlight_start":1,"highlight_end":72},{"text":"                    : \"rdi\"","highlight_start":1,"highlight_end":28},{"text":"                    : \"intel\"","highlight_start":1,"highlight_end":30},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                     );","highlight_start":1,"highlight_end":24},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/interrupts/mod.rs:270:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        set_handler!(invalid_opcode, exception::invalid_opcode_handler);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m270\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                asm!(\"iretq\"\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8464,"byte_end":8467,"line_start":216,"line_end":216,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(\"push rax","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":10395,"byte_end":10408,"line_start":294,"line_end":294,"column_start":17,"column_end":30,"is_primary":false,"text":[{"text":"                save_regs!();","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6043,"byte_end":6082,"line_start":156,"line_end":156,"column_start":41,"column_end":80,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6329,"byte_end":6429,"line_start":163,"line_end":163,"column_start":9,"column_end":109,"is_primary":false,"text":[{"text":"        set_handler_with_error_code!(general_protection_fault, exception::general_protection_fault_handler);","highlight_start":9,"highlight_end":109}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5916,"byte_end":6130,"line_start":154,"line_end":158,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler_with_error_code($name: ident, $handler: path) {","highlight_start":9,"highlight_end":74},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":104},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9948,"byte_end":11263,"line_start":284,"line_end":320,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler_with_error_code($name: path) {","highlight_start":1,"highlight_end":50},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers), and then the two bytes of the error code. Because we skip","highlight_start":1,"highlight_end":96},{"text":"                 * 0x50 bytes, we need to manually align the stack.","highlight_start":1,"highlight_end":68},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rsi, [rsp+0x48]   // Put the error code in RSI","highlight_start":1,"highlight_end":73},{"text":"                      mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x50","highlight_start":1,"highlight_end":36},{"text":"                      sub rsp, 8            // Align the stack pointer","highlight_start":1,"highlight_end":71},{"text":"                      call $0","highlight_start":1,"highlight_end":30},{"text":"                      add rsp, 8            // Restore the stack pointer\"","highlight_start":1,"highlight_end":74},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"i\"($name as extern \"C\" fn(&InterruptStackFrame, _error_code: u64))","highlight_start":1,"highlight_end":91},{"text":"                     : \"rdi\", \"rsi\"","highlight_start":1,"highlight_end":36},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"add rsp, 8            // Pop the error code","highlight_start":1,"highlight_end":66},{"text":"                      iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"save_regs!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8440,"byte_end":8690,"line_start":215,"line_end":230,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro save_regs() {","highlight_start":1,"highlight_end":20},{"text":"    asm!(\"push rax","highlight_start":1,"highlight_end":19},{"text":"          push rcx","highlight_start":1,"highlight_end":19},{"text":"          push rdx","highlight_start":1,"highlight_end":19},{"text":"          push rsi","highlight_start":1,"highlight_end":19},{"text":"          push rdi","highlight_start":1,"highlight_end":19},{"text":"          push r8","highlight_start":1,"highlight_end":18},{"text":"          push r9","highlight_start":1,"highlight_end":18},{"text":"          push r10","highlight_start":1,"highlight_end":19},{"text":"          push r11\"","highlight_start":1,"highlight_end":20},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        : \"intel\"","highlight_start":1,"highlight_end":18},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8464,"byte_end":8467,"line_start":216,"line_end":216,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(\"push rax","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":10395,"byte_end":10408,"line_start":294,"line_end":294,"column_start":17,"column_end":30,"is_primary":false,"text":[{"text":"                save_regs!();","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6043,"byte_end":6082,"line_start":156,"line_end":156,"column_start":41,"column_end":80,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6329,"byte_end":6429,"line_start":163,"line_end":163,"column_start":9,"column_end":109,"is_primary":false,"text":[{"text":"        set_handler_with_error_code!(general_protection_fault, exception::general_protection_fault_handler);","highlight_start":9,"highlight_end":109}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5916,"byte_end":6130,"line_start":154,"line_end":158,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler_with_error_code($name: ident, $handler: path) {","highlight_start":9,"highlight_end":74},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":104},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9948,"byte_end":11263,"line_start":284,"line_end":320,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler_with_error_code($name: path) {","highlight_start":1,"highlight_end":50},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers), and then the two bytes of the error code. Because we skip","highlight_start":1,"highlight_end":96},{"text":"                 * 0x50 bytes, we need to manually align the stack.","highlight_start":1,"highlight_end":68},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rsi, [rsp+0x48]   // Put the error code in RSI","highlight_start":1,"highlight_end":73},{"text":"                      mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x50","highlight_start":1,"highlight_end":36},{"text":"                      sub rsp, 8            // Align the stack pointer","highlight_start":1,"highlight_end":71},{"text":"                      call $0","highlight_start":1,"highlight_end":30},{"text":"                      add rsp, 8            // Restore the stack pointer\"","highlight_start":1,"highlight_end":74},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"i\"($name as extern \"C\" fn(&InterruptStackFrame, _error_code: u64))","highlight_start":1,"highlight_end":91},{"text":"                     : \"rdi\", \"rsi\"","highlight_start":1,"highlight_end":36},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"add rsp, 8            // Pop the error code","highlight_start":1,"highlight_end":66},{"text":"                      iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"save_regs!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8440,"byte_end":8690,"line_start":215,"line_end":230,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro save_regs() {","highlight_start":1,"highlight_end":20},{"text":"    asm!(\"push rax","highlight_start":1,"highlight_end":19},{"text":"          push rcx","highlight_start":1,"highlight_end":19},{"text":"          push rdx","highlight_start":1,"highlight_end":19},{"text":"          push rsi","highlight_start":1,"highlight_end":19},{"text":"          push rdi","highlight_start":1,"highlight_end":19},{"text":"          push r8","highlight_start":1,"highlight_end":18},{"text":"          push r9","highlight_start":1,"highlight_end":18},{"text":"          push r10","highlight_start":1,"highlight_end":19},{"text":"          push r11\"","highlight_start":1,"highlight_end":20},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        : \"intel\"","highlight_start":1,"highlight_end":18},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/interrupts/mod.rs:216:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        set_handler_with_error_code!(general_protection_fault, exception::general_protection_fault_handler);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    asm!(\"push rax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":10425,"byte_end":10428,"line_start":295,"line_end":295,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                asm!(\"mov rsi, [rsp+0x48]   // Put the error code in RSI","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6043,"byte_end":6082,"line_start":156,"line_end":156,"column_start":41,"column_end":80,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6329,"byte_end":6429,"line_start":163,"line_end":163,"column_start":9,"column_end":109,"is_primary":false,"text":[{"text":"        set_handler_with_error_code!(general_protection_fault, exception::general_protection_fault_handler);","highlight_start":9,"highlight_end":109}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5916,"byte_end":6130,"line_start":154,"line_end":158,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler_with_error_code($name: ident, $handler: path) {","highlight_start":9,"highlight_end":74},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":104},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9948,"byte_end":11263,"line_start":284,"line_end":320,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler_with_error_code($name: path) {","highlight_start":1,"highlight_end":50},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers), and then the two bytes of the error code. Because we skip","highlight_start":1,"highlight_end":96},{"text":"                 * 0x50 bytes, we need to manually align the stack.","highlight_start":1,"highlight_end":68},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rsi, [rsp+0x48]   // Put the error code in RSI","highlight_start":1,"highlight_end":73},{"text":"                      mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x50","highlight_start":1,"highlight_end":36},{"text":"                      sub rsp, 8            // Align the stack pointer","highlight_start":1,"highlight_end":71},{"text":"                      call $0","highlight_start":1,"highlight_end":30},{"text":"                      add rsp, 8            // Restore the stack pointer\"","highlight_start":1,"highlight_end":74},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"i\"($name as extern \"C\" fn(&InterruptStackFrame, _error_code: u64))","highlight_start":1,"highlight_end":91},{"text":"                     : \"rdi\", \"rsi\"","highlight_start":1,"highlight_end":36},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"add rsp, 8            // Pop the error code","highlight_start":1,"highlight_end":66},{"text":"                      iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":10425,"byte_end":10428,"line_start":295,"line_end":295,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                asm!(\"mov rsi, [rsp+0x48]   // Put the error code in RSI","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6043,"byte_end":6082,"line_start":156,"line_end":156,"column_start":41,"column_end":80,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6329,"byte_end":6429,"line_start":163,"line_end":163,"column_start":9,"column_end":109,"is_primary":false,"text":[{"text":"        set_handler_with_error_code!(general_protection_fault, exception::general_protection_fault_handler);","highlight_start":9,"highlight_end":109}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5916,"byte_end":6130,"line_start":154,"line_end":158,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler_with_error_code($name: ident, $handler: path) {","highlight_start":9,"highlight_end":74},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":104},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9948,"byte_end":11263,"line_start":284,"line_end":320,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler_with_error_code($name: path) {","highlight_start":1,"highlight_end":50},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers), and then the two bytes of the error code. Because we skip","highlight_start":1,"highlight_end":96},{"text":"                 * 0x50 bytes, we need to manually align the stack.","highlight_start":1,"highlight_end":68},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rsi, [rsp+0x48]   // Put the error code in RSI","highlight_start":1,"highlight_end":73},{"text":"                      mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x50","highlight_start":1,"highlight_end":36},{"text":"                      sub rsp, 8            // Align the stack pointer","highlight_start":1,"highlight_end":71},{"text":"                      call $0","highlight_start":1,"highlight_end":30},{"text":"                      add rsp, 8            // Restore the stack pointer\"","highlight_start":1,"highlight_end":74},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"i\"($name as extern \"C\" fn(&InterruptStackFrame, _error_code: u64))","highlight_start":1,"highlight_end":91},{"text":"                     : \"rdi\", \"rsi\"","highlight_start":1,"highlight_end":36},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"add rsp, 8            // Pop the error code","highlight_start":1,"highlight_end":66},{"text":"                      iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/interrupts/mod.rs:295:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        set_handler_with_error_code!(general_protection_fault, exception::general_protection_fault_handler);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m295\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                asm!(\"mov rsi, [rsp+0x48]   // Put the error code in RSI\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8760,"byte_end":8763,"line_start":234,"line_end":234,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(\"pop r11","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":10948,"byte_end":10964,"line_start":306,"line_end":306,"column_start":17,"column_end":33,"is_primary":false,"text":[{"text":"                restore_regs!();","highlight_start":17,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6043,"byte_end":6082,"line_start":156,"line_end":156,"column_start":41,"column_end":80,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6329,"byte_end":6429,"line_start":163,"line_end":163,"column_start":9,"column_end":109,"is_primary":false,"text":[{"text":"        set_handler_with_error_code!(general_protection_fault, exception::general_protection_fault_handler);","highlight_start":9,"highlight_end":109}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5916,"byte_end":6130,"line_start":154,"line_end":158,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler_with_error_code($name: ident, $handler: path) {","highlight_start":9,"highlight_end":74},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":104},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9948,"byte_end":11263,"line_start":284,"line_end":320,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler_with_error_code($name: path) {","highlight_start":1,"highlight_end":50},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers), and then the two bytes of the error code. Because we skip","highlight_start":1,"highlight_end":96},{"text":"                 * 0x50 bytes, we need to manually align the stack.","highlight_start":1,"highlight_end":68},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rsi, [rsp+0x48]   // Put the error code in RSI","highlight_start":1,"highlight_end":73},{"text":"                      mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x50","highlight_start":1,"highlight_end":36},{"text":"                      sub rsp, 8            // Align the stack pointer","highlight_start":1,"highlight_end":71},{"text":"                      call $0","highlight_start":1,"highlight_end":30},{"text":"                      add rsp, 8            // Restore the stack pointer\"","highlight_start":1,"highlight_end":74},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"i\"($name as extern \"C\" fn(&InterruptStackFrame, _error_code: u64))","highlight_start":1,"highlight_end":91},{"text":"                     : \"rdi\", \"rsi\"","highlight_start":1,"highlight_end":36},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"add rsp, 8            // Pop the error code","highlight_start":1,"highlight_end":66},{"text":"                      iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"restore_regs!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8733,"byte_end":8977,"line_start":233,"line_end":248,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro restore_regs() {","highlight_start":1,"highlight_end":23},{"text":"    asm!(\"pop r11","highlight_start":1,"highlight_end":18},{"text":"          pop r10","highlight_start":1,"highlight_end":18},{"text":"          pop r9","highlight_start":1,"highlight_end":17},{"text":"          pop r8","highlight_start":1,"highlight_end":17},{"text":"          pop rdi","highlight_start":1,"highlight_end":18},{"text":"          pop rsi","highlight_start":1,"highlight_end":18},{"text":"          pop rdx","highlight_start":1,"highlight_end":18},{"text":"          pop rcx","highlight_start":1,"highlight_end":18},{"text":"          pop rax\"","highlight_start":1,"highlight_end":19},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        : \"intel\"","highlight_start":1,"highlight_end":18},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8760,"byte_end":8763,"line_start":234,"line_end":234,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(\"pop r11","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":10948,"byte_end":10964,"line_start":306,"line_end":306,"column_start":17,"column_end":33,"is_primary":false,"text":[{"text":"                restore_regs!();","highlight_start":17,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6043,"byte_end":6082,"line_start":156,"line_end":156,"column_start":41,"column_end":80,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6329,"byte_end":6429,"line_start":163,"line_end":163,"column_start":9,"column_end":109,"is_primary":false,"text":[{"text":"        set_handler_with_error_code!(general_protection_fault, exception::general_protection_fault_handler);","highlight_start":9,"highlight_end":109}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5916,"byte_end":6130,"line_start":154,"line_end":158,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler_with_error_code($name: ident, $handler: path) {","highlight_start":9,"highlight_end":74},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":104},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9948,"byte_end":11263,"line_start":284,"line_end":320,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler_with_error_code($name: path) {","highlight_start":1,"highlight_end":50},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers), and then the two bytes of the error code. Because we skip","highlight_start":1,"highlight_end":96},{"text":"                 * 0x50 bytes, we need to manually align the stack.","highlight_start":1,"highlight_end":68},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rsi, [rsp+0x48]   // Put the error code in RSI","highlight_start":1,"highlight_end":73},{"text":"                      mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x50","highlight_start":1,"highlight_end":36},{"text":"                      sub rsp, 8            // Align the stack pointer","highlight_start":1,"highlight_end":71},{"text":"                      call $0","highlight_start":1,"highlight_end":30},{"text":"                      add rsp, 8            // Restore the stack pointer\"","highlight_start":1,"highlight_end":74},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"i\"($name as extern \"C\" fn(&InterruptStackFrame, _error_code: u64))","highlight_start":1,"highlight_end":91},{"text":"                     : \"rdi\", \"rsi\"","highlight_start":1,"highlight_end":36},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"add rsp, 8            // Pop the error code","highlight_start":1,"highlight_end":66},{"text":"                      iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"restore_regs!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8733,"byte_end":8977,"line_start":233,"line_end":248,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro restore_regs() {","highlight_start":1,"highlight_end":23},{"text":"    asm!(\"pop r11","highlight_start":1,"highlight_end":18},{"text":"          pop r10","highlight_start":1,"highlight_end":18},{"text":"          pop r9","highlight_start":1,"highlight_end":17},{"text":"          pop r8","highlight_start":1,"highlight_end":17},{"text":"          pop rdi","highlight_start":1,"highlight_end":18},{"text":"          pop rsi","highlight_start":1,"highlight_end":18},{"text":"          pop rdx","highlight_start":1,"highlight_end":18},{"text":"          pop rcx","highlight_start":1,"highlight_end":18},{"text":"          pop rax\"","highlight_start":1,"highlight_end":19},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        : \"intel\"","highlight_start":1,"highlight_end":18},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/interrupts/mod.rs:234:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        set_handler_with_error_code!(general_protection_fault, exception::general_protection_fault_handler);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m234\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    asm!(\"pop r11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":10981,"byte_end":10984,"line_start":307,"line_end":307,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                asm!(\"add rsp, 8            // Pop the error code","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6043,"byte_end":6082,"line_start":156,"line_end":156,"column_start":41,"column_end":80,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6329,"byte_end":6429,"line_start":163,"line_end":163,"column_start":9,"column_end":109,"is_primary":false,"text":[{"text":"        set_handler_with_error_code!(general_protection_fault, exception::general_protection_fault_handler);","highlight_start":9,"highlight_end":109}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5916,"byte_end":6130,"line_start":154,"line_end":158,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler_with_error_code($name: ident, $handler: path) {","highlight_start":9,"highlight_end":74},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":104},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9948,"byte_end":11263,"line_start":284,"line_end":320,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler_with_error_code($name: path) {","highlight_start":1,"highlight_end":50},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers), and then the two bytes of the error code. Because we skip","highlight_start":1,"highlight_end":96},{"text":"                 * 0x50 bytes, we need to manually align the stack.","highlight_start":1,"highlight_end":68},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rsi, [rsp+0x48]   // Put the error code in RSI","highlight_start":1,"highlight_end":73},{"text":"                      mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x50","highlight_start":1,"highlight_end":36},{"text":"                      sub rsp, 8            // Align the stack pointer","highlight_start":1,"highlight_end":71},{"text":"                      call $0","highlight_start":1,"highlight_end":30},{"text":"                      add rsp, 8            // Restore the stack pointer\"","highlight_start":1,"highlight_end":74},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"i\"($name as extern \"C\" fn(&InterruptStackFrame, _error_code: u64))","highlight_start":1,"highlight_end":91},{"text":"                     : \"rdi\", \"rsi\"","highlight_start":1,"highlight_end":36},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"add rsp, 8            // Pop the error code","highlight_start":1,"highlight_end":66},{"text":"                      iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":10981,"byte_end":10984,"line_start":307,"line_end":307,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                asm!(\"add rsp, 8            // Pop the error code","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6043,"byte_end":6082,"line_start":156,"line_end":156,"column_start":41,"column_end":80,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6329,"byte_end":6429,"line_start":163,"line_end":163,"column_start":9,"column_end":109,"is_primary":false,"text":[{"text":"        set_handler_with_error_code!(general_protection_fault, exception::general_protection_fault_handler);","highlight_start":9,"highlight_end":109}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5916,"byte_end":6130,"line_start":154,"line_end":158,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler_with_error_code($name: ident, $handler: path) {","highlight_start":9,"highlight_end":74},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":104},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9948,"byte_end":11263,"line_start":284,"line_end":320,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler_with_error_code($name: path) {","highlight_start":1,"highlight_end":50},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers), and then the two bytes of the error code. Because we skip","highlight_start":1,"highlight_end":96},{"text":"                 * 0x50 bytes, we need to manually align the stack.","highlight_start":1,"highlight_end":68},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rsi, [rsp+0x48]   // Put the error code in RSI","highlight_start":1,"highlight_end":73},{"text":"                      mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x50","highlight_start":1,"highlight_end":36},{"text":"                      sub rsp, 8            // Align the stack pointer","highlight_start":1,"highlight_end":71},{"text":"                      call $0","highlight_start":1,"highlight_end":30},{"text":"                      add rsp, 8            // Restore the stack pointer\"","highlight_start":1,"highlight_end":74},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"i\"($name as extern \"C\" fn(&InterruptStackFrame, _error_code: u64))","highlight_start":1,"highlight_end":91},{"text":"                     : \"rdi\", \"rsi\"","highlight_start":1,"highlight_end":36},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"add rsp, 8            // Pop the error code","highlight_start":1,"highlight_end":66},{"text":"                      iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/interrupts/mod.rs:307:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        set_handler_with_error_code!(general_protection_fault, exception::general_protection_fault_handler);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m307\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                asm!(\"add rsp, 8            // Pop the error code\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8464,"byte_end":8467,"line_start":216,"line_end":216,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(\"push rax","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":10395,"byte_end":10408,"line_start":294,"line_end":294,"column_start":17,"column_end":30,"is_primary":false,"text":[{"text":"                save_regs!();","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6043,"byte_end":6082,"line_start":156,"line_end":156,"column_start":41,"column_end":80,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6438,"byte_end":6510,"line_start":164,"line_end":164,"column_start":9,"column_end":81,"is_primary":false,"text":[{"text":"        set_handler_with_error_code!(page_fault, exception::page_fault_handler);","highlight_start":9,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5916,"byte_end":6130,"line_start":154,"line_end":158,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler_with_error_code($name: ident, $handler: path) {","highlight_start":9,"highlight_end":74},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":104},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9948,"byte_end":11263,"line_start":284,"line_end":320,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler_with_error_code($name: path) {","highlight_start":1,"highlight_end":50},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers), and then the two bytes of the error code. Because we skip","highlight_start":1,"highlight_end":96},{"text":"                 * 0x50 bytes, we need to manually align the stack.","highlight_start":1,"highlight_end":68},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rsi, [rsp+0x48]   // Put the error code in RSI","highlight_start":1,"highlight_end":73},{"text":"                      mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x50","highlight_start":1,"highlight_end":36},{"text":"                      sub rsp, 8            // Align the stack pointer","highlight_start":1,"highlight_end":71},{"text":"                      call $0","highlight_start":1,"highlight_end":30},{"text":"                      add rsp, 8            // Restore the stack pointer\"","highlight_start":1,"highlight_end":74},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"i\"($name as extern \"C\" fn(&InterruptStackFrame, _error_code: u64))","highlight_start":1,"highlight_end":91},{"text":"                     : \"rdi\", \"rsi\"","highlight_start":1,"highlight_end":36},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"add rsp, 8            // Pop the error code","highlight_start":1,"highlight_end":66},{"text":"                      iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"save_regs!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8440,"byte_end":8690,"line_start":215,"line_end":230,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro save_regs() {","highlight_start":1,"highlight_end":20},{"text":"    asm!(\"push rax","highlight_start":1,"highlight_end":19},{"text":"          push rcx","highlight_start":1,"highlight_end":19},{"text":"          push rdx","highlight_start":1,"highlight_end":19},{"text":"          push rsi","highlight_start":1,"highlight_end":19},{"text":"          push rdi","highlight_start":1,"highlight_end":19},{"text":"          push r8","highlight_start":1,"highlight_end":18},{"text":"          push r9","highlight_start":1,"highlight_end":18},{"text":"          push r10","highlight_start":1,"highlight_end":19},{"text":"          push r11\"","highlight_start":1,"highlight_end":20},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        : \"intel\"","highlight_start":1,"highlight_end":18},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8464,"byte_end":8467,"line_start":216,"line_end":216,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(\"push rax","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":10395,"byte_end":10408,"line_start":294,"line_end":294,"column_start":17,"column_end":30,"is_primary":false,"text":[{"text":"                save_regs!();","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6043,"byte_end":6082,"line_start":156,"line_end":156,"column_start":41,"column_end":80,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6438,"byte_end":6510,"line_start":164,"line_end":164,"column_start":9,"column_end":81,"is_primary":false,"text":[{"text":"        set_handler_with_error_code!(page_fault, exception::page_fault_handler);","highlight_start":9,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5916,"byte_end":6130,"line_start":154,"line_end":158,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler_with_error_code($name: ident, $handler: path) {","highlight_start":9,"highlight_end":74},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":104},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9948,"byte_end":11263,"line_start":284,"line_end":320,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler_with_error_code($name: path) {","highlight_start":1,"highlight_end":50},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers), and then the two bytes of the error code. Because we skip","highlight_start":1,"highlight_end":96},{"text":"                 * 0x50 bytes, we need to manually align the stack.","highlight_start":1,"highlight_end":68},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rsi, [rsp+0x48]   // Put the error code in RSI","highlight_start":1,"highlight_end":73},{"text":"                      mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x50","highlight_start":1,"highlight_end":36},{"text":"                      sub rsp, 8            // Align the stack pointer","highlight_start":1,"highlight_end":71},{"text":"                      call $0","highlight_start":1,"highlight_end":30},{"text":"                      add rsp, 8            // Restore the stack pointer\"","highlight_start":1,"highlight_end":74},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"i\"($name as extern \"C\" fn(&InterruptStackFrame, _error_code: u64))","highlight_start":1,"highlight_end":91},{"text":"                     : \"rdi\", \"rsi\"","highlight_start":1,"highlight_end":36},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"add rsp, 8            // Pop the error code","highlight_start":1,"highlight_end":66},{"text":"                      iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"save_regs!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8440,"byte_end":8690,"line_start":215,"line_end":230,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro save_regs() {","highlight_start":1,"highlight_end":20},{"text":"    asm!(\"push rax","highlight_start":1,"highlight_end":19},{"text":"          push rcx","highlight_start":1,"highlight_end":19},{"text":"          push rdx","highlight_start":1,"highlight_end":19},{"text":"          push rsi","highlight_start":1,"highlight_end":19},{"text":"          push rdi","highlight_start":1,"highlight_end":19},{"text":"          push r8","highlight_start":1,"highlight_end":18},{"text":"          push r9","highlight_start":1,"highlight_end":18},{"text":"          push r10","highlight_start":1,"highlight_end":19},{"text":"          push r11\"","highlight_start":1,"highlight_end":20},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        : \"intel\"","highlight_start":1,"highlight_end":18},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/interrupts/mod.rs:216:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        set_handler_with_error_code!(page_fault, exception::page_fault_handler);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    asm!(\"push rax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":10425,"byte_end":10428,"line_start":295,"line_end":295,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                asm!(\"mov rsi, [rsp+0x48]   // Put the error code in RSI","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6043,"byte_end":6082,"line_start":156,"line_end":156,"column_start":41,"column_end":80,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6438,"byte_end":6510,"line_start":164,"line_end":164,"column_start":9,"column_end":81,"is_primary":false,"text":[{"text":"        set_handler_with_error_code!(page_fault, exception::page_fault_handler);","highlight_start":9,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5916,"byte_end":6130,"line_start":154,"line_end":158,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler_with_error_code($name: ident, $handler: path) {","highlight_start":9,"highlight_end":74},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":104},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9948,"byte_end":11263,"line_start":284,"line_end":320,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler_with_error_code($name: path) {","highlight_start":1,"highlight_end":50},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers), and then the two bytes of the error code. Because we skip","highlight_start":1,"highlight_end":96},{"text":"                 * 0x50 bytes, we need to manually align the stack.","highlight_start":1,"highlight_end":68},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rsi, [rsp+0x48]   // Put the error code in RSI","highlight_start":1,"highlight_end":73},{"text":"                      mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x50","highlight_start":1,"highlight_end":36},{"text":"                      sub rsp, 8            // Align the stack pointer","highlight_start":1,"highlight_end":71},{"text":"                      call $0","highlight_start":1,"highlight_end":30},{"text":"                      add rsp, 8            // Restore the stack pointer\"","highlight_start":1,"highlight_end":74},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"i\"($name as extern \"C\" fn(&InterruptStackFrame, _error_code: u64))","highlight_start":1,"highlight_end":91},{"text":"                     : \"rdi\", \"rsi\"","highlight_start":1,"highlight_end":36},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"add rsp, 8            // Pop the error code","highlight_start":1,"highlight_end":66},{"text":"                      iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":10425,"byte_end":10428,"line_start":295,"line_end":295,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                asm!(\"mov rsi, [rsp+0x48]   // Put the error code in RSI","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6043,"byte_end":6082,"line_start":156,"line_end":156,"column_start":41,"column_end":80,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6438,"byte_end":6510,"line_start":164,"line_end":164,"column_start":9,"column_end":81,"is_primary":false,"text":[{"text":"        set_handler_with_error_code!(page_fault, exception::page_fault_handler);","highlight_start":9,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5916,"byte_end":6130,"line_start":154,"line_end":158,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler_with_error_code($name: ident, $handler: path) {","highlight_start":9,"highlight_end":74},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":104},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9948,"byte_end":11263,"line_start":284,"line_end":320,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler_with_error_code($name: path) {","highlight_start":1,"highlight_end":50},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers), and then the two bytes of the error code. Because we skip","highlight_start":1,"highlight_end":96},{"text":"                 * 0x50 bytes, we need to manually align the stack.","highlight_start":1,"highlight_end":68},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rsi, [rsp+0x48]   // Put the error code in RSI","highlight_start":1,"highlight_end":73},{"text":"                      mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x50","highlight_start":1,"highlight_end":36},{"text":"                      sub rsp, 8            // Align the stack pointer","highlight_start":1,"highlight_end":71},{"text":"                      call $0","highlight_start":1,"highlight_end":30},{"text":"                      add rsp, 8            // Restore the stack pointer\"","highlight_start":1,"highlight_end":74},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"i\"($name as extern \"C\" fn(&InterruptStackFrame, _error_code: u64))","highlight_start":1,"highlight_end":91},{"text":"                     : \"rdi\", \"rsi\"","highlight_start":1,"highlight_end":36},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"add rsp, 8            // Pop the error code","highlight_start":1,"highlight_end":66},{"text":"                      iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/interrupts/mod.rs:295:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        set_handler_with_error_code!(page_fault, exception::page_fault_handler);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m295\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                asm!(\"mov rsi, [rsp+0x48]   // Put the error code in RSI\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8760,"byte_end":8763,"line_start":234,"line_end":234,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(\"pop r11","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":10948,"byte_end":10964,"line_start":306,"line_end":306,"column_start":17,"column_end":33,"is_primary":false,"text":[{"text":"                restore_regs!();","highlight_start":17,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6043,"byte_end":6082,"line_start":156,"line_end":156,"column_start":41,"column_end":80,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6438,"byte_end":6510,"line_start":164,"line_end":164,"column_start":9,"column_end":81,"is_primary":false,"text":[{"text":"        set_handler_with_error_code!(page_fault, exception::page_fault_handler);","highlight_start":9,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5916,"byte_end":6130,"line_start":154,"line_end":158,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler_with_error_code($name: ident, $handler: path) {","highlight_start":9,"highlight_end":74},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":104},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9948,"byte_end":11263,"line_start":284,"line_end":320,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler_with_error_code($name: path) {","highlight_start":1,"highlight_end":50},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers), and then the two bytes of the error code. Because we skip","highlight_start":1,"highlight_end":96},{"text":"                 * 0x50 bytes, we need to manually align the stack.","highlight_start":1,"highlight_end":68},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rsi, [rsp+0x48]   // Put the error code in RSI","highlight_start":1,"highlight_end":73},{"text":"                      mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x50","highlight_start":1,"highlight_end":36},{"text":"                      sub rsp, 8            // Align the stack pointer","highlight_start":1,"highlight_end":71},{"text":"                      call $0","highlight_start":1,"highlight_end":30},{"text":"                      add rsp, 8            // Restore the stack pointer\"","highlight_start":1,"highlight_end":74},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"i\"($name as extern \"C\" fn(&InterruptStackFrame, _error_code: u64))","highlight_start":1,"highlight_end":91},{"text":"                     : \"rdi\", \"rsi\"","highlight_start":1,"highlight_end":36},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"add rsp, 8            // Pop the error code","highlight_start":1,"highlight_end":66},{"text":"                      iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"restore_regs!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8733,"byte_end":8977,"line_start":233,"line_end":248,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro restore_regs() {","highlight_start":1,"highlight_end":23},{"text":"    asm!(\"pop r11","highlight_start":1,"highlight_end":18},{"text":"          pop r10","highlight_start":1,"highlight_end":18},{"text":"          pop r9","highlight_start":1,"highlight_end":17},{"text":"          pop r8","highlight_start":1,"highlight_end":17},{"text":"          pop rdi","highlight_start":1,"highlight_end":18},{"text":"          pop rsi","highlight_start":1,"highlight_end":18},{"text":"          pop rdx","highlight_start":1,"highlight_end":18},{"text":"          pop rcx","highlight_start":1,"highlight_end":18},{"text":"          pop rax\"","highlight_start":1,"highlight_end":19},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        : \"intel\"","highlight_start":1,"highlight_end":18},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8760,"byte_end":8763,"line_start":234,"line_end":234,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(\"pop r11","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":10948,"byte_end":10964,"line_start":306,"line_end":306,"column_start":17,"column_end":33,"is_primary":false,"text":[{"text":"                restore_regs!();","highlight_start":17,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6043,"byte_end":6082,"line_start":156,"line_end":156,"column_start":41,"column_end":80,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6438,"byte_end":6510,"line_start":164,"line_end":164,"column_start":9,"column_end":81,"is_primary":false,"text":[{"text":"        set_handler_with_error_code!(page_fault, exception::page_fault_handler);","highlight_start":9,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5916,"byte_end":6130,"line_start":154,"line_end":158,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler_with_error_code($name: ident, $handler: path) {","highlight_start":9,"highlight_end":74},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":104},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9948,"byte_end":11263,"line_start":284,"line_end":320,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler_with_error_code($name: path) {","highlight_start":1,"highlight_end":50},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers), and then the two bytes of the error code. Because we skip","highlight_start":1,"highlight_end":96},{"text":"                 * 0x50 bytes, we need to manually align the stack.","highlight_start":1,"highlight_end":68},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rsi, [rsp+0x48]   // Put the error code in RSI","highlight_start":1,"highlight_end":73},{"text":"                      mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x50","highlight_start":1,"highlight_end":36},{"text":"                      sub rsp, 8            // Align the stack pointer","highlight_start":1,"highlight_end":71},{"text":"                      call $0","highlight_start":1,"highlight_end":30},{"text":"                      add rsp, 8            // Restore the stack pointer\"","highlight_start":1,"highlight_end":74},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"i\"($name as extern \"C\" fn(&InterruptStackFrame, _error_code: u64))","highlight_start":1,"highlight_end":91},{"text":"                     : \"rdi\", \"rsi\"","highlight_start":1,"highlight_end":36},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"add rsp, 8            // Pop the error code","highlight_start":1,"highlight_end":66},{"text":"                      iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"restore_regs!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8733,"byte_end":8977,"line_start":233,"line_end":248,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro restore_regs() {","highlight_start":1,"highlight_end":23},{"text":"    asm!(\"pop r11","highlight_start":1,"highlight_end":18},{"text":"          pop r10","highlight_start":1,"highlight_end":18},{"text":"          pop r9","highlight_start":1,"highlight_end":17},{"text":"          pop r8","highlight_start":1,"highlight_end":17},{"text":"          pop rdi","highlight_start":1,"highlight_end":18},{"text":"          pop rsi","highlight_start":1,"highlight_end":18},{"text":"          pop rdx","highlight_start":1,"highlight_end":18},{"text":"          pop rcx","highlight_start":1,"highlight_end":18},{"text":"          pop rax\"","highlight_start":1,"highlight_end":19},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        : \"intel\"","highlight_start":1,"highlight_end":18},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/interrupts/mod.rs:234:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        set_handler_with_error_code!(page_fault, exception::page_fault_handler);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m234\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    asm!(\"pop r11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":10981,"byte_end":10984,"line_start":307,"line_end":307,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                asm!(\"add rsp, 8            // Pop the error code","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6043,"byte_end":6082,"line_start":156,"line_end":156,"column_start":41,"column_end":80,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6438,"byte_end":6510,"line_start":164,"line_end":164,"column_start":9,"column_end":81,"is_primary":false,"text":[{"text":"        set_handler_with_error_code!(page_fault, exception::page_fault_handler);","highlight_start":9,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5916,"byte_end":6130,"line_start":154,"line_end":158,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler_with_error_code($name: ident, $handler: path) {","highlight_start":9,"highlight_end":74},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":104},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9948,"byte_end":11263,"line_start":284,"line_end":320,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler_with_error_code($name: path) {","highlight_start":1,"highlight_end":50},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers), and then the two bytes of the error code. Because we skip","highlight_start":1,"highlight_end":96},{"text":"                 * 0x50 bytes, we need to manually align the stack.","highlight_start":1,"highlight_end":68},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rsi, [rsp+0x48]   // Put the error code in RSI","highlight_start":1,"highlight_end":73},{"text":"                      mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x50","highlight_start":1,"highlight_end":36},{"text":"                      sub rsp, 8            // Align the stack pointer","highlight_start":1,"highlight_end":71},{"text":"                      call $0","highlight_start":1,"highlight_end":30},{"text":"                      add rsp, 8            // Restore the stack pointer\"","highlight_start":1,"highlight_end":74},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"i\"($name as extern \"C\" fn(&InterruptStackFrame, _error_code: u64))","highlight_start":1,"highlight_end":91},{"text":"                     : \"rdi\", \"rsi\"","highlight_start":1,"highlight_end":36},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"add rsp, 8            // Pop the error code","highlight_start":1,"highlight_end":66},{"text":"                      iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":10981,"byte_end":10984,"line_start":307,"line_end":307,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                asm!(\"add rsp, 8            // Pop the error code","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6043,"byte_end":6082,"line_start":156,"line_end":156,"column_start":41,"column_end":80,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6438,"byte_end":6510,"line_start":164,"line_end":164,"column_start":9,"column_end":81,"is_primary":false,"text":[{"text":"        set_handler_with_error_code!(page_fault, exception::page_fault_handler);","highlight_start":9,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5916,"byte_end":6130,"line_start":154,"line_end":158,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler_with_error_code($name: ident, $handler: path) {","highlight_start":9,"highlight_end":74},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":104},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9948,"byte_end":11263,"line_start":284,"line_end":320,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler_with_error_code($name: path) {","highlight_start":1,"highlight_end":50},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers), and then the two bytes of the error code. Because we skip","highlight_start":1,"highlight_end":96},{"text":"                 * 0x50 bytes, we need to manually align the stack.","highlight_start":1,"highlight_end":68},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rsi, [rsp+0x48]   // Put the error code in RSI","highlight_start":1,"highlight_end":73},{"text":"                      mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x50","highlight_start":1,"highlight_end":36},{"text":"                      sub rsp, 8            // Align the stack pointer","highlight_start":1,"highlight_end":71},{"text":"                      call $0","highlight_start":1,"highlight_end":30},{"text":"                      add rsp, 8            // Restore the stack pointer\"","highlight_start":1,"highlight_end":74},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"i\"($name as extern \"C\" fn(&InterruptStackFrame, _error_code: u64))","highlight_start":1,"highlight_end":91},{"text":"                     : \"rdi\", \"rsi\"","highlight_start":1,"highlight_end":36},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"add rsp, 8            // Pop the error code","highlight_start":1,"highlight_end":66},{"text":"                      iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/interrupts/mod.rs:307:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        set_handler_with_error_code!(page_fault, exception::page_fault_handler);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m307\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                asm!(\"add rsp, 8            // Pop the error code\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8464,"byte_end":8467,"line_start":216,"line_end":216,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(\"push rax","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":10395,"byte_end":10408,"line_start":294,"line_end":294,"column_start":17,"column_end":30,"is_primary":false,"text":[{"text":"                save_regs!();","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6043,"byte_end":6082,"line_start":156,"line_end":156,"column_start":41,"column_end":80,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6519,"byte_end":6595,"line_start":165,"line_end":165,"column_start":9,"column_end":85,"is_primary":false,"text":[{"text":"        set_handler_with_error_code!(double_fault, exception::double_fault_handler);","highlight_start":9,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5916,"byte_end":6130,"line_start":154,"line_end":158,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler_with_error_code($name: ident, $handler: path) {","highlight_start":9,"highlight_end":74},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":104},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9948,"byte_end":11263,"line_start":284,"line_end":320,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler_with_error_code($name: path) {","highlight_start":1,"highlight_end":50},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers), and then the two bytes of the error code. Because we skip","highlight_start":1,"highlight_end":96},{"text":"                 * 0x50 bytes, we need to manually align the stack.","highlight_start":1,"highlight_end":68},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rsi, [rsp+0x48]   // Put the error code in RSI","highlight_start":1,"highlight_end":73},{"text":"                      mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x50","highlight_start":1,"highlight_end":36},{"text":"                      sub rsp, 8            // Align the stack pointer","highlight_start":1,"highlight_end":71},{"text":"                      call $0","highlight_start":1,"highlight_end":30},{"text":"                      add rsp, 8            // Restore the stack pointer\"","highlight_start":1,"highlight_end":74},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"i\"($name as extern \"C\" fn(&InterruptStackFrame, _error_code: u64))","highlight_start":1,"highlight_end":91},{"text":"                     : \"rdi\", \"rsi\"","highlight_start":1,"highlight_end":36},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"add rsp, 8            // Pop the error code","highlight_start":1,"highlight_end":66},{"text":"                      iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"save_regs!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8440,"byte_end":8690,"line_start":215,"line_end":230,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro save_regs() {","highlight_start":1,"highlight_end":20},{"text":"    asm!(\"push rax","highlight_start":1,"highlight_end":19},{"text":"          push rcx","highlight_start":1,"highlight_end":19},{"text":"          push rdx","highlight_start":1,"highlight_end":19},{"text":"          push rsi","highlight_start":1,"highlight_end":19},{"text":"          push rdi","highlight_start":1,"highlight_end":19},{"text":"          push r8","highlight_start":1,"highlight_end":18},{"text":"          push r9","highlight_start":1,"highlight_end":18},{"text":"          push r10","highlight_start":1,"highlight_end":19},{"text":"          push r11\"","highlight_start":1,"highlight_end":20},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        : \"intel\"","highlight_start":1,"highlight_end":18},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8464,"byte_end":8467,"line_start":216,"line_end":216,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(\"push rax","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":10395,"byte_end":10408,"line_start":294,"line_end":294,"column_start":17,"column_end":30,"is_primary":false,"text":[{"text":"                save_regs!();","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6043,"byte_end":6082,"line_start":156,"line_end":156,"column_start":41,"column_end":80,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6519,"byte_end":6595,"line_start":165,"line_end":165,"column_start":9,"column_end":85,"is_primary":false,"text":[{"text":"        set_handler_with_error_code!(double_fault, exception::double_fault_handler);","highlight_start":9,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5916,"byte_end":6130,"line_start":154,"line_end":158,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler_with_error_code($name: ident, $handler: path) {","highlight_start":9,"highlight_end":74},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":104},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9948,"byte_end":11263,"line_start":284,"line_end":320,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler_with_error_code($name: path) {","highlight_start":1,"highlight_end":50},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers), and then the two bytes of the error code. Because we skip","highlight_start":1,"highlight_end":96},{"text":"                 * 0x50 bytes, we need to manually align the stack.","highlight_start":1,"highlight_end":68},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rsi, [rsp+0x48]   // Put the error code in RSI","highlight_start":1,"highlight_end":73},{"text":"                      mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x50","highlight_start":1,"highlight_end":36},{"text":"                      sub rsp, 8            // Align the stack pointer","highlight_start":1,"highlight_end":71},{"text":"                      call $0","highlight_start":1,"highlight_end":30},{"text":"                      add rsp, 8            // Restore the stack pointer\"","highlight_start":1,"highlight_end":74},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"i\"($name as extern \"C\" fn(&InterruptStackFrame, _error_code: u64))","highlight_start":1,"highlight_end":91},{"text":"                     : \"rdi\", \"rsi\"","highlight_start":1,"highlight_end":36},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"add rsp, 8            // Pop the error code","highlight_start":1,"highlight_end":66},{"text":"                      iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"save_regs!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8440,"byte_end":8690,"line_start":215,"line_end":230,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro save_regs() {","highlight_start":1,"highlight_end":20},{"text":"    asm!(\"push rax","highlight_start":1,"highlight_end":19},{"text":"          push rcx","highlight_start":1,"highlight_end":19},{"text":"          push rdx","highlight_start":1,"highlight_end":19},{"text":"          push rsi","highlight_start":1,"highlight_end":19},{"text":"          push rdi","highlight_start":1,"highlight_end":19},{"text":"          push r8","highlight_start":1,"highlight_end":18},{"text":"          push r9","highlight_start":1,"highlight_end":18},{"text":"          push r10","highlight_start":1,"highlight_end":19},{"text":"          push r11\"","highlight_start":1,"highlight_end":20},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        : \"intel\"","highlight_start":1,"highlight_end":18},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/interrupts/mod.rs:216:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        set_handler_with_error_code!(double_fault, exception::double_fault_handler);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    asm!(\"push rax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":10425,"byte_end":10428,"line_start":295,"line_end":295,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                asm!(\"mov rsi, [rsp+0x48]   // Put the error code in RSI","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6043,"byte_end":6082,"line_start":156,"line_end":156,"column_start":41,"column_end":80,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6519,"byte_end":6595,"line_start":165,"line_end":165,"column_start":9,"column_end":85,"is_primary":false,"text":[{"text":"        set_handler_with_error_code!(double_fault, exception::double_fault_handler);","highlight_start":9,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5916,"byte_end":6130,"line_start":154,"line_end":158,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler_with_error_code($name: ident, $handler: path) {","highlight_start":9,"highlight_end":74},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":104},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9948,"byte_end":11263,"line_start":284,"line_end":320,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler_with_error_code($name: path) {","highlight_start":1,"highlight_end":50},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers), and then the two bytes of the error code. Because we skip","highlight_start":1,"highlight_end":96},{"text":"                 * 0x50 bytes, we need to manually align the stack.","highlight_start":1,"highlight_end":68},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rsi, [rsp+0x48]   // Put the error code in RSI","highlight_start":1,"highlight_end":73},{"text":"                      mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x50","highlight_start":1,"highlight_end":36},{"text":"                      sub rsp, 8            // Align the stack pointer","highlight_start":1,"highlight_end":71},{"text":"                      call $0","highlight_start":1,"highlight_end":30},{"text":"                      add rsp, 8            // Restore the stack pointer\"","highlight_start":1,"highlight_end":74},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"i\"($name as extern \"C\" fn(&InterruptStackFrame, _error_code: u64))","highlight_start":1,"highlight_end":91},{"text":"                     : \"rdi\", \"rsi\"","highlight_start":1,"highlight_end":36},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"add rsp, 8            // Pop the error code","highlight_start":1,"highlight_end":66},{"text":"                      iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":10425,"byte_end":10428,"line_start":295,"line_end":295,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                asm!(\"mov rsi, [rsp+0x48]   // Put the error code in RSI","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6043,"byte_end":6082,"line_start":156,"line_end":156,"column_start":41,"column_end":80,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6519,"byte_end":6595,"line_start":165,"line_end":165,"column_start":9,"column_end":85,"is_primary":false,"text":[{"text":"        set_handler_with_error_code!(double_fault, exception::double_fault_handler);","highlight_start":9,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5916,"byte_end":6130,"line_start":154,"line_end":158,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler_with_error_code($name: ident, $handler: path) {","highlight_start":9,"highlight_end":74},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":104},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9948,"byte_end":11263,"line_start":284,"line_end":320,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler_with_error_code($name: path) {","highlight_start":1,"highlight_end":50},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers), and then the two bytes of the error code. Because we skip","highlight_start":1,"highlight_end":96},{"text":"                 * 0x50 bytes, we need to manually align the stack.","highlight_start":1,"highlight_end":68},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rsi, [rsp+0x48]   // Put the error code in RSI","highlight_start":1,"highlight_end":73},{"text":"                      mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x50","highlight_start":1,"highlight_end":36},{"text":"                      sub rsp, 8            // Align the stack pointer","highlight_start":1,"highlight_end":71},{"text":"                      call $0","highlight_start":1,"highlight_end":30},{"text":"                      add rsp, 8            // Restore the stack pointer\"","highlight_start":1,"highlight_end":74},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"i\"($name as extern \"C\" fn(&InterruptStackFrame, _error_code: u64))","highlight_start":1,"highlight_end":91},{"text":"                     : \"rdi\", \"rsi\"","highlight_start":1,"highlight_end":36},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"add rsp, 8            // Pop the error code","highlight_start":1,"highlight_end":66},{"text":"                      iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/interrupts/mod.rs:295:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        set_handler_with_error_code!(double_fault, exception::double_fault_handler);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m295\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                asm!(\"mov rsi, [rsp+0x48]   // Put the error code in RSI\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8760,"byte_end":8763,"line_start":234,"line_end":234,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(\"pop r11","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":10948,"byte_end":10964,"line_start":306,"line_end":306,"column_start":17,"column_end":33,"is_primary":false,"text":[{"text":"                restore_regs!();","highlight_start":17,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6043,"byte_end":6082,"line_start":156,"line_end":156,"column_start":41,"column_end":80,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6519,"byte_end":6595,"line_start":165,"line_end":165,"column_start":9,"column_end":85,"is_primary":false,"text":[{"text":"        set_handler_with_error_code!(double_fault, exception::double_fault_handler);","highlight_start":9,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5916,"byte_end":6130,"line_start":154,"line_end":158,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler_with_error_code($name: ident, $handler: path) {","highlight_start":9,"highlight_end":74},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":104},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9948,"byte_end":11263,"line_start":284,"line_end":320,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler_with_error_code($name: path) {","highlight_start":1,"highlight_end":50},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers), and then the two bytes of the error code. Because we skip","highlight_start":1,"highlight_end":96},{"text":"                 * 0x50 bytes, we need to manually align the stack.","highlight_start":1,"highlight_end":68},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rsi, [rsp+0x48]   // Put the error code in RSI","highlight_start":1,"highlight_end":73},{"text":"                      mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x50","highlight_start":1,"highlight_end":36},{"text":"                      sub rsp, 8            // Align the stack pointer","highlight_start":1,"highlight_end":71},{"text":"                      call $0","highlight_start":1,"highlight_end":30},{"text":"                      add rsp, 8            // Restore the stack pointer\"","highlight_start":1,"highlight_end":74},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"i\"($name as extern \"C\" fn(&InterruptStackFrame, _error_code: u64))","highlight_start":1,"highlight_end":91},{"text":"                     : \"rdi\", \"rsi\"","highlight_start":1,"highlight_end":36},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"add rsp, 8            // Pop the error code","highlight_start":1,"highlight_end":66},{"text":"                      iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"restore_regs!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8733,"byte_end":8977,"line_start":233,"line_end":248,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro restore_regs() {","highlight_start":1,"highlight_end":23},{"text":"    asm!(\"pop r11","highlight_start":1,"highlight_end":18},{"text":"          pop r10","highlight_start":1,"highlight_end":18},{"text":"          pop r9","highlight_start":1,"highlight_end":17},{"text":"          pop r8","highlight_start":1,"highlight_end":17},{"text":"          pop rdi","highlight_start":1,"highlight_end":18},{"text":"          pop rsi","highlight_start":1,"highlight_end":18},{"text":"          pop rdx","highlight_start":1,"highlight_end":18},{"text":"          pop rcx","highlight_start":1,"highlight_end":18},{"text":"          pop rax\"","highlight_start":1,"highlight_end":19},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        : \"intel\"","highlight_start":1,"highlight_end":18},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8760,"byte_end":8763,"line_start":234,"line_end":234,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(\"pop r11","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":10948,"byte_end":10964,"line_start":306,"line_end":306,"column_start":17,"column_end":33,"is_primary":false,"text":[{"text":"                restore_regs!();","highlight_start":17,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6043,"byte_end":6082,"line_start":156,"line_end":156,"column_start":41,"column_end":80,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6519,"byte_end":6595,"line_start":165,"line_end":165,"column_start":9,"column_end":85,"is_primary":false,"text":[{"text":"        set_handler_with_error_code!(double_fault, exception::double_fault_handler);","highlight_start":9,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5916,"byte_end":6130,"line_start":154,"line_end":158,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler_with_error_code($name: ident, $handler: path) {","highlight_start":9,"highlight_end":74},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":104},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9948,"byte_end":11263,"line_start":284,"line_end":320,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler_with_error_code($name: path) {","highlight_start":1,"highlight_end":50},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers), and then the two bytes of the error code. Because we skip","highlight_start":1,"highlight_end":96},{"text":"                 * 0x50 bytes, we need to manually align the stack.","highlight_start":1,"highlight_end":68},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rsi, [rsp+0x48]   // Put the error code in RSI","highlight_start":1,"highlight_end":73},{"text":"                      mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x50","highlight_start":1,"highlight_end":36},{"text":"                      sub rsp, 8            // Align the stack pointer","highlight_start":1,"highlight_end":71},{"text":"                      call $0","highlight_start":1,"highlight_end":30},{"text":"                      add rsp, 8            // Restore the stack pointer\"","highlight_start":1,"highlight_end":74},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"i\"($name as extern \"C\" fn(&InterruptStackFrame, _error_code: u64))","highlight_start":1,"highlight_end":91},{"text":"                     : \"rdi\", \"rsi\"","highlight_start":1,"highlight_end":36},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"add rsp, 8            // Pop the error code","highlight_start":1,"highlight_end":66},{"text":"                      iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"restore_regs!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":8733,"byte_end":8977,"line_start":233,"line_end":248,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro restore_regs() {","highlight_start":1,"highlight_end":23},{"text":"    asm!(\"pop r11","highlight_start":1,"highlight_end":18},{"text":"          pop r10","highlight_start":1,"highlight_end":18},{"text":"          pop r9","highlight_start":1,"highlight_end":17},{"text":"          pop r8","highlight_start":1,"highlight_end":17},{"text":"          pop rdi","highlight_start":1,"highlight_end":18},{"text":"          pop rsi","highlight_start":1,"highlight_end":18},{"text":"          pop rdx","highlight_start":1,"highlight_end":18},{"text":"          pop rcx","highlight_start":1,"highlight_end":18},{"text":"          pop rax\"","highlight_start":1,"highlight_end":19},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        :","highlight_start":1,"highlight_end":10},{"text":"        : \"intel\"","highlight_start":1,"highlight_end":18},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/interrupts/mod.rs:234:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        set_handler_with_error_code!(double_fault, exception::double_fault_handler);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m234\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    asm!(\"pop r11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":10981,"byte_end":10984,"line_start":307,"line_end":307,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                asm!(\"add rsp, 8            // Pop the error code","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6043,"byte_end":6082,"line_start":156,"line_end":156,"column_start":41,"column_end":80,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6519,"byte_end":6595,"line_start":165,"line_end":165,"column_start":9,"column_end":85,"is_primary":false,"text":[{"text":"        set_handler_with_error_code!(double_fault, exception::double_fault_handler);","highlight_start":9,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5916,"byte_end":6130,"line_start":154,"line_end":158,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler_with_error_code($name: ident, $handler: path) {","highlight_start":9,"highlight_end":74},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":104},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9948,"byte_end":11263,"line_start":284,"line_end":320,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler_with_error_code($name: path) {","highlight_start":1,"highlight_end":50},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers), and then the two bytes of the error code. Because we skip","highlight_start":1,"highlight_end":96},{"text":"                 * 0x50 bytes, we need to manually align the stack.","highlight_start":1,"highlight_end":68},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rsi, [rsp+0x48]   // Put the error code in RSI","highlight_start":1,"highlight_end":73},{"text":"                      mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x50","highlight_start":1,"highlight_end":36},{"text":"                      sub rsp, 8            // Align the stack pointer","highlight_start":1,"highlight_end":71},{"text":"                      call $0","highlight_start":1,"highlight_end":30},{"text":"                      add rsp, 8            // Restore the stack pointer\"","highlight_start":1,"highlight_end":74},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"i\"($name as extern \"C\" fn(&InterruptStackFrame, _error_code: u64))","highlight_start":1,"highlight_end":91},{"text":"                     : \"rdi\", \"rsi\"","highlight_start":1,"highlight_end":36},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"add rsp, 8            // Pop the error code","highlight_start":1,"highlight_end":66},{"text":"                      iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":10981,"byte_end":10984,"line_start":307,"line_end":307,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                asm!(\"add rsp, 8            // Pop the error code","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6043,"byte_end":6082,"line_start":156,"line_end":156,"column_start":41,"column_end":80,"is_primary":false,"text":[{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":41,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":6519,"byte_end":6595,"line_start":165,"line_end":165,"column_start":9,"column_end":85,"is_primary":false,"text":[{"text":"        set_handler_with_error_code!(double_fault, exception::double_fault_handler);","highlight_start":9,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"set_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":5916,"byte_end":6130,"line_start":154,"line_end":158,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        macro set_handler_with_error_code($name: ident, $handler: path) {","highlight_start":9,"highlight_end":74},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                IDT.$name().set_handler(wrap_handler_with_error_code!($handler), KERNEL_CODE_SELECTOR);","highlight_start":1,"highlight_end":104},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"wrap_handler_with_error_code!","def_site_span":{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":9948,"byte_end":11263,"line_start":284,"line_end":320,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro wrap_handler_with_error_code($name: path) {","highlight_start":1,"highlight_end":50},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        extern \"C\" fn wrapper() -> ! {","highlight_start":1,"highlight_end":39},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                /*","highlight_start":1,"highlight_end":19},{"text":"                 * To calculate the address of the exception stack frame, we add 0x48 bytes (9","highlight_start":1,"highlight_end":95},{"text":"                 * 64-bit registers), and then the two bytes of the error code. Because we skip","highlight_start":1,"highlight_end":96},{"text":"                 * 0x50 bytes, we need to manually align the stack.","highlight_start":1,"highlight_end":68},{"text":"                 */","highlight_start":1,"highlight_end":20},{"text":"                save_regs!();","highlight_start":1,"highlight_end":30},{"text":"                asm!(\"mov rsi, [rsp+0x48]   // Put the error code in RSI","highlight_start":1,"highlight_end":73},{"text":"                      mov rdi, rsp","highlight_start":1,"highlight_end":35},{"text":"                      add rdi, 0x50","highlight_start":1,"highlight_end":36},{"text":"                      sub rsp, 8            // Align the stack pointer","highlight_start":1,"highlight_end":71},{"text":"                      call $0","highlight_start":1,"highlight_end":30},{"text":"                      add rsp, 8            // Restore the stack pointer\"","highlight_start":1,"highlight_end":74},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"i\"($name as extern \"C\" fn(&InterruptStackFrame, _error_code: u64))","highlight_start":1,"highlight_end":91},{"text":"                     : \"rdi\", \"rsi\"","highlight_start":1,"highlight_end":36},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                restore_regs!();","highlight_start":1,"highlight_end":33},{"text":"                asm!(\"add rsp, 8            // Pop the error code","highlight_start":1,"highlight_end":66},{"text":"                      iretq\"","highlight_start":1,"highlight_end":29},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     :","highlight_start":1,"highlight_end":23},{"text":"                     : \"intel\"","highlight_start":1,"highlight_end":31},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                unreachable!();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        wrapper","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/interrupts/mod.rs:307:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        set_handler_with_error_code!(double_fault, exception::double_fault_handler);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m307\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                asm!(\"add rsp, 8            // Pop the error code\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/per_cpu.rs","byte_start":636,"byte_end":639,"line_start":15,"line_end":15,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(\"mov $0, gs:0x0\"","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/per_cpu.rs","byte_start":636,"byte_end":639,"line_start":15,"line_end":15,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(\"mov $0, gs:0x0\"","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/per_cpu.rs:15:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    asm!(\"mov $0, gs:0x0\"\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/hw/registers.rs","byte_start":2378,"byte_end":2381,"line_start":72,"line_end":72,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        asm!(concat!(\"mov %\", stringify!($reg), \", $0\")","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/lib.rs","byte_start":3015,"byte_end":3052,"line_start":82,"line_end":82,"column_start":65,"column_end":102,"is_primary":false,"text":[{"text":"                        Frame::starts_with(PhysicalAddress::new(hw::registers::read_control_reg!(cr3) as usize).unwrap()),","highlight_start":65,"highlight_end":102}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"hw::registers::read_control_reg!","def_site_span":{"file_name":"hal_x86_64/src/hw/registers.rs","byte_start":2104,"byte_end":2553,"line_start":63,"line_end":80,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"pub macro read_control_reg($reg: ident) {{","highlight_start":1,"highlight_end":43},{"text":"    let result: u64;","highlight_start":1,"highlight_end":21},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /*","highlight_start":1,"highlight_end":7},{"text":"     * If this macro is used inside an unsafe block, this causes a warning, which can be unexpected and is noisy,","highlight_start":1,"highlight_end":114},{"text":"     * so we suppress it here.","highlight_start":1,"highlight_end":31},{"text":"     */","highlight_start":1,"highlight_end":8},{"text":"    #[allow(unused_unsafe)]","highlight_start":1,"highlight_end":28},{"text":"    unsafe {","highlight_start":1,"highlight_end":13},{"text":"        asm!(concat!(\"mov %\", stringify!($reg), \", $0\")","highlight_start":1,"highlight_end":56},{"text":"             : \"=r\"(result)","highlight_start":1,"highlight_end":28},{"text":"             :","highlight_start":1,"highlight_end":15},{"text":"             : \"memory\"","highlight_start":1,"highlight_end":24},{"text":"             : \"volatile\"","highlight_start":1,"highlight_end":26},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    result","highlight_start":1,"highlight_end":11},{"text":"}}","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/hw/registers.rs","byte_start":2378,"byte_end":2381,"line_start":72,"line_end":72,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        asm!(concat!(\"mov %\", stringify!($reg), \", $0\")","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"hal_x86_64/src/lib.rs","byte_start":3015,"byte_end":3052,"line_start":82,"line_end":82,"column_start":65,"column_end":102,"is_primary":false,"text":[{"text":"                        Frame::starts_with(PhysicalAddress::new(hw::registers::read_control_reg!(cr3) as usize).unwrap()),","highlight_start":65,"highlight_end":102}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"hw::registers::read_control_reg!","def_site_span":{"file_name":"hal_x86_64/src/hw/registers.rs","byte_start":2104,"byte_end":2553,"line_start":63,"line_end":80,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"pub macro read_control_reg($reg: ident) {{","highlight_start":1,"highlight_end":43},{"text":"    let result: u64;","highlight_start":1,"highlight_end":21},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /*","highlight_start":1,"highlight_end":7},{"text":"     * If this macro is used inside an unsafe block, this causes a warning, which can be unexpected and is noisy,","highlight_start":1,"highlight_end":114},{"text":"     * so we suppress it here.","highlight_start":1,"highlight_end":31},{"text":"     */","highlight_start":1,"highlight_end":8},{"text":"    #[allow(unused_unsafe)]","highlight_start":1,"highlight_end":28},{"text":"    unsafe {","highlight_start":1,"highlight_end":13},{"text":"        asm!(concat!(\"mov %\", stringify!($reg), \", $0\")","highlight_start":1,"highlight_end":56},{"text":"             : \"=r\"(result)","highlight_start":1,"highlight_end":28},{"text":"             :","highlight_start":1,"highlight_end":15},{"text":"             : \"memory\"","highlight_start":1,"highlight_end":24},{"text":"             : \"volatile\"","highlight_start":1,"highlight_end":26},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    result","highlight_start":1,"highlight_end":11},{"text":"}}","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/hw/registers.rs:72:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        asm!(concat!(\"mov %\", stringify!($reg), \", $0\")\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mhal_x86_64/src/lib.rs:82:65\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        Frame::starts_with(PhysicalAddress::new(hw::registers::read_control_reg!(cr3) as usize).unwrap()),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/lib.rs","byte_start":6203,"byte_end":6206,"line_start":151,"line_end":151,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                asm!(\"cli\");","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/lib.rs","byte_start":6203,"byte_end":6206,"line_start":151,"line_end":151,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                asm!(\"cli\");","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/lib.rs:151:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                asm!(\"cli\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/lib.rs","byte_start":6291,"byte_end":6294,"line_start":155,"line_end":155,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                asm!(\"sti\");","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/lib.rs","byte_start":6291,"byte_end":6294,"line_start":155,"line_end":155,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                asm!(\"sti\");","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/lib.rs:155:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m155\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                asm!(\"sti\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/lib.rs","byte_start":6428,"byte_end":6431,"line_start":161,"line_end":161,"column_start":25,"column_end":28,"is_primary":true,"text":[{"text":"                        asm!(\"hlt\");","highlight_start":25,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/lib.rs","byte_start":6428,"byte_end":6431,"line_start":161,"line_end":161,"column_start":25,"column_end":28,"is_primary":true,"text":[{"text":"                        asm!(\"hlt\");","highlight_start":25,"highlight_end":28}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/lib.rs:161:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        asm!(\"hlt\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/hw/registers.rs","byte_start":3012,"byte_end":3015,"line_start":90,"line_end":90,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(concat!(\"mov $0, %\", stringify!($reg))","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/lib.rs","byte_start":7840,"byte_end":7869,"line_start":201,"line_end":201,"column_start":17,"column_end":46,"is_primary":false,"text":[{"text":"                write_control_reg!(CR4, cr4);","highlight_start":17,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write_control_reg!","def_site_span":{"file_name":"hal_x86_64/src/hw/registers.rs","byte_start":2838,"byte_end":3147,"line_start":85,"line_end":96,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub macro write_control_reg($reg: ident, $value: expr) {","highlight_start":1,"highlight_end":57},{"text":"    /*","highlight_start":1,"highlight_end":7},{"text":"     * This will cause a type-check error if $value isn't a u64.","highlight_start":1,"highlight_end":65},{"text":"     */","highlight_start":1,"highlight_end":8},{"text":"    let value_u64: u64 = $value;","highlight_start":1,"highlight_end":33},{"text":"    asm!(concat!(\"mov $0, %\", stringify!($reg))","highlight_start":1,"highlight_end":48},{"text":"         :","highlight_start":1,"highlight_end":11},{"text":"         : \"r\"(value_u64)","highlight_start":1,"highlight_end":26},{"text":"         : \"memory\"","highlight_start":1,"highlight_end":20},{"text":"         : \"volatile\"","highlight_start":1,"highlight_end":22},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/hw/registers.rs","byte_start":3012,"byte_end":3015,"line_start":90,"line_end":90,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(concat!(\"mov $0, %\", stringify!($reg))","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"hal_x86_64/src/lib.rs","byte_start":7840,"byte_end":7869,"line_start":201,"line_end":201,"column_start":17,"column_end":46,"is_primary":false,"text":[{"text":"                write_control_reg!(CR4, cr4);","highlight_start":17,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write_control_reg!","def_site_span":{"file_name":"hal_x86_64/src/hw/registers.rs","byte_start":2838,"byte_end":3147,"line_start":85,"line_end":96,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub macro write_control_reg($reg: ident, $value: expr) {","highlight_start":1,"highlight_end":57},{"text":"    /*","highlight_start":1,"highlight_end":7},{"text":"     * This will cause a type-check error if $value isn't a u64.","highlight_start":1,"highlight_end":65},{"text":"     */","highlight_start":1,"highlight_end":8},{"text":"    let value_u64: u64 = $value;","highlight_start":1,"highlight_end":33},{"text":"    asm!(concat!(\"mov $0, %\", stringify!($reg))","highlight_start":1,"highlight_end":48},{"text":"         :","highlight_start":1,"highlight_end":11},{"text":"         : \"r\"(value_u64)","highlight_start":1,"highlight_end":26},{"text":"         : \"memory\"","highlight_start":1,"highlight_end":20},{"text":"         : \"volatile\"","highlight_start":1,"highlight_end":22},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/hw/registers.rs:90:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    asm!(concat!(\"mov $0, %\", stringify!($reg))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mhal_x86_64/src/lib.rs:201:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m201\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                write_control_reg!(CR4, cr4);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/hw/registers.rs","byte_start":2378,"byte_end":2381,"line_start":72,"line_end":72,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        asm!(concat!(\"mov %\", stringify!($reg), \", $0\")","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/lib.rs","byte_start":7619,"byte_end":7641,"line_start":196,"line_end":196,"column_start":27,"column_end":49,"is_primary":false,"text":[{"text":"            let mut cr4 = read_control_reg!(CR4);","highlight_start":27,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_control_reg!","def_site_span":{"file_name":"hal_x86_64/src/hw/registers.rs","byte_start":2104,"byte_end":2553,"line_start":63,"line_end":80,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"pub macro read_control_reg($reg: ident) {{","highlight_start":1,"highlight_end":43},{"text":"    let result: u64;","highlight_start":1,"highlight_end":21},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /*","highlight_start":1,"highlight_end":7},{"text":"     * If this macro is used inside an unsafe block, this causes a warning, which can be unexpected and is noisy,","highlight_start":1,"highlight_end":114},{"text":"     * so we suppress it here.","highlight_start":1,"highlight_end":31},{"text":"     */","highlight_start":1,"highlight_end":8},{"text":"    #[allow(unused_unsafe)]","highlight_start":1,"highlight_end":28},{"text":"    unsafe {","highlight_start":1,"highlight_end":13},{"text":"        asm!(concat!(\"mov %\", stringify!($reg), \", $0\")","highlight_start":1,"highlight_end":56},{"text":"             : \"=r\"(result)","highlight_start":1,"highlight_end":28},{"text":"             :","highlight_start":1,"highlight_end":15},{"text":"             : \"memory\"","highlight_start":1,"highlight_end":24},{"text":"             : \"volatile\"","highlight_start":1,"highlight_end":26},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    result","highlight_start":1,"highlight_end":11},{"text":"}}","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/hw/registers.rs","byte_start":2378,"byte_end":2381,"line_start":72,"line_end":72,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        asm!(concat!(\"mov %\", stringify!($reg), \", $0\")","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"hal_x86_64/src/lib.rs","byte_start":7619,"byte_end":7641,"line_start":196,"line_end":196,"column_start":27,"column_end":49,"is_primary":false,"text":[{"text":"            let mut cr4 = read_control_reg!(CR4);","highlight_start":27,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_control_reg!","def_site_span":{"file_name":"hal_x86_64/src/hw/registers.rs","byte_start":2104,"byte_end":2553,"line_start":63,"line_end":80,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"pub macro read_control_reg($reg: ident) {{","highlight_start":1,"highlight_end":43},{"text":"    let result: u64;","highlight_start":1,"highlight_end":21},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /*","highlight_start":1,"highlight_end":7},{"text":"     * If this macro is used inside an unsafe block, this causes a warning, which can be unexpected and is noisy,","highlight_start":1,"highlight_end":114},{"text":"     * so we suppress it here.","highlight_start":1,"highlight_end":31},{"text":"     */","highlight_start":1,"highlight_end":8},{"text":"    #[allow(unused_unsafe)]","highlight_start":1,"highlight_end":28},{"text":"    unsafe {","highlight_start":1,"highlight_end":13},{"text":"        asm!(concat!(\"mov %\", stringify!($reg), \", $0\")","highlight_start":1,"highlight_end":56},{"text":"             : \"=r\"(result)","highlight_start":1,"highlight_end":28},{"text":"             :","highlight_start":1,"highlight_end":15},{"text":"             : \"memory\"","highlight_start":1,"highlight_end":24},{"text":"             : \"volatile\"","highlight_start":1,"highlight_end":26},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    result","highlight_start":1,"highlight_end":11},{"text":"}}","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/hw/registers.rs:72:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        asm!(concat!(\"mov %\", stringify!($reg), \", $0\")\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mhal_x86_64/src/lib.rs:196:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m196\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            let mut cr4 = read_control_reg!(CR4);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/hw/registers.rs","byte_start":2378,"byte_end":2381,"line_start":72,"line_end":72,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        asm!(concat!(\"mov %\", stringify!($reg), \", $0\")","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/exception.rs","byte_start":2585,"byte_end":2607,"line_start":58,"line_end":58,"column_start":9,"column_end":31,"is_primary":false,"text":[{"text":"        read_control_reg!(cr2) // CR2 holds the address of the page that caused the #PF","highlight_start":9,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_control_reg!","def_site_span":{"file_name":"hal_x86_64/src/hw/registers.rs","byte_start":2104,"byte_end":2553,"line_start":63,"line_end":80,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"pub macro read_control_reg($reg: ident) {{","highlight_start":1,"highlight_end":43},{"text":"    let result: u64;","highlight_start":1,"highlight_end":21},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /*","highlight_start":1,"highlight_end":7},{"text":"     * If this macro is used inside an unsafe block, this causes a warning, which can be unexpected and is noisy,","highlight_start":1,"highlight_end":114},{"text":"     * so we suppress it here.","highlight_start":1,"highlight_end":31},{"text":"     */","highlight_start":1,"highlight_end":8},{"text":"    #[allow(unused_unsafe)]","highlight_start":1,"highlight_end":28},{"text":"    unsafe {","highlight_start":1,"highlight_end":13},{"text":"        asm!(concat!(\"mov %\", stringify!($reg), \", $0\")","highlight_start":1,"highlight_end":56},{"text":"             : \"=r\"(result)","highlight_start":1,"highlight_end":28},{"text":"             :","highlight_start":1,"highlight_end":15},{"text":"             : \"memory\"","highlight_start":1,"highlight_end":24},{"text":"             : \"volatile\"","highlight_start":1,"highlight_end":26},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    result","highlight_start":1,"highlight_end":11},{"text":"}}","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"replace the use of the deprecated item","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/hw/registers.rs","byte_start":2378,"byte_end":2381,"line_start":72,"line_end":72,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        asm!(concat!(\"mov %\", stringify!($reg), \", $0\")","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":"llvm_asm","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"hal_x86_64/src/interrupts/exception.rs","byte_start":2585,"byte_end":2607,"line_start":58,"line_end":58,"column_start":9,"column_end":31,"is_primary":false,"text":[{"text":"        read_control_reg!(cr2) // CR2 holds the address of the page that caused the #PF","highlight_start":9,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read_control_reg!","def_site_span":{"file_name":"hal_x86_64/src/hw/registers.rs","byte_start":2104,"byte_end":2553,"line_start":63,"line_end":80,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"pub macro read_control_reg($reg: ident) {{","highlight_start":1,"highlight_end":43},{"text":"    let result: u64;","highlight_start":1,"highlight_end":21},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /*","highlight_start":1,"highlight_end":7},{"text":"     * If this macro is used inside an unsafe block, this causes a warning, which can be unexpected and is noisy,","highlight_start":1,"highlight_end":114},{"text":"     * so we suppress it here.","highlight_start":1,"highlight_end":31},{"text":"     */","highlight_start":1,"highlight_end":8},{"text":"    #[allow(unused_unsafe)]","highlight_start":1,"highlight_end":28},{"text":"    unsafe {","highlight_start":1,"highlight_end":13},{"text":"        asm!(concat!(\"mov %\", stringify!($reg), \", $0\")","highlight_start":1,"highlight_end":56},{"text":"             : \"=r\"(result)","highlight_start":1,"highlight_end":28},{"text":"             :","highlight_start":1,"highlight_end":15},{"text":"             : \"memory\"","highlight_start":1,"highlight_end":24},{"text":"             : \"volatile\"","highlight_start":1,"highlight_end":26},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    result","highlight_start":1,"highlight_end":11},{"text":"}}","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/hw/registers.rs:72:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        asm!(concat!(\"mov %\", stringify!($reg), \", $0\")\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the use of the deprecated item: `llvm_asm`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mhal_x86_64/src/interrupts/exception.rs:58:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        read_control_reg!(cr2) // CR2 holds the address of the page that caused the #PF\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"unused variable: `processor_info_d`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/hw/cpu.rs","byte_start":7539,"byte_end":7555,"line_start":253,"line_end":253,"column_start":53,"column_end":69,"is_primary":true,"text":[{"text":"fn decode_supported_features(processor_info_c: u32, processor_info_d: u32) -> SupportedFeatures {","highlight_start":53,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/hw/cpu.rs","byte_start":7539,"byte_end":7555,"line_start":253,"line_end":253,"column_start":53,"column_end":69,"is_primary":true,"text":[{"text":"fn decode_supported_features(processor_info_c: u32, processor_info_d: u32) -> SupportedFeatures {","highlight_start":53,"highlight_end":69}],"label":null,"suggested_replacement":"_processor_info_d","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `processor_info_d`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/hw/cpu.rs:253:53\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m253\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mfn decode_supported_features(processor_info_c: u32, processor_info_d: u32) -> SupportedFeatures {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_processor_info_d`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"message":"unused variable: `pci_info`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":3343,"byte_end":3351,"line_start":97,"line_end":97,"column_start":21,"column_end":29,"is_primary":true,"text":[{"text":"                let pci_info = PciResolver::resolve(acpi_info.pci_config_regions.as_ref().unwrap(), aml_context);","highlight_start":21,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":3343,"byte_end":3351,"line_start":97,"line_end":97,"column_start":21,"column_end":29,"is_primary":true,"text":[{"text":"                let pci_info = PciResolver::resolve(acpi_info.pci_config_regions.as_ref().unwrap(), aml_context);","highlight_start":21,"highlight_end":29}],"label":null,"suggested_replacement":"_pci_info","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `pci_info`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/interrupts/mod.rs:97:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m97\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                let pci_info = PciResolver::resolve(acpi_info.pci_config_regions.as_ref().unwrap(), aml_context);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_pci_info`\u001b[0m\n\n"}
{"message":"field is never read: `routing_table`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/interrupts/pci.rs","byte_start":971,"byte_end":1001,"line_start":42,"line_end":42,"column_start":5,"column_end":35,"is_primary":true,"text":[{"text":"    routing_table: PciRoutingTable,","highlight_start":5,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field is never read: `routing_table`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/interrupts/pci.rs:42:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    routing_table: PciRoutingTable,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}
{"message":"constant item is never used: `FREE_VECTORS_START`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/interrupts/mod.rs","byte_start":1517,"byte_end":1553,"line_start":51,"line_end":51,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"const FREE_VECTORS_START: u8 = 0x30;","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: constant item is never used: `FREE_VECTORS_START`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/interrupts/mod.rs:51:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mconst FREE_VECTORS_START: u8 = 0x30;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"field is never read: `cpu_info`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/lib.rs","byte_start":1176,"byte_end":1193,"line_start":42,"line_end":42,"column_start":13,"column_end":30,"is_primary":true,"text":[{"text":"            cpu_info: CpuInfo,","highlight_start":13,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field is never read: `cpu_info`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/lib.rs:42:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            cpu_info: CpuInfo,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"field is never read: `acpi_info`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/lib.rs","byte_start":1207,"byte_end":1230,"line_start":43,"line_end":43,"column_start":13,"column_end":36,"is_primary":true,"text":[{"text":"            acpi_info: Option<Acpi>,","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field is never read: `acpi_info`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/lib.rs:43:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            acpi_info: Option<Acpi>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"field is never read: `aml_context`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/lib.rs","byte_start":1244,"byte_end":1267,"line_start":44,"line_end":44,"column_start":13,"column_end":36,"is_primary":true,"text":[{"text":"            aml_context: AmlContext,","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field is never read: `aml_context`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/lib.rs:44:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            aml_context: AmlContext,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"field is never read: `bsp_percpu`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/lib.rs","byte_start":1327,"byte_end":1362,"line_start":46,"line_end":46,"column_start":13,"column_end":48,"is_primary":true,"text":[{"text":"            bsp_percpu: Pin<Box<PerCpuImpl<T>>>,","highlight_start":13,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field is never read: `bsp_percpu`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/lib.rs:46:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            bsp_percpu: Pin<Box<PerCpuImpl<T>>>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"field is never read: `interrupt_controller`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"hal_x86_64/src/lib.rs","byte_start":1376,"byte_end":1417,"line_start":47,"line_end":47,"column_start":13,"column_end":54,"is_primary":true,"text":[{"text":"            interrupt_controller: InterruptController,","highlight_start":13,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field is never read: `interrupt_controller`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhal_x86_64/src/lib.rs:47:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            interrupt_controller: InterruptController,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"67 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 67 warnings emitted\u001b[0m\n\n"}
